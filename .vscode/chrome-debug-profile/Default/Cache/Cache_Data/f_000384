import __vite__cjsImport0_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport0_react["useCallback"];
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { useColumnDefinitionsFromFieldMetadata } from "/src/modules/object-metadata/hooks/useColumnDefinitionsFromFieldMetadata.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { availableFieldMetadataItemsForFilterFamilySelector } from "/src/modules/object-metadata/states/availableFieldMetadataItemsForFilterFamilySelector.ts";
import { getFilterTypeFromFieldType } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { useSelectFilterUsedInDropdown } from "/src/modules/object-record/object-filter-dropdown/hooks/useSelectFilterUsedInDropdown.ts";
import { useUpsertRecordFilter } from "/src/modules/object-record/record-filter/hooks/useUpsertRecordFilter.ts";
import { currentRecordFiltersComponentState } from "/src/modules/object-record/record-filter/states/currentRecordFiltersComponentState.ts";
import { getRecordFilterOperands } from "/src/modules/object-record/record-filter/utils/getRecordFilterOperands.ts";
import { useSetActiveDropdownFocusIdAndMemorizePrevious } from "/src/modules/ui/layout/dropdown/hooks/useSetFocusedDropdownIdAndMemorizePrevious.ts";
import { isDropdownOpenComponentState } from "/src/modules/ui/layout/dropdown/states/isDropdownOpenComponentState.ts";
import { usePreviousHotkeyScope } from "/src/modules/ui/utilities/hotkey/hooks/usePreviousHotkeyScope.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { extractComponentState } from "/src/modules/ui/utilities/state/component-state/utils/extractComponentState.ts";
import { useRecoilCallback, useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useHandleToggleColumnFilter = ({ objectNameSingular, viewBarId })=>{
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const { columnDefinitions } = useColumnDefinitionsFromFieldMetadata(objectMetadataItem);
    const { upsertRecordFilter } = useUpsertRecordFilter();
    const { setActiveDropdownFocusIdAndMemorizePrevious } = useSetActiveDropdownFocusIdAndMemorizePrevious();
    const { setHotkeyScopeAndMemorizePreviousScope } = usePreviousHotkeyScope();
    const openDropdown = useRecoilCallback(({ set })=>{
        return (dropdownId)=>{
            const dropdownOpenState = extractComponentState(isDropdownOpenComponentState, dropdownId);
            setActiveDropdownFocusIdAndMemorizePrevious(dropdownId);
            setHotkeyScopeAndMemorizePreviousScope(dropdownId);
            set(dropdownOpenState, true);
        };
    }, [
        setActiveDropdownFocusIdAndMemorizePrevious,
        setHotkeyScopeAndMemorizePreviousScope
    ]);
    const availableFieldMetadataItemsForFilter = useRecoilValue(availableFieldMetadataItemsForFilterFamilySelector({
        objectMetadataItemId: objectMetadataItem.id
    }));
    const { selectFilterUsedInDropdown } = useSelectFilterUsedInDropdown(viewBarId);
    const currentRecordFilters = useRecoilComponentValueV2(currentRecordFiltersComponentState);
    const handleToggleColumnFilter = useCallback(async (fieldMetadataId)=>{
        const correspondingColumnDefinition = columnDefinitions.find((columnDefinition)=>columnDefinition.fieldMetadataId === fieldMetadataId);
        if (!isDefined(correspondingColumnDefinition)) return;
        const newFilterId = v4();
        const existingRecordFilter = currentRecordFilters.find((recordFilter)=>recordFilter.fieldMetadataId === fieldMetadataId);
        if (!isDefined(existingRecordFilter)) {
            const fieldMetadataItem = availableFieldMetadataItemsForFilter.find((fieldMetadataItemToFind)=>fieldMetadataItemToFind.id === fieldMetadataId);
            if (!isDefined(fieldMetadataItem)) {
                throw new Error('Field metadata item not found');
            }
            const filterType = getFilterTypeFromFieldType(fieldMetadataItem.type);
            const availableOperandsForFilter = getRecordFilterOperands({
                filterType
            });
            const defaultOperand = availableOperandsForFilter[0];
            const newFilter = {
                id: newFilterId,
                fieldMetadataId,
                operand: defaultOperand,
                displayValue: '',
                label: fieldMetadataItem.label,
                type: filterType,
                value: ''
            };
            upsertRecordFilter(newFilter);
            selectFilterUsedInDropdown({
                fieldMetadataItemId: fieldMetadataId
            });
        }
        openDropdown(existingRecordFilter?.id ?? newFilterId);
    }, [
        openDropdown,
        columnDefinitions,
        selectFilterUsedInDropdown,
        currentRecordFilters,
        availableFieldMetadataItemsForFilter,
        upsertRecordFilter
    ]);
    return handleToggleColumnFilter;
};

//# sourceMappingURL=data:application/json;base64,