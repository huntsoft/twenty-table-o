import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import { triggerCreateRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerCreateRecordsOptimisticEffect.ts";
import { triggerDestroyRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerDestroyRecordsOptimisticEffect.ts";
import { apiConfigState } from "/src/modules/client-config/states/apiConfigState.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { useGetRecordFromCache } from "/src/modules/object-record/cache/hooks/useGetRecordFromCache.ts";
import { DEFAULT_MUTATION_BATCH_SIZE } from "/src/modules/object-record/constants/DefaultMutationBatchSize.ts";
import { useDestroyManyRecordsMutation } from "/src/modules/object-record/hooks/useDestroyManyRecordsMutation.ts";
import { useRefetchAggregateQueries } from "/src/modules/object-record/hooks/useRefetchAggregateQueries.ts";
import { getDestroyManyRecordsMutationResponseField } from "/src/modules/object-record/utils/getDestroyManyRecordsMutationResponseField.ts";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { sleep } from "/src/utils/sleep.ts";
import { capitalize, isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useDestroyManyRecords = ({ objectNameSingular })=>{
    const apiConfig = useRecoilValue(apiConfigState);
    const mutationPageSize = apiConfig?.mutationMaximumAffectedRecords ?? DEFAULT_MUTATION_BATCH_SIZE;
    const apolloClient = useApolloClient();
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const getRecordFromCache = useGetRecordFromCache({
        objectNameSingular
    });
    const { destroyManyRecordsMutation } = useDestroyManyRecordsMutation({
        objectNameSingular
    });
    const { objectMetadataItems } = useObjectMetadataItems();
    const { refetchAggregateQueries } = useRefetchAggregateQueries({
        objectMetadataNamePlural: objectMetadataItem.namePlural
    });
    const mutationResponseField = getDestroyManyRecordsMutationResponseField(objectMetadataItem.namePlural);
    const destroyManyRecords = async ({ recordIdsToDestroy, delayInMsBetweenRequests, skipOptimisticEffect = false })=>{
        const numberOfBatches = Math.ceil(recordIdsToDestroy.length / mutationPageSize);
        const destroyedRecords = [];
        for(let batchIndex = 0; batchIndex < numberOfBatches; batchIndex++){
            const batchedIdToDestroy = recordIdsToDestroy.slice(batchIndex * mutationPageSize, (batchIndex + 1) * mutationPageSize);
            const cachedRecords = batchedIdToDestroy.map((recordId)=>getRecordFromCache(recordId, apolloClient.cache)).filter(isDefined);
            const destroyedRecordsResponse = await apolloClient.mutate({
                mutation: destroyManyRecordsMutation,
                variables: {
                    filter: {
                        id: {
                            in: batchedIdToDestroy
                        }
                    }
                },
                optimisticResponse: skipOptimisticEffect ? undefined : {
                    [mutationResponseField]: batchedIdToDestroy.map((idToDestroy)=>({
                            __typename: capitalize(objectNameSingular),
                            id: idToDestroy
                        }))
                },
                update: (cache, { data })=>{
                    if (skipOptimisticEffect) {
                        return;
                    }
                    const records = data?.[mutationResponseField];
                    if (!isDefined(records) || records.length === 0) return;
                    const cachedRecords = records.map((record)=>getRecordFromCache(record.id, cache)).filter(isDefined);
                    triggerDestroyRecordsOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        recordsToDestroy: cachedRecords,
                        objectMetadataItems
                    });
                }
            }).catch((error)=>{
                if (cachedRecords.length > 0 && !skipOptimisticEffect) {
                    triggerCreateRecordsOptimisticEffect({
                        cache: apolloClient.cache,
                        objectMetadataItem,
                        recordsToCreate: cachedRecords,
                        objectMetadataItems
                    });
                }
                throw error;
            });
            const destroyedRecordsForThisBatch = destroyedRecordsResponse.data?.[mutationResponseField] ?? [];
            destroyedRecords.push(...destroyedRecordsForThisBatch);
            if (isDefined(delayInMsBetweenRequests)) {
                await sleep(delayInMsBetweenRequests);
            }
        }
        await refetchAggregateQueries();
        return destroyedRecords;
    };
    return {
        destroyManyRecords
    };
};

//# sourceMappingURL=data:application/json;base64,