import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-table/record-table-body/components/RecordTableBodyRecordGroupDragDropContextProvider.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-body/components/RecordTableBodyRecordGroupDragDropContextProvider.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { DragDropContext } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@hello-pangea_dnd.js?v=226f7286";
import { useRecoilCallback, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { useUpdateOneRecord } from "/src/modules/object-record/hooks/useUpdateOneRecord.ts";
import { getDraggedRecordPosition } from "/src/modules/object-record/record-board/utils/getDraggedRecordPosition.ts";
import { recordGroupDefinitionFamilyState } from "/src/modules/object-record/record-group/states/recordGroupDefinitionFamilyState.ts";
import { recordIndexRecordIdsByGroupComponentFamilyState } from "/src/modules/object-record/record-index/states/recordIndexRecordIdsByGroupComponentFamilyState.ts";
import { currentRecordSortsComponentState } from "/src/modules/object-record/record-sort/states/currentRecordSortsComponentState.ts";
import { recordStoreFamilyState } from "/src/modules/object-record/record-store/states/recordStoreFamilyState.ts";
import { useRecordTableContextOrThrow } from "/src/modules/object-record/record-table/contexts/RecordTableContext.ts";
import { isRemoveSortingModalOpenState } from "/src/modules/object-record/record-table/states/isRemoveSortingModalOpenState.ts";
import { useRecoilComponentCallbackStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentCallbackStateV2.ts";
import { getSnapshotValue } from "/src/modules/ui/utilities/state/utils/getSnapshotValue.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const RecordTableBodyRecordGroupDragDropContextProvider = ({ children })=>{
    _s();
    const { objectNameSingular, objectMetadataItem } = useRecordTableContextOrThrow();
    const { updateOneRecord: updateOneRow } = useUpdateOneRecord({
        objectNameSingular
    });
    const setIsRemoveSortingModalOpen = useSetRecoilState(isRemoveSortingModalOpenState);
    const recordIdsByGroupFamilyState = useRecoilComponentCallbackStateV2(recordIndexRecordIdsByGroupComponentFamilyState);
    const currentRecordSortsCallbackState = useRecoilComponentCallbackStateV2(currentRecordSortsComponentState);
    const handleDragEnd = useRecoilCallback(({ snapshot })=>(result)=>{
            const destinationRecordGroupId = result.destination?.droppableId;
            if (!isDefined(result.destination)) {
                throw new Error('Drop Destination is not defined');
            }
            if (!isDefined(destinationRecordGroupId)) {
                throw new Error('Record group id is not defined');
            }
            const destinationRecordGroup = getSnapshotValue(snapshot, recordGroupDefinitionFamilyState(destinationRecordGroupId));
            const currentRecordSorts = snapshot.getLoadable(currentRecordSortsCallbackState).getValue();
            if (!isDefined(destinationRecordGroup)) {
                throw new Error('Record group is not defined');
            }
            const fieldMetadata = objectMetadataItem.fields.find((field)=>field.id === destinationRecordGroup.fieldMetadataId);
            if (!isDefined(fieldMetadata)) {
                throw new Error('Field metadata is not defined');
            }
            if (currentRecordSorts.length > 0) {
                setIsRemoveSortingModalOpen(true);
                return;
            }
            const isSourceIndexBeforeDestinationIndexInSameGroup = result.source.index < result.destination.index && result.source.droppableId === result.destination.droppableId;
            const destinationGroupRecordIds = getSnapshotValue(snapshot, recordIdsByGroupFamilyState(destinationRecordGroupId));
            const recordBeforeDestinationId = destinationGroupRecordIds[isSourceIndexBeforeDestinationIndexInSameGroup ? result.destination.index : result.destination.index - 1];
            const recordBeforeDestination = recordBeforeDestinationId ? snapshot.getLoadable(recordStoreFamilyState(recordBeforeDestinationId)).getValue() : null;
            const recordAfterDestinationId = destinationGroupRecordIds[isSourceIndexBeforeDestinationIndexInSameGroup ? result.destination.index + 1 : result.destination.index];
            const recordAfterDestination = recordAfterDestinationId ? snapshot.getLoadable(recordStoreFamilyState(recordAfterDestinationId)).getValue() : null;
            const newPosition = getDraggedRecordPosition(recordBeforeDestination?.position, recordAfterDestination?.position);
            if (!isDefined(newPosition)) {
                return;
            }
            updateOneRow({
                idToUpdate: result.draggableId,
                updateOneRecordInput: {
                    position: newPosition,
                    [fieldMetadata.name]: destinationRecordGroup.value
                }
            });
        }, [
        objectMetadataItem.fields,
        recordIdsByGroupFamilyState,
        updateOneRow,
        setIsRemoveSortingModalOpen,
        currentRecordSortsCallbackState
    ]);
    return /*#__PURE__*/ _jsxDEV(DragDropContext, {
        onDragEnd: handleDragEnd,
        children: children
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-body/components/RecordTableBodyRecordGroupDragDropContextProvider.tsx",
        lineNumber: 142,
        columnNumber: 5
    }, this);
};
_s(RecordTableBodyRecordGroupDragDropContextProvider, "c75RetThbJYDVQoEPEszBTJzOzk=", false, function() {
    return [
        useRecordTableContextOrThrow,
        useUpdateOneRecord,
        useSetRecoilState,
        useRecoilComponentCallbackStateV2,
        useRecoilComponentCallbackStateV2,
        useRecoilCallback
    ];
});
_c = RecordTableBodyRecordGroupDragDropContextProvider;
var _c;
$RefreshReg$(_c, "RecordTableBodyRecordGroupDragDropContextProvider");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-body/components/RecordTableBodyRecordGroupDragDropContextProvider.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-body/components/RecordTableBodyRecordGroupDragDropContextProvider.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,