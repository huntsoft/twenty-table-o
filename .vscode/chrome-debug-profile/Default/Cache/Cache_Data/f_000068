import { COMMAND_MENU_COMPONENT_INSTANCE_ID } from "/src/modules/command-menu/constants/CommandMenuComponentInstanceId.ts";
import { COMMAND_MENU_CONTEXT_CHIP_GROUPS_DROPDOWN_ID } from "/src/modules/command-menu/constants/CommandMenuContextChipGroupsDropdownId.ts";
import { COMMAND_MENU_PREVIOUS_COMPONENT_INSTANCE_ID } from "/src/modules/command-menu/constants/CommandMenuPreviousComponentInstanceId.ts";
import { useResetContextStoreStates } from "/src/modules/command-menu/hooks/useResetContextStoreStates.ts";
import { commandMenuNavigationMorphItemByPageState } from "/src/modules/command-menu/states/commandMenuNavigationMorphItemsState.ts";
import { commandMenuNavigationRecordsState } from "/src/modules/command-menu/states/commandMenuNavigationRecordsState.ts";
import { commandMenuNavigationStackState } from "/src/modules/command-menu/states/commandMenuNavigationStackState.ts";
import { commandMenuPageInfoState } from "/src/modules/command-menu/states/commandMenuPageInfoState.ts";
import { commandMenuPageState } from "/src/modules/command-menu/states/commandMenuPageState.ts";
import { commandMenuSearchState } from "/src/modules/command-menu/states/commandMenuSearchState.ts";
import { hasUserSelectedCommandState } from "/src/modules/command-menu/states/hasUserSelectedCommandState.ts";
import { isCommandMenuClosingState } from "/src/modules/command-menu/states/isCommandMenuClosingState.ts";
import { isCommandMenuOpenedState } from "/src/modules/command-menu/states/isCommandMenuOpenedState.ts";
import { CommandMenuPages } from "/src/modules/command-menu/types/CommandMenuPages.ts";
import { viewableRecordIdState } from "/src/modules/object-record/record-right-drawer/states/viewableRecordIdState.ts";
import { useDropdownV2 } from "/src/modules/ui/layout/dropdown/hooks/useDropdownV2.ts";
import { emitRightDrawerCloseEvent } from "/src/modules/ui/layout/right-drawer/utils/emitRightDrawerCloseEvent.ts";
import { useSelectableList } from "/src/modules/ui/layout/selectable-list/hooks/useSelectableList.ts";
import { getShowPageTabListComponentId } from "/src/modules/ui/layout/show-page/utils/getShowPageTabListComponentId.ts";
import { activeTabIdComponentState } from "/src/modules/ui/layout/tab/states/activeTabIdComponentState.ts";
import { usePreviousHotkeyScope } from "/src/modules/ui/utilities/hotkey/hooks/usePreviousHotkeyScope.ts";
import { WORKFLOW_RUN_STEP_SIDE_PANEL_TAB_LIST_COMPONENT_ID } from "/src/modules/workflow/workflow-steps/constants/WorkflowRunStepSidePanelTabListComponentId.ts";
import { WorkflowRunTabId } from "/src/modules/workflow/workflow-steps/types/WorkflowRunTabId.tsx";
import { WORKFLOW_SERVERLESS_FUNCTION_TAB_LIST_COMPONENT_ID } from "/src/modules/workflow/workflow-steps/workflow-actions/code-action/constants/WorkflowServerlessFunctionTabListComponentId.ts";
import { WorkflowServerlessFunctionTabId } from "/src/modules/workflow/workflow-steps/workflow-actions/code-action/types/WorkflowServerlessFunctionTabId.ts";
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
export const useCommandMenuCloseAnimationCompleteCleanup = ()=>{
    const { resetSelectedItem } = useSelectableList('command-menu-list');
    const { goBackToPreviousHotkeyScope } = usePreviousHotkeyScope(COMMAND_MENU_COMPONENT_INSTANCE_ID);
    const { resetContextStoreStates } = useResetContextStoreStates();
    const { closeDropdown } = useDropdownV2();
    const commandMenuCloseAnimationCompleteCleanup = useRecoilCallback(({ snapshot, set })=>()=>{
            closeDropdown(COMMAND_MENU_CONTEXT_CHIP_GROUPS_DROPDOWN_ID);
            resetContextStoreStates(COMMAND_MENU_COMPONENT_INSTANCE_ID);
            resetContextStoreStates(COMMAND_MENU_PREVIOUS_COMPONENT_INSTANCE_ID);
            set(viewableRecordIdState, null);
            set(commandMenuPageState, CommandMenuPages.Root);
            set(commandMenuPageInfoState, {
                title: undefined,
                Icon: undefined,
                instanceId: ''
            });
            set(isCommandMenuOpenedState, false);
            set(commandMenuSearchState, '');
            set(commandMenuNavigationMorphItemByPageState, new Map());
            set(commandMenuNavigationRecordsState, []);
            set(commandMenuNavigationStackState, []);
            resetSelectedItem();
            set(hasUserSelectedCommandState, false);
            goBackToPreviousHotkeyScope();
            emitRightDrawerCloseEvent();
            set(isCommandMenuClosingState, false);
            set(activeTabIdComponentState.atomFamily({
                instanceId: WORKFLOW_RUN_STEP_SIDE_PANEL_TAB_LIST_COMPONENT_ID
            }), WorkflowRunTabId.NODE);
            set(activeTabIdComponentState.atomFamily({
                instanceId: WORKFLOW_SERVERLESS_FUNCTION_TAB_LIST_COMPONENT_ID
            }), WorkflowServerlessFunctionTabId.CODE);
            for (const [pageId, morphItem] of snapshot.getLoadable(commandMenuNavigationMorphItemByPageState).getValue()){
                set(activeTabIdComponentState.atomFamily({
                    instanceId: getShowPageTabListComponentId({
                        pageId,
                        targetObjectId: morphItem.recordId
                    })
                }), null);
            }
        }, [
        closeDropdown,
        goBackToPreviousHotkeyScope,
        resetContextStoreStates,
        resetSelectedItem
    ]);
    return {
        commandMenuCloseAnimationCompleteCleanup
    };
};

//# sourceMappingURL=data:application/json;base64,