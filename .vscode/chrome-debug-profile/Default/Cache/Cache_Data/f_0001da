import { useRecoilCallback, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import __vite__cjsImport1_tsKeyEnum from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/ts-key-enum.js?v=226f7286"; const Key = __vite__cjsImport1_tsKeyEnum["Key"];
import { useGetIsSomeCellInEditModeState } from "/src/modules/object-record/record-table/hooks/internal/useGetIsSomeCellInEditMode.ts";
import { useSetHasUserSelectedAllRows } from "/src/modules/object-record/record-table/hooks/internal/useSetAllRowSelectedState.ts";
import { useRecordTableMoveFocus } from "/src/modules/object-record/record-table/hooks/useRecordTableMoveFocus.ts";
import { isSoftFocusUsingMouseState } from "/src/modules/object-record/record-table/states/isSoftFocusUsingMouseState.ts";
import { useScopedHotkeys } from "/src/modules/ui/utilities/hotkey/hooks/useScopedHotkeys.ts";
import { useSetHotkeyScope } from "/src/modules/ui/utilities/hotkey/hooks/useSetHotkeyScope.ts";
import { getSnapshotValue } from "/src/modules/ui/utilities/recoil-scope/utils/getSnapshotValue.ts";
import { isDeeplyEqual } from "/src/utils/isDeeplyEqual.ts";
import { useUpsertRecordFromState } from "/src/modules/object-record/hooks/useUpsertRecordFromState.ts";
import { TableHotkeyScope } from "/src/modules/object-record/record-table/types/TableHotkeyScope.ts";
import { availableTableColumnsComponentState } from "/src/modules/object-record/record-table/states/availableTableColumnsComponentState.ts";
import { RecordTableComponentInstanceContext } from "/src/modules/object-record/record-table/states/context/RecordTableComponentInstanceContext.ts";
import { isRecordTableInitialLoadingComponentState } from "/src/modules/object-record/record-table/states/isRecordTableInitialLoadingComponentState.ts";
import { onColumnsChangeComponentState } from "/src/modules/object-record/record-table/states/onColumnsChangeComponentState.ts";
import { onEntityCountChangeComponentState } from "/src/modules/object-record/record-table/states/onEntityCountChangeComponentState.ts";
import { onToggleColumnFilterComponentState } from "/src/modules/object-record/record-table/states/onToggleColumnFilterComponentState.ts";
import { onToggleColumnSortComponentState } from "/src/modules/object-record/record-table/states/onToggleColumnSortComponentState.ts";
import { tableLastRowVisibleComponentState } from "/src/modules/object-record/record-table/states/tableLastRowVisibleComponentState.ts";
import { useAvailableComponentInstanceIdOrThrow } from "/src/modules/ui/utilities/state/component-state/hooks/useAvailableComponentInstanceIdOrThrow.ts";
import { useRecoilComponentCallbackStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentCallbackStateV2.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import { useDisableSoftFocus } from "/src/modules/object-record/record-table/hooks/internal/useDisableSoftFocus.ts";
import { useLeaveTableFocus } from "/src/modules/object-record/record-table/hooks/internal/useLeaveTableFocus.ts";
import { useResetTableRowSelection } from "/src/modules/object-record/record-table/hooks/internal/useResetTableRowSelection.ts";
import { useSelectAllRows } from "/src/modules/object-record/record-table/hooks/internal/useSelectAllRows.ts";
import { useSetRecordTableData } from "/src/modules/object-record/record-table/hooks/internal/useSetRecordTableData.ts";
import { useSetRowSelectedState } from "/src/modules/object-record/record-table/hooks/internal/useSetRowSelectedState.ts";
import { useSetSoftFocusPosition } from "/src/modules/object-record/record-table/hooks/internal/useSetSoftFocusPosition.ts";
export const useRecordTable = (props)=>{
    const recordTableId = useAvailableComponentInstanceIdOrThrow(RecordTableComponentInstanceContext, props?.recordTableId);
    const availableTableColumnsState = useRecoilComponentCallbackStateV2(availableTableColumnsComponentState, recordTableId);
    const setAvailableTableColumns = useRecoilCallback(({ snapshot, set })=>(columns)=>{
            const availableTableColumns = getSnapshotValue(snapshot, availableTableColumnsState);
            if (isDeeplyEqual(availableTableColumns, columns)) {
                return;
            }
            set(availableTableColumnsState, columns);
        }, [
        availableTableColumnsState
    ]);
    const setOnEntityCountChange = useSetRecoilComponentStateV2(onEntityCountChangeComponentState, recordTableId);
    const setOnColumnsChange = useSetRecoilComponentStateV2(onColumnsChangeComponentState, recordTableId);
    const setOnToggleColumnFilter = useSetRecoilComponentStateV2(onToggleColumnFilterComponentState, recordTableId);
    const setOnToggleColumnSort = useSetRecoilComponentStateV2(onToggleColumnSortComponentState, recordTableId);
    const setIsRecordTableInitialLoading = useSetRecoilComponentStateV2(isRecordTableInitialLoadingComponentState, recordTableId);
    const setRecordTableLastRowVisible = useSetRecoilComponentStateV2(tableLastRowVisibleComponentState, recordTableId);
    const onColumnsChangeState = useRecoilComponentCallbackStateV2(onColumnsChangeComponentState, recordTableId);
    const onColumnsChange = useRecoilCallback(({ snapshot })=>(columns)=>{
            const onColumnsChange = getSnapshotValue(snapshot, onColumnsChangeState);
            onColumnsChange?.(columns);
        }, [
        onColumnsChangeState
    ]);
    const onEntityCountChangeState = useRecoilComponentCallbackStateV2(onEntityCountChangeComponentState, recordTableId);
    const onEntityCountChange = useRecoilCallback(({ snapshot })=>(count, currentRecordGroupId)=>{
            const onEntityCountChange = getSnapshotValue(snapshot, onEntityCountChangeState);
            onEntityCountChange?.(count, currentRecordGroupId);
        }, [
        onEntityCountChangeState
    ]);
    const setRecordTableData = useSetRecordTableData({
        recordTableId,
        onEntityCountChange
    });
    const leaveTableFocus = useLeaveTableFocus(recordTableId);
    const setRowSelected = useSetRowSelectedState(recordTableId);
    const setHasUserSelectedAllRows = useSetHasUserSelectedAllRows(recordTableId);
    const resetTableRowSelection = useResetTableRowSelection(recordTableId);
    const upsertRecordTableItem = useUpsertRecordFromState;
    const setSoftFocusPosition = useSetSoftFocusPosition(recordTableId);
    const { moveDown, moveLeft, moveRight, moveUp } = useRecordTableMoveFocus(recordTableId);
    const useMapKeyboardToSoftFocus = ()=>{
        const disableSoftFocus = useDisableSoftFocus(recordTableId);
        const setHotkeyScope = useSetHotkeyScope();
        const setIsSoftFocusUsingMouseState = useSetRecoilState(isSoftFocusUsingMouseState);
        useScopedHotkeys([
            Key.ArrowUp,
            `${Key.Shift}+${Key.Enter}`
        ], ()=>{
            moveUp();
        }, TableHotkeyScope.TableSoftFocus, [
            moveUp
        ]);
        useScopedHotkeys(Key.ArrowDown, ()=>{
            moveDown();
        }, TableHotkeyScope.TableSoftFocus, [
            moveDown
        ]);
        useScopedHotkeys([
            Key.ArrowLeft,
            `${Key.Shift}+${Key.Tab}`
        ], ()=>{
            moveLeft();
            setIsSoftFocusUsingMouseState(false);
        }, TableHotkeyScope.TableSoftFocus, [
            moveLeft
        ]);
        useScopedHotkeys([
            Key.ArrowRight,
            Key.Tab
        ], ()=>{
            moveRight();
            setIsSoftFocusUsingMouseState(false);
        }, TableHotkeyScope.TableSoftFocus, [
            moveRight
        ]);
        useScopedHotkeys([
            Key.Escape
        ], ()=>{
            setHotkeyScope(TableHotkeyScope.Table, {
                goto: true,
                keyboardShortcutMenu: true
            });
            disableSoftFocus();
        }, TableHotkeyScope.TableSoftFocus, [
            disableSoftFocus
        ]);
    };
    const { selectAllRows } = useSelectAllRows(recordTableId);
    const isSomeCellInEditModeState = useGetIsSomeCellInEditModeState(recordTableId);
    return {
        onColumnsChange,
        setAvailableTableColumns,
        setOnEntityCountChange,
        setRecordTableData,
        leaveTableFocus,
        setRowSelected,
        resetTableRowSelection,
        upsertRecordTableItem,
        moveDown,
        moveLeft,
        moveRight,
        moveUp,
        useMapKeyboardToSoftFocus,
        selectAllRows,
        setOnColumnsChange,
        setIsRecordTableInitialLoading,
        setRecordTableLastRowVisible,
        setSoftFocusPosition,
        isSomeCellInEditModeState,
        setHasUserSelectedAllRows,
        setOnToggleColumnFilter,
        setOnToggleColumnSort
    };
};

//# sourceMappingURL=data:application/json;base64,