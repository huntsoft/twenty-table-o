import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import { triggerUpdateRecordOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffect.ts";
import { currentWorkspaceMemberState } from "/src/modules/auth/states/currentWorkspaceMemberState.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { useGetRecordFromCache } from "/src/modules/object-record/cache/hooks/useGetRecordFromCache.ts";
import { getObjectTypename } from "/src/modules/object-record/cache/utils/getObjectTypename.ts";
import { getRecordNodeFromRecord } from "/src/modules/object-record/cache/utils/getRecordNodeFromRecord.ts";
import { updateRecordFromCache } from "/src/modules/object-record/cache/utils/updateRecordFromCache.ts";
import { computeDepthOneRecordGqlFieldsFromRecord } from "/src/modules/object-record/graphql/utils/computeDepthOneRecordGqlFieldsFromRecord.ts";
import { generateDepthOneRecordGqlFields } from "/src/modules/object-record/graphql/utils/generateDepthOneRecordGqlFields.ts";
import { useRefetchAggregateQueries } from "/src/modules/object-record/hooks/useRefetchAggregateQueries.ts";
import { useUpdateOneRecordMutation } from "/src/modules/object-record/hooks/useUpdateOneRecordMutation.ts";
import { computeOptimisticRecordFromInput } from "/src/modules/object-record/utils/computeOptimisticRecordFromInput.ts";
import { getUpdateOneRecordMutationResponseField } from "/src/modules/object-record/utils/getUpdateOneRecordMutationResponseField.ts";
import { sanitizeRecordInput } from "/src/modules/object-record/utils/sanitizeRecordInput.ts";
import __vite__cjsImport16__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNull = __vite__cjsImport16__sniptt_guards["isNull"];
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { buildRecordFromKeysWithSameValue } from "/src/utils/array/buildRecordFromKeysWithSameValue.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useUpdateOneRecord = ({ objectNameSingular, recordGqlFields })=>{
    const apolloClient = useApolloClient();
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const computedRecordGqlFields = recordGqlFields ?? generateDepthOneRecordGqlFields({
        objectMetadataItem
    });
    const getRecordFromCache = useGetRecordFromCache({
        objectNameSingular
    });
    const { updateOneRecordMutation } = useUpdateOneRecordMutation({
        objectNameSingular,
        recordGqlFields: computedRecordGqlFields
    });
    const currentWorkspaceMember = useRecoilValue(currentWorkspaceMemberState);
    const { objectMetadataItems } = useObjectMetadataItems();
    const { refetchAggregateQueries } = useRefetchAggregateQueries({
        objectMetadataNamePlural: objectMetadataItem.namePlural
    });
    const updateOneRecord = async ({ idToUpdate, updateOneRecordInput, optimisticRecord })=>{
        const optimisticRecordInput = optimisticRecord ?? computeOptimisticRecordFromInput({
            objectMetadataItem,
            currentWorkspaceMember: currentWorkspaceMember,
            recordInput: updateOneRecordInput,
            cache: apolloClient.cache,
            objectMetadataItems
        });
        const cachedRecord = getRecordFromCache(idToUpdate);
        const cachedRecordWithConnection = getRecordNodeFromRecord({
            record: cachedRecord,
            objectMetadataItem,
            objectMetadataItems,
            recordGqlFields: computedRecordGqlFields,
            computeReferences: false
        });
        const computedOptimisticRecord = {
            ...cachedRecord,
            ...optimisticRecordInput,
            id: idToUpdate,
            __typename: getObjectTypename(objectMetadataItem.nameSingular)
        };
        const optimisticRecordWithConnection = getRecordNodeFromRecord({
            record: computedOptimisticRecord,
            objectMetadataItem,
            objectMetadataItems,
            recordGqlFields: computedRecordGqlFields,
            computeReferences: false
        });
        const shouldHandleOptimisticCache = !isNull(cachedRecord) && isDefined(optimisticRecordWithConnection) && isDefined(cachedRecordWithConnection);
        if (shouldHandleOptimisticCache) {
            const recordGqlFields = computeDepthOneRecordGqlFieldsFromRecord({
                objectMetadataItem,
                record: optimisticRecordInput
            });
            updateRecordFromCache({
                objectMetadataItems,
                objectMetadataItem,
                cache: apolloClient.cache,
                record: computedOptimisticRecord,
                recordGqlFields
            });
            triggerUpdateRecordOptimisticEffect({
                cache: apolloClient.cache,
                objectMetadataItem,
                currentRecord: cachedRecordWithConnection,
                updatedRecord: optimisticRecordWithConnection,
                objectMetadataItems
            });
        }
        const mutationResponseField = getUpdateOneRecordMutationResponseField(objectNameSingular);
        const sanitizedInput = {
            ...sanitizeRecordInput({
                objectMetadataItem,
                recordInput: updateOneRecordInput
            })
        };
        const updatedRecord = await apolloClient.mutate({
            mutation: updateOneRecordMutation,
            variables: {
                idToUpdate,
                input: sanitizedInput
            },
            update: (cache, { data })=>{
                const record = data?.[mutationResponseField];
                if (!isDefined(record)) return;
                triggerUpdateRecordOptimisticEffect({
                    cache,
                    objectMetadataItem,
                    currentRecord: computedOptimisticRecord,
                    updatedRecord: record,
                    objectMetadataItems
                });
            }
        }).catch((error)=>{
            if (!shouldHandleOptimisticCache) {
                throw error;
            }
            const cachedRecordKeys = new Set(Object.keys(cachedRecord));
            const recordKeysAddedByOptimisticCache = Object.keys(optimisticRecordInput).filter((diffKey)=>!cachedRecordKeys.has(diffKey));
            const recordGqlFields = {
                ...computeDepthOneRecordGqlFieldsFromRecord({
                    objectMetadataItem,
                    record: cachedRecord
                }),
                ...buildRecordFromKeysWithSameValue(recordKeysAddedByOptimisticCache, true)
            };
            updateRecordFromCache({
                objectMetadataItems,
                objectMetadataItem,
                cache: apolloClient.cache,
                record: {
                    ...cachedRecord,
                    ...buildRecordFromKeysWithSameValue(recordKeysAddedByOptimisticCache, null)
                },
                recordGqlFields
            });
            triggerUpdateRecordOptimisticEffect({
                cache: apolloClient.cache,
                objectMetadataItem,
                currentRecord: optimisticRecordWithConnection,
                updatedRecord: cachedRecordWithConnection,
                objectMetadataItems
            });
            throw error;
        });
        await refetchAggregateQueries();
        return updatedRecord?.data?.[mutationResponseField] ?? null;
    };
    return {
        updateOneRecord
    };
};

//# sourceMappingURL=data:application/json;base64,