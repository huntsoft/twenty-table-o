import { useCommandMenu } from "/src/modules/command-menu/hooks/useCommandMenu.ts";
import { viewableRecordIdComponentState } from "/src/modules/command-menu/pages/record-page/states/viewableRecordIdComponentState.ts";
import { viewableRecordNameSingularComponentState } from "/src/modules/command-menu/pages/record-page/states/viewableRecordNameSingularComponentState.ts";
import { commandMenuNavigationMorphItemByPageState } from "/src/modules/command-menu/states/commandMenuNavigationMorphItemsState.ts";
import { CommandMenuPages } from "/src/modules/command-menu/types/CommandMenuPages.ts";
import { MAIN_CONTEXT_STORE_INSTANCE_ID } from "/src/modules/context-store/constants/MainContextStoreInstanceId.tsx";
import { contextStoreCurrentObjectMetadataItemIdComponentState } from "/src/modules/context-store/states/contextStoreCurrentObjectMetadataItemIdComponentState.ts";
import { contextStoreCurrentViewIdComponentState } from "/src/modules/context-store/states/contextStoreCurrentViewIdComponentState.ts";
import { contextStoreCurrentViewTypeComponentState } from "/src/modules/context-store/states/contextStoreCurrentViewTypeComponentState.ts";
import { contextStoreNumberOfSelectedRecordsComponentState } from "/src/modules/context-store/states/contextStoreNumberOfSelectedRecordsComponentState.ts";
import { contextStoreTargetedRecordsRuleComponentState } from "/src/modules/context-store/states/contextStoreTargetedRecordsRuleComponentState.ts";
import { ContextStoreViewType } from "/src/modules/context-store/types/ContextStoreViewType.ts";
import { objectMetadataItemFamilySelector } from "/src/modules/object-metadata/states/objectMetadataItemFamilySelector.ts";
import { getIconColorForObjectType } from "/src/modules/object-metadata/utils/getIconColorForObjectType.ts";
import { viewableRecordIdState } from "/src/modules/object-record/record-right-drawer/states/viewableRecordIdState.ts";
import { useTheme } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react.js?v=226f7286";
import { i18n as $_i18n } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_core.js?v=226f7286";
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { useIcons } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { capitalize } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useOpenRecordInCommandMenu = ()=>{
    const { navigateCommandMenu } = useCommandMenu();
    const theme = useTheme();
    const { getIcon } = useIcons();
    const openRecordInCommandMenu = useRecoilCallback(({ set, snapshot })=>{
        return ({ recordId, objectNameSingular, isNewRecord = false })=>{
            const pageComponentInstanceId = v4();
            set(viewableRecordNameSingularComponentState.atomFamily({
                instanceId: pageComponentInstanceId
            }), objectNameSingular);
            set(viewableRecordIdComponentState.atomFamily({
                instanceId: pageComponentInstanceId
            }), recordId);
            set(viewableRecordIdState, recordId);
            const objectMetadataItem = snapshot.getLoadable(objectMetadataItemFamilySelector({
                objectName: objectNameSingular,
                objectNameType: 'singular'
            })).getValue();
            if (!objectMetadataItem) {
                throw new Error(`No object metadata item found for object name ${objectNameSingular}`);
            }
            set(contextStoreCurrentObjectMetadataItemIdComponentState.atomFamily({
                instanceId: pageComponentInstanceId
            }), objectMetadataItem.id);
            set(contextStoreTargetedRecordsRuleComponentState.atomFamily({
                instanceId: pageComponentInstanceId
            }), {
                mode: 'selection',
                selectedRecordIds: [
                    recordId
                ]
            });
            set(contextStoreNumberOfSelectedRecordsComponentState.atomFamily({
                instanceId: pageComponentInstanceId
            }), 1);
            set(contextStoreCurrentViewTypeComponentState.atomFamily({
                instanceId: pageComponentInstanceId
            }), ContextStoreViewType.ShowPage);
            set(contextStoreCurrentViewIdComponentState.atomFamily({
                instanceId: pageComponentInstanceId
            }), snapshot.getLoadable(contextStoreCurrentViewIdComponentState.atomFamily({
                instanceId: MAIN_CONTEXT_STORE_INSTANCE_ID
            })).getValue());
            const currentMorphItems = snapshot.getLoadable(commandMenuNavigationMorphItemByPageState).getValue();
            const morphItemToAdd = {
                objectMetadataId: objectMetadataItem.id,
                recordId
            };
            const newMorphItems = new Map(currentMorphItems);
            newMorphItems.set(pageComponentInstanceId, morphItemToAdd);
            set(commandMenuNavigationMorphItemByPageState, newMorphItems);
            const Icon = objectMetadataItem?.icon ? getIcon(objectMetadataItem.icon) : getIcon('IconList');
            const IconColor = getIconColorForObjectType({
                objectType: objectMetadataItem.nameSingular,
                theme
            });
            const capitalizedObjectNameSingular = capitalize(objectNameSingular);
            navigateCommandMenu({
                page: CommandMenuPages.ViewRecord,
                pageTitle: isNewRecord ? $_i18n._({
                    id: "Gntx7w",
                    message: "New {capitalizedObjectNameSingular}",
                    values: {
                        capitalizedObjectNameSingular: capitalizedObjectNameSingular
                    }
                }) : capitalizedObjectNameSingular,
                pageIcon: Icon,
                pageIconColor: IconColor,
                pageId: pageComponentInstanceId,
                resetNavigationStack: false
            });
        };
    }, [
        getIcon,
        navigateCommandMenu,
        theme
    ]);
    return {
        openRecordInCommandMenu
    };
};

//# sourceMappingURL=data:application/json;base64,