import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import __vite__cjsImport3_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport3_react["useCallback"]; const useEffect = __vite__cjsImport3_react["useEffect"]; const useRef = __vite__cjsImport3_react["useRef"]; const useState = __vite__cjsImport3_react["useState"];
import { AnimatedContainer, ChipSize, OverflowingTextWithTooltip } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { ExpandedListDropdown } from "/src/modules/ui/layout/expandable-list/components/ExpandedListDropdown.tsx";
import { isFirstOverflowingChildElement } from "/src/modules/ui/layout/expandable-list/utils/isFirstOverflowingChildElement.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
const StyledContainer = styled.div`
  align-items: center;
  display: flex;
  gap: ${({ theme })=>theme.spacing(1)};
  justify-content: space-between;
  min-width: 100%;
  width: 100%;
`;
_c = StyledContainer;
const StyledChildrenContainer = styled.div`
  display: flex;
  gap: ${({ theme })=>theme.spacing(1)};
  overflow: hidden;
  max-width: 100%;
  flex: 0 1 fit-content;
  position: relative; // Needed so children elements compute their offsetLeft relatively to this element.
`;
_c1 = StyledChildrenContainer;
const StyledChildContainer = styled.div`
  display: flex;
  flex-shrink: 0;
  overflow: hidden;

  &:last-child {
    flex-shrink: 1;
  }
`;
_c2 = StyledChildContainer;
const StyledUnShrinkableContainer = styled.div`
  flex-shrink: 0;
`;
_c3 = StyledUnShrinkableContainer;
export const ExpandableList = ({ children, isChipCountDisplayed: isChipCountDisplayedFromProps })=>{
    _s();
    // isChipCountDisplayedInternal => uncontrolled display of the chip count.
    // isChipCountDisplayedFromProps => controlled display of the chip count.
    // If isChipCountDisplayedFromProps is provided, isChipCountDisplayedInternal is not taken into account.
    const [isChipCountDisplayedInternal, setIsChipCountDisplayedInternal] = useState(false);
    const isChipCountDisplayed = isDefined(isChipCountDisplayedFromProps) ? isChipCountDisplayedFromProps : isChipCountDisplayedInternal;
    const [isListExpanded, setIsListExpanded] = useState(false);
    // Used with floating-ui if anchorElement is not provided.
    // floating-ui mentions that `useState` must be used instead of `useRef`
    // @see https://floating-ui.com/docs/useFloating#elements
    const [childrenContainerElement, setChildrenContainerElement] = useState(null);
    const [previousChildrenContainerWidth, setPreviousChildrenContainerWidth] = useState(childrenContainerElement?.clientWidth ?? 0);
    const containerRef = useRef(null);
    const [firstHiddenChildIndex, setFirstHiddenChildIndex] = useState(children.length);
    const hiddenChildrenCount = children.length - firstHiddenChildIndex;
    const canDisplayChipCount = isChipCountDisplayed && hiddenChildrenCount > 0;
    const handleChipCountClick = useCallback((event)=>{
        event.stopPropagation();
        setIsListExpanded(true);
    }, []);
    const resetFirstHiddenChildIndex = useCallback(()=>{
        setFirstHiddenChildIndex(children.length);
    }, [
        children.length
    ]);
    // Recompute first hidden child when:
    // - isChipCountDisplayed changes
    // - children length changes
    useEffect(()=>{
        resetFirstHiddenChildIndex();
    }, [
        isChipCountDisplayed,
        children.length,
        resetFirstHiddenChildIndex
    ]);
    const handleClickOutside = ()=>{
        setIsListExpanded(false);
        if (childrenContainerElement?.clientWidth !== previousChildrenContainerWidth) {
            resetFirstHiddenChildIndex();
            setPreviousChildrenContainerWidth(childrenContainerElement?.clientWidth ?? 0);
        }
    };
    return /*#__PURE__*/ _jsxDEV(StyledContainer, {
        ref: containerRef,
        onMouseEnter: isChipCountDisplayedFromProps ? undefined : ()=>setIsChipCountDisplayedInternal(true),
        onMouseLeave: isChipCountDisplayedFromProps ? undefined : ()=>setIsChipCountDisplayedInternal(false),
        children: [
            /*#__PURE__*/ _jsxDEV(StyledChildrenContainer, {
                ref: setChildrenContainerElement,
                children: children.slice(0, firstHiddenChildIndex).map((child, index)=>/*#__PURE__*/ _jsxDEV(StyledChildContainer, {
                        ref: (childElement)=>{
                            if (// First element is always displayed.
                            index > 0 && isFirstOverflowingChildElement({
                                containerElement: childrenContainerElement,
                                childElement
                            })) {
                                setFirstHiddenChildIndex(index);
                            }
                        },
                        children: child
                    }, index, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx",
                        lineNumber: 134,
                        columnNumber: 11
                    }, this))
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx",
                lineNumber: 132,
                columnNumber: 7
            }, this),
            canDisplayChipCount && /*#__PURE__*/ _jsxDEV(AnimatedContainer, {
                children: /*#__PURE__*/ _jsxDEV(StyledUnShrinkableContainer, {
                    onClick: handleChipCountClick,
                    children: /*#__PURE__*/ _jsxDEV(OverflowingTextWithTooltip, {
                        text: `+${hiddenChildrenCount}`,
                        size: ChipSize.Small
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx",
                        lineNumber: 156,
                        columnNumber: 13
                    }, this)
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx",
                    lineNumber: 155,
                    columnNumber: 11
                }, this)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx",
                lineNumber: 154,
                columnNumber: 9
            }, this),
            isListExpanded && /*#__PURE__*/ _jsxDEV(ExpandedListDropdown, {
                anchorElement: containerRef.current ?? undefined,
                onClickOutside: handleClickOutside,
                children: children
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx",
                lineNumber: 164,
                columnNumber: 9
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx",
        lineNumber: 119,
        columnNumber: 5
    }, this);
};
_s(ExpandableList, "gbaTZ1qcjkEcHIx5x7vlNpYWjqY=");
_c4 = ExpandableList;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "StyledContainer");
$RefreshReg$(_c1, "StyledChildrenContainer");
$RefreshReg$(_c2, "StyledChildContainer");
$RefreshReg$(_c3, "StyledUnShrinkableContainer");
$RefreshReg$(_c4, "ExpandableList");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/ui/layout/expandable-list/components/ExpandableList.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,