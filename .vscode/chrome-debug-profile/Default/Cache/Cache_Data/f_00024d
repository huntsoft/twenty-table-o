import { useRecoilCallback, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { useInitDraftValueV2 } from "/src/modules/object-record/record-field/hooks/useInitDraftValueV2.ts";
import { isFieldValueEmpty } from "/src/modules/object-record/record-field/utils/isFieldValueEmpty.ts";
import { viewableRecordIdState } from "/src/modules/object-record/record-right-drawer/states/viewableRecordIdState.ts";
import { recordStoreFamilySelector } from "/src/modules/object-record/record-store/states/selectors/recordStoreFamilySelector.ts";
import { SOFT_FOCUS_CLICK_OUTSIDE_LISTENER_ID } from "/src/modules/object-record/record-table/constants/SoftFocusClickOutsideListenerId.ts";
import { useLeaveTableFocus } from "/src/modules/object-record/record-table/hooks/internal/useLeaveTableFocus.ts";
import { useMoveEditModeToTableCellPosition } from "/src/modules/object-record/record-table/hooks/internal/useMoveEditModeToCellPosition.ts";
import { useDragSelect } from "/src/modules/ui/utilities/drag-select/hooks/useDragSelect.ts";
import { useSetHotkeyScope } from "/src/modules/ui/utilities/hotkey/hooks/useSetHotkeyScope.ts";
import { useClickOutsideListener } from "/src/modules/ui/utilities/pointer-event/hooks/useClickOutsideListener.ts";
import { getSnapshotValue } from "/src/modules/ui/utilities/state/utils/getSnapshotValue.ts";
import { useOpenRecordInCommandMenu } from "/src/modules/command-menu/hooks/useOpenRecordInCommandMenu.ts";
import { useOpenFieldInputEditMode } from "/src/modules/object-record/record-field/hooks/useOpenFieldInputEditMode.ts";
import { useRecordIndexContextOrThrow } from "/src/modules/object-record/record-index/contexts/RecordIndexContext.ts";
import { recordIndexOpenRecordInState } from "/src/modules/object-record/record-index/states/recordIndexOpenRecordInState.ts";
import { viewableRecordNameSingularState } from "/src/modules/object-record/record-right-drawer/states/viewableRecordNameSingularState.ts";
import { RECORD_TABLE_CLICK_OUTSIDE_LISTENER_ID } from "/src/modules/object-record/record-table/constants/RecordTableClickOutsideListenerId.ts";
import { getDropdownFocusIdForRecordField } from "/src/modules/object-record/utils/getDropdownFocusIdForRecordField.ts";
import { getRecordFieldInputId } from "/src/modules/object-record/utils/getRecordFieldInputId.ts";
import { useSetActiveDropdownFocusIdAndMemorizePrevious } from "/src/modules/ui/layout/dropdown/hooks/useSetFocusedDropdownIdAndMemorizePrevious.ts";
import { useClickOustideListenerStates } from "/src/modules/ui/utilities/pointer-event/hooks/useClickOustideListenerStates.ts";
import { ViewOpenRecordInType } from "/src/modules/views/types/ViewOpenRecordInType.ts";
import { useNavigate } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react-router-dom.js?v=226f7286";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { TableHotkeyScope } from "/src/modules/object-record/record-table/types/TableHotkeyScope.ts";
export const DEFAULT_CELL_SCOPE = {
    scope: TableHotkeyScope.CellEditMode
};
export const useOpenRecordTableCellV2 = (tableScopeId)=>{
    const { getClickOutsideListenerIsActivatedState } = useClickOustideListenerStates(RECORD_TABLE_CLICK_OUTSIDE_LISTENER_ID);
    const { indexIdentifierUrl } = useRecordIndexContextOrThrow();
    const moveEditModeToTableCellPosition = useMoveEditModeToTableCellPosition(tableScopeId);
    const setHotkeyScope = useSetHotkeyScope();
    const { setDragSelectionStartEnabled } = useDragSelect();
    const leaveTableFocus = useLeaveTableFocus(tableScopeId);
    const { toggleClickOutsideListener } = useClickOutsideListener(SOFT_FOCUS_CLICK_OUTSIDE_LISTENER_ID);
    const initDraftValue = useInitDraftValueV2();
    const setViewableRecordId = useSetRecoilState(viewableRecordIdState);
    const setViewableRecordNameSingular = useSetRecoilState(viewableRecordNameSingularState);
    const navigate = useNavigate();
    const { setActiveDropdownFocusIdAndMemorizePrevious } = useSetActiveDropdownFocusIdAndMemorizePrevious();
    const { openRecordInCommandMenu } = useOpenRecordInCommandMenu();
    const { openFieldInput } = useOpenFieldInputEditMode();
    const openTableCell = useRecoilCallback(({ snapshot, set })=>({ initialValue, cellPosition, isReadOnly, objectNameSingular, customCellHotkeyScope, fieldDefinition, recordId, isActionButtonClick, isNavigating })=>{
            if (isReadOnly) {
                return;
            }
            set(getClickOutsideListenerIsActivatedState, false);
            const isFirstColumnCell = cellPosition.column === 0;
            const fieldValue = getSnapshotValue(snapshot, recordStoreFamilySelector({
                recordId,
                fieldName: fieldDefinition.metadata.fieldName
            }));
            const isEmpty = isFieldValueEmpty({
                fieldDefinition,
                fieldValue
            });
            if (isFirstColumnCell && !isEmpty && !isActionButtonClick || isNavigating) {
                leaveTableFocus();
                const openRecordIn = snapshot.getLoadable(recordIndexOpenRecordInState).getValue();
                if (openRecordIn === ViewOpenRecordInType.RECORD_PAGE) {
                    navigate(indexIdentifierUrl(recordId));
                }
                if (openRecordIn === ViewOpenRecordInType.SIDE_PANEL) {
                    openRecordInCommandMenu({
                        recordId,
                        objectNameSingular
                    });
                }
                return;
            }
            if (isFirstColumnCell && !isEmpty && isActionButtonClick) {
                leaveTableFocus();
                setViewableRecordId(recordId);
                setViewableRecordNameSingular(objectNameSingular);
                return;
            }
            setDragSelectionStartEnabled(false);
            openFieldInput({
                fieldDefinition,
                recordId
            });
            moveEditModeToTableCellPosition(cellPosition);
            initDraftValue({
                value: initialValue,
                recordId,
                fieldDefinition,
                fieldComponentInstanceId: getRecordFieldInputId(recordId, fieldDefinition.metadata.fieldName, 'record-table-cell')
            });
            toggleClickOutsideListener(false);
            if (isDefined(customCellHotkeyScope)) {
                setHotkeyScope(customCellHotkeyScope.scope, customCellHotkeyScope.customScopes);
            } else {
                setHotkeyScope(DEFAULT_CELL_SCOPE.scope, DEFAULT_CELL_SCOPE.customScopes);
            }
            setActiveDropdownFocusIdAndMemorizePrevious(getDropdownFocusIdForRecordField(recordId, fieldDefinition.fieldMetadataId, 'table-cell'));
        }, [
        getClickOutsideListenerIsActivatedState,
        setDragSelectionStartEnabled,
        openFieldInput,
        moveEditModeToTableCellPosition,
        initDraftValue,
        toggleClickOutsideListener,
        setActiveDropdownFocusIdAndMemorizePrevious,
        leaveTableFocus,
        navigate,
        indexIdentifierUrl,
        openRecordInCommandMenu,
        setViewableRecordId,
        setViewableRecordNameSingular,
        setHotkeyScope
    ]);
    return {
        openTableCell
    };
};

//# sourceMappingURL=data:application/json;base64,