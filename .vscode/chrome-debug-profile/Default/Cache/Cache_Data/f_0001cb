import { triggerAttachRelationOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerAttachRelationOptimisticEffect.ts";
import { triggerDestroyRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerDestroyRecordsOptimisticEffect.ts";
import { triggerDetachRelationOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerDetachRelationOptimisticEffect.ts";
import { CORE_OBJECT_NAMES_TO_DELETE_ON_TRIGGER_RELATION_DETACH } from "/src/modules/apollo/types/coreObjectNamesToDeleteOnRelationDetach.ts";
import { isObjectRecordConnection } from "/src/modules/object-record/cache/utils/isObjectRecordConnection.ts";
import __vite__cjsImport5__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isArray = __vite__cjsImport5__sniptt_guards["isArray"];
import { FieldMetadataType } from "/src/generated-metadata/graphql.ts";
import { isDeeplyEqual } from "/src/utils/isDeeplyEqual.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const triggerUpdateRelationsOptimisticEffect = ({ cache, sourceObjectMetadataItem, currentSourceRecord, updatedSourceRecord, objectMetadataItems })=>{
    const isDeletion = isDefined(updatedSourceRecord) && isDefined(updatedSourceRecord['deletedAt']);
    return sourceObjectMetadataItem.fields.forEach((fieldMetadataItemOnSourceRecord)=>{
        const notARelationField = fieldMetadataItemOnSourceRecord.type !== FieldMetadataType.RELATION;
        if (notARelationField) {
            return;
        }
        const fieldDoesNotExist = isDefined(updatedSourceRecord) && !(fieldMetadataItemOnSourceRecord.name in updatedSourceRecord);
        if (fieldDoesNotExist) {
            return;
        }
        const relationDefinition = fieldMetadataItemOnSourceRecord.relationDefinition;
        if (!relationDefinition) {
            return;
        }
        const { targetObjectMetadata, targetFieldMetadata } = relationDefinition;
        const fullTargetObjectMetadataItem = objectMetadataItems.find(({ nameSingular })=>nameSingular === targetObjectMetadata.nameSingular);
        if (!fullTargetObjectMetadataItem) {
            return;
        }
        const currentFieldValueOnSourceRecord = currentSourceRecord?.[fieldMetadataItemOnSourceRecord.name];
        const updatedFieldValueOnSourceRecord = updatedSourceRecord?.[fieldMetadataItemOnSourceRecord.name];
        const noDiff = isDeeplyEqual(currentFieldValueOnSourceRecord, updatedFieldValueOnSourceRecord, {
            strict: true
        });
        if (noDiff && !isDeletion) {
            return;
        }
        const extractTargetRecordsFromRelation = (value)=>{
            // TODO investigate on the root cause of array injection here, should never occurs
            // Cache might be corrupted somewhere due to ObjectRecord and RecordGqlNode inclusion
            if (!isDefined(value) || isArray(value)) {
                return [];
            }
            if (isObjectRecordConnection(relationDefinition, value)) {
                return value.edges.map(({ node })=>node);
            }
            return [
                value
            ];
        };
        const recordToExtractDetachFrom = isDeletion ? updatedFieldValueOnSourceRecord : currentFieldValueOnSourceRecord;
        const targetRecordsToDetachFrom = extractTargetRecordsFromRelation(recordToExtractDetachFrom);
        // TODO: see if we can de-hardcode this, put cascade delete in relation metadata item
        //   Instead of hardcoding it here
        const shouldCascadeDeleteTargetRecords = CORE_OBJECT_NAMES_TO_DELETE_ON_TRIGGER_RELATION_DETACH.includes(targetObjectMetadata.nameSingular);
        if (shouldCascadeDeleteTargetRecords) {
            triggerDestroyRecordsOptimisticEffect({
                cache,
                objectMetadataItem: fullTargetObjectMetadataItem,
                recordsToDestroy: targetRecordsToDetachFrom,
                objectMetadataItems
            });
        } else if (isDefined(currentSourceRecord)) {
            targetRecordsToDetachFrom.forEach((targetRecordToDetachFrom)=>{
                triggerDetachRelationOptimisticEffect({
                    cache,
                    sourceObjectNameSingular: sourceObjectMetadataItem.nameSingular,
                    sourceRecordId: currentSourceRecord.id,
                    fieldNameOnTargetRecord: targetFieldMetadata.name,
                    targetObjectNameSingular: targetObjectMetadata.nameSingular,
                    targetRecordId: targetRecordToDetachFrom.id
                });
            });
        }
        if (!isDeletion && isDefined(updatedSourceRecord)) {
            const targetRecordsToAttachTo = extractTargetRecordsFromRelation(updatedFieldValueOnSourceRecord);
            targetRecordsToAttachTo.forEach((targetRecordToAttachTo)=>triggerAttachRelationOptimisticEffect({
                    cache,
                    sourceObjectNameSingular: sourceObjectMetadataItem.nameSingular,
                    sourceRecordId: updatedSourceRecord.id,
                    fieldNameOnTargetRecord: targetFieldMetadata.name,
                    targetObjectNameSingular: targetObjectMetadata.nameSingular,
                    targetRecordId: targetRecordToAttachTo.id
                }));
        }
    });
};

//# sourceMappingURL=data:application/json;base64,