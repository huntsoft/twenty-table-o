import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import __vite__cjsImport3_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport3_react["useCallback"]; const useContext = __vite__cjsImport3_react["useContext"];
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { IconForbid, IconPencil, IconPlus, LightIconButton } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useUpdateOneRecord } from "/src/modules/object-record/hooks/useUpdateOneRecord.ts";
import { FieldContext } from "/src/modules/object-record/record-field/contexts/FieldContext.ts";
import { useIsFieldValueReadOnly } from "/src/modules/object-record/record-field/hooks/useIsFieldValueReadOnly.ts";
import { usePersistField } from "/src/modules/object-record/record-field/hooks/usePersistField.ts";
import { useAddNewRecordAndOpenRightDrawer } from "/src/modules/object-record/record-field/meta-types/input/hooks/useAddNewRecordAndOpenRightDrawer.ts";
import { useUpdateRelationFromManyFieldInput } from "/src/modules/object-record/record-field/meta-types/input/hooks/useUpdateRelationFromManyFieldInput.tsx";
import { MultipleRecordPicker } from "/src/modules/object-record/record-picker/multiple-record-picker/components/MultipleRecordPicker.tsx";
import { useMultipleRecordPickerPerformSearch } from "/src/modules/object-record/record-picker/multiple-record-picker/hooks/useMultipleRecordPickerPerformSearch.ts";
import { multipleRecordPickerPickableMorphItemsComponentState } from "/src/modules/object-record/record-picker/multiple-record-picker/states/multipleRecordPickerPickableMorphItemsComponentState.ts";
import { multipleRecordPickerSearchFilterComponentState } from "/src/modules/object-record/record-picker/multiple-record-picker/states/multipleRecordPickerSearchFilterComponentState.ts";
import { multipleRecordPickerSearchableObjectMetadataItemsComponentState } from "/src/modules/object-record/record-picker/multiple-record-picker/states/multipleRecordPickerSearchableObjectMetadataItemsComponentState.ts";
import { SingleRecordPicker } from "/src/modules/object-record/record-picker/single-record-picker/components/SingleRecordPicker.tsx";
import { singleRecordPickerSearchFilterComponentState } from "/src/modules/object-record/record-picker/single-record-picker/states/singleRecordPickerSearchFilterComponentState.ts";
import { singleRecordPickerSelectedIdComponentState } from "/src/modules/object-record/record-picker/single-record-picker/states/singleRecordPickerSelectedIdComponentState.ts";
import { RecordDetailRelationRecordsList } from "/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationRecordsList.tsx";
import { RecordDetailSection } from "/src/modules/object-record/record-show/record-detail-section/components/RecordDetailSection.tsx";
import { RecordDetailSectionHeader } from "/src/modules/object-record/record-show/record-detail-section/components/RecordDetailSectionHeader.tsx";
import { recordStoreFamilyState } from "/src/modules/object-record/record-store/states/recordStoreFamilyState.ts";
import { recordStoreFamilySelector } from "/src/modules/object-record/record-store/states/selectors/recordStoreFamilySelector.ts";
import { prefetchIndexViewIdFromObjectMetadataItemFamilySelector } from "/src/modules/prefetch/states/selector/prefetchIndexViewIdFromObjectMetadataItemFamilySelector.ts";
import { AppPath } from "/src/modules/types/AppPath.ts";
import { Dropdown } from "/src/modules/ui/layout/dropdown/components/Dropdown.tsx";
import { useDropdown } from "/src/modules/ui/layout/dropdown/hooks/useDropdown.ts";
import { DropdownScope } from "/src/modules/ui/layout/dropdown/scopes/DropdownScope.tsx";
import { useIsMobile } from "/src/modules/ui/utilities/responsive/hooks/useIsMobile.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import { ViewFilterOperand } from "/src/modules/views/types/ViewFilterOperand.ts";
import { useLingui as $_useLingui } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_react.js?v=226f7286";
import { RelationDefinitionType } from "/src/generated-metadata/graphql.ts";
import { getAppPath } from "/src/utils/navigation/getAppPath.ts";
const StyledAddDropdown = styled(Dropdown)`
  margin-left: auto;
`;
export const RecordDetailRelationSection = ({ loading })=>{
    _s();
    const { i18n: $__i18n, _: $__ } = $_useLingui();
    const { recordId, fieldDefinition } = useContext(FieldContext);
    const { fieldName, relationFieldMetadataId, relationObjectMetadataNameSingular, relationType } = fieldDefinition.metadata;
    const record = useRecoilValue(recordStoreFamilyState(recordId));
    const isMobile = useIsMobile();
    const { objectMetadataItem: relationObjectMetadataItem } = useObjectMetadataItem({
        objectNameSingular: relationObjectMetadataNameSingular
    });
    const relationFieldMetadataItem = relationObjectMetadataItem.fields.find(({ id })=>id === relationFieldMetadataId);
    const fieldValue = useRecoilValue(recordStoreFamilySelector({
        recordId,
        fieldName
    }));
    // TODO: use new relation type
    const isToOneObject = relationType === RelationDefinitionType.MANY_TO_ONE;
    const isToManyObjects = relationType === RelationDefinitionType.ONE_TO_MANY;
    const relationRecords = fieldValue && isToOneObject ? [
        fieldValue
    ] : fieldValue ?? [];
    const dropdownId = `record-field-card-relation-picker-${fieldDefinition.fieldMetadataId}-${recordId}`;
    const { closeDropdown, isDropdownOpen, dropdownPlacement } = useDropdown(dropdownId);
    const setMultipleRecordPickerSearchFilter = useSetRecoilComponentStateV2(multipleRecordPickerSearchFilterComponentState, dropdownId);
    const setMultipleRecordPickerPickableMorphItems = useSetRecoilComponentStateV2(multipleRecordPickerPickableMorphItemsComponentState, dropdownId);
    const setMultipleRecordPickerSearchableObjectMetadataItems = useSetRecoilComponentStateV2(multipleRecordPickerSearchableObjectMetadataItemsComponentState, dropdownId);
    const { performSearch: multipleRecordPickerPerformSearch } = useMultipleRecordPickerPerformSearch();
    const setSingleRecordPickerSearchFilter = useSetRecoilComponentStateV2(singleRecordPickerSearchFilterComponentState, dropdownId);
    const setSingleRecordPickerSelectedId = useSetRecoilComponentStateV2(singleRecordPickerSelectedIdComponentState, dropdownId);
    const handleCloseRelationPickerDropdown = useCallback(()=>{
        setMultipleRecordPickerSearchFilter('');
    }, [
        setMultipleRecordPickerSearchFilter
    ]);
    const persistField = usePersistField();
    const { updateOneRecord: updateOneRelationRecord } = useUpdateOneRecord({
        objectNameSingular: relationObjectMetadataNameSingular
    });
    const handleRelationPickerEntitySelected = (selectedRelationEntity)=>{
        closeDropdown();
        if (!selectedRelationEntity?.id || !relationFieldMetadataItem?.name) return;
        if (isToOneObject) {
            persistField(selectedRelationEntity.record);
            return;
        }
        updateOneRelationRecord({
            idToUpdate: selectedRelationEntity.id,
            updateOneRecordInput: {
                [relationFieldMetadataItem.name]: record
            }
        });
    };
    const { updateRelation } = useUpdateRelationFromManyFieldInput();
    const indexViewId = useRecoilValue(prefetchIndexViewIdFromObjectMetadataItemFamilySelector({
        objectMetadataItemId: relationObjectMetadataItem.id
    }));
    const filterQueryParams = {
        filter: {
            [relationFieldMetadataItem?.name || '']: {
                [ViewFilterOperand.Is]: {
                    selectedRecordIds: [
                        recordId
                    ]
                }
            }
        },
        view: indexViewId
    };
    const filterLinkHref = getAppPath(AppPath.RecordIndexPage, {
        objectNamePlural: relationObjectMetadataItem.namePlural
    }, filterQueryParams);
    const showContent = ()=>{
        return relationRecords.length > 0 && /*#__PURE__*/ _jsxDEV(RecordDetailRelationRecordsList, {
            relationRecords: relationRecords
        }, void 0, false, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx",
            lineNumber: 178,
            columnNumber: 9
        }, this);
    };
    const { createNewRecordAndOpenRightDrawer } = useAddNewRecordAndOpenRightDrawer({
        relationObjectMetadataNameSingular,
        relationObjectMetadataItem,
        relationFieldMetadataItem,
        recordId
    });
    const isReadOnly = useIsFieldValueReadOnly();
    if (loading) return null;
    const relationRecordsCount = relationRecords.length;
    const handleOpenRelationPickerDropdown = ()=>{
        if (isToOneObject) {
            setSingleRecordPickerSearchFilter('');
            if (relationRecords.length > 0) {
                setSingleRecordPickerSelectedId(relationRecords[0].id);
            }
        }
        if (isToManyObjects) {
            setMultipleRecordPickerSearchableObjectMetadataItems([
                relationObjectMetadataItem
            ]);
            setMultipleRecordPickerSearchFilter('');
            setMultipleRecordPickerPickableMorphItems(relationRecords.map((record)=>({
                    recordId: record.id,
                    objectMetadataId: relationObjectMetadataItem.id,
                    isSelected: true,
                    isMatchingSearchFilter: true
                })));
            multipleRecordPickerPerformSearch({
                multipleRecordPickerInstanceId: dropdownId,
                forceSearchFilter: '',
                forceSearchableObjectMetadataItems: [
                    relationObjectMetadataItem
                ],
                forcePickableMorphItems: relationRecords.map((record)=>({
                        recordId: record.id,
                        objectMetadataId: relationObjectMetadataItem.id,
                        isSelected: true,
                        isMatchingSearchFilter: true
                    }))
            });
        }
    };
    return /*#__PURE__*/ _jsxDEV(RecordDetailSection, {
        children: [
            /*#__PURE__*/ _jsxDEV(RecordDetailSectionHeader, {
                title: fieldDefinition.label,
                link: isToManyObjects ? {
                    to: filterLinkHref,
                    label: relationRecordsCount > 0 ? $__i18n._({
                        id: "3saA7W",
                        message: "All ({relationRecordsCount})",
                        values: {
                            relationRecordsCount: relationRecordsCount
                        }
                    }) : ''
                } : undefined,
                hideRightAdornmentOnMouseLeave: !isDropdownOpen && !isMobile,
                areRecordsAvailable: relationRecords.length > 0,
                rightAdornment: !isReadOnly && /*#__PURE__*/ _jsxDEV(DropdownScope, {
                    dropdownScopeId: dropdownId,
                    children: /*#__PURE__*/ _jsxDEV(StyledAddDropdown, {
                        dropdownId: dropdownId,
                        dropdownPlacement: "left-start",
                        onClose: handleCloseRelationPickerDropdown,
                        onOpen: handleOpenRelationPickerDropdown,
                        clickableComponent: /*#__PURE__*/ _jsxDEV(LightIconButton, {
                            className: "displayOnHover",
                            Icon: isToOneObject ? IconPencil : IconPlus,
                            accent: "tertiary"
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx",
                            lineNumber: 259,
                            columnNumber: 19
                        }, void 0),
                        dropdownHotkeyScope: {
                            scope: dropdownId
                        },
                        dropdownComponents: isToOneObject ? /*#__PURE__*/ _jsxDEV(SingleRecordPicker, {
                            componentInstanceId: dropdownId,
                            EmptyIcon: IconForbid,
                            onRecordSelected: handleRelationPickerEntitySelected,
                            objectNameSingular: relationObjectMetadataNameSingular,
                            recordPickerInstanceId: dropdownId,
                            onCreate: createNewRecordAndOpenRightDrawer,
                            onCancel: closeDropdown,
                            layoutDirection: dropdownPlacement?.includes('end') ? 'search-bar-on-bottom' : 'search-bar-on-top'
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx",
                            lineNumber: 268,
                            columnNumber: 21
                        }, void 0) : /*#__PURE__*/ _jsxDEV(MultipleRecordPicker, {
                            componentInstanceId: dropdownId,
                            onCreate: ()=>{
                                closeDropdown();
                                createNewRecordAndOpenRightDrawer?.();
                            },
                            onChange: updateRelation,
                            onSubmit: closeDropdown,
                            onClickOutside: closeDropdown,
                            layoutDirection: dropdownPlacement?.includes('end') ? 'search-bar-on-bottom' : 'search-bar-on-top'
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx",
                            lineNumber: 283,
                            columnNumber: 21
                        }, void 0)
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx",
                        lineNumber: 253,
                        columnNumber: 15
                    }, void 0)
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx",
                    lineNumber: 252,
                    columnNumber: 13
                }, void 0)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx",
                lineNumber: 235,
                columnNumber: 7
            }, this),
            showContent()
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx",
        lineNumber: 234,
        columnNumber: 5
    }, this);
};
_s(RecordDetailRelationSection, "byZv2ZQuhXys9S1JTkh2iXRBn/I=", false, function() {
    return [
        useRecoilValue,
        useIsMobile,
        useObjectMetadataItem,
        useRecoilValue,
        useDropdown,
        useSetRecoilComponentStateV2,
        useSetRecoilComponentStateV2,
        useSetRecoilComponentStateV2,
        useMultipleRecordPickerPerformSearch,
        useSetRecoilComponentStateV2,
        useSetRecoilComponentStateV2,
        usePersistField,
        useUpdateOneRecord,
        useUpdateRelationFromManyFieldInput,
        useRecoilValue,
        useAddNewRecordAndOpenRightDrawer,
        useIsFieldValueReadOnly
    ];
});
_c = RecordDetailRelationSection;
var _c;
$RefreshReg$(_c, "RecordDetailRelationSection");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-show/record-detail-section/components/RecordDetailRelationSection.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,