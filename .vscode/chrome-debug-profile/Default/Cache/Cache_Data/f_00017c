import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/@fs/D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import { IconCheck, IconMinus } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/display/icon/components/TablerIcons.ts";
import __vite__cjsImport4_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const React = ((m) => m?.__esModule ? m : { ...typeof m === "object" && !Array.isArray(m) || typeof m === "function" ? m : {}, default: m })(__vite__cjsImport4_react);
export var CheckboxVariant;
(function(CheckboxVariant) {
    CheckboxVariant["Primary"] = "primary";
    CheckboxVariant["Secondary"] = "secondary";
    CheckboxVariant["Tertiary"] = "tertiary";
})(CheckboxVariant || (CheckboxVariant = {}));
export var CheckboxShape;
(function(CheckboxShape) {
    CheckboxShape["Squared"] = "squared";
    CheckboxShape["Rounded"] = "rounded";
})(CheckboxShape || (CheckboxShape = {}));
export var CheckboxSize;
(function(CheckboxSize) {
    CheckboxSize["Large"] = "large";
    CheckboxSize["Small"] = "small";
})(CheckboxSize || (CheckboxSize = {}));
const StyledInputContainer = styled.div`
  --size: ${({ checkboxSize, hoverable })=>{
    if (hoverable === true) {
        return checkboxSize === "large" ? '32px' : '24px';
    } else {
        return checkboxSize === "large" ? '20px' : '14px';
    }
}};
  align-items: center;
  border-radius: ${({ theme, shape })=>shape === "rounded" ? theme.border.radius.rounded : theme.border.radius.md};

  cursor: ${({ disabled })=>disabled ? 'not-allowed' : 'pointer'};
  display: flex;
  padding: ${({ theme, checkboxSize, hoverable })=>{
    if (hoverable === true) {
        return checkboxSize === "large" ? theme.spacing(1.5) : theme.spacing(1.25);
    } else {
        return 0;
    }
}};
  position: relative;
  ${({ hoverable, isChecked, theme, indeterminate, disabled })=>{
    if (!hoverable || disabled === true) return '';
    return `&:hover{
      background-color: ${indeterminate || isChecked ? theme.background.transparent.blue : theme.background.transparent.light};
    }}
  }`;
}}
`;
_c = StyledInputContainer;
const StyledInput = styled.input`
  cursor: ${({ disabled })=>disabled ? 'not-allowed' : 'pointer'};
  margin: 0;
  opacity: 0;
  position: absolute;
  z-index: 10;
  & + label {
    --size: ${({ checkboxSize })=>checkboxSize === "large" ? '18px' : '12px'};
    cursor: ${({ disabled })=>disabled ? 'not-allowed' : 'pointer'};
    height: calc(var(--size) + 2px);
    padding: 0;
    position: relative;
    width: calc(var(--size) + 2px);
  }

  & + label:before {
    --size: ${({ checkboxSize })=>checkboxSize === "large" ? '18px' : '12px'};
    background: ${({ theme, indeterminate, isChecked, disabled })=>disabled && isChecked ? theme.adaptiveColors.blue3 : indeterminate || isChecked ? theme.color.blue : 'transparent'};
    border-color: ${({ theme, indeterminate, isChecked, variant, disabled })=>{
    switch(true){
        case indeterminate || isChecked:
            return disabled ? theme.adaptiveColors.blue3 : theme.color.blue;
        case disabled:
            return theme.border.color.strong;
        case variant === "primary":
            return theme.border.color.inverted;
        case variant === "tertiary":
            return theme.border.color.medium;
        default:
            return theme.border.color.secondaryInverted;
    }
}};
    border-radius: ${({ theme, shape })=>shape === "rounded" ? theme.border.radius.rounded : theme.border.radius.sm};
    border-style: solid;
    border-width: ${({ variant, checkboxSize })=>checkboxSize === "large" || variant === "tertiary" ? '1.43px' : '1px'};
    content: '';
    cursor: ${({ disabled })=>disabled ? 'not-allowed' : 'pointer'};
    display: inline-block;
    height: var(--size);
    width: var(--size);
  }

  & + label > svg {
    --padding: 0px;
    --size: ${({ checkboxSize })=>checkboxSize === "large" ? '20px' : '14px'};
    height: var(--size);
    left: var(--padding);
    position: absolute;
    stroke: ${({ theme })=>theme.font.color.inverted};
    top: var(--padding);
    width: var(--size);
  }
`;
_c1 = StyledInput;
export const Checkbox = ({ checked, onChange, onCheckedChange, indeterminate, variant = "primary", size = "small", shape = "squared", hoverable = true, className, disabled = false })=>{
    _s();
    const [isInternalChecked, setIsInternalChecked] = React.useState(false);
    React.useEffect(()=>{
        setIsInternalChecked(checked ?? false);
    }, [
        checked
    ]);
    const handleChange = (event)=>{
        onChange?.(event);
        onCheckedChange?.(event.target.checked);
        setIsInternalChecked(event.target.checked ?? false);
    };
    const checkboxId = React.useId();
    return /*#__PURE__*/ _jsxDEV(StyledInputContainer, {
        checkboxSize: size,
        variant: variant,
        shape: shape,
        isChecked: isInternalChecked,
        hoverable: hoverable,
        indeterminate: indeterminate,
        className: className,
        disabled: disabled,
        children: [
            /*#__PURE__*/ _jsxDEV(StyledInput, {
                autoComplete: "off",
                type: "checkbox",
                id: checkboxId,
                name: "styled-checkbox",
                "data-testid": "input-checkbox",
                checked: isInternalChecked,
                indeterminate: indeterminate,
                variant: variant,
                checkboxSize: size,
                shape: shape,
                isChecked: isInternalChecked,
                onChange: handleChange,
                disabled: disabled
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx",
                lineNumber: 197,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV("label", {
                htmlFor: checkboxId,
                children: indeterminate ? /*#__PURE__*/ _jsxDEV(IconMinus, {}, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx",
                    lineNumber: 214,
                    columnNumber: 11
                }, this) : isInternalChecked ? /*#__PURE__*/ _jsxDEV(IconCheck, {}, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx",
                    lineNumber: 216,
                    columnNumber: 11
                }, this) : /*#__PURE__*/ _jsxDEV(_Fragment, {}, void 0, false)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx",
                lineNumber: 212,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx",
        lineNumber: 187,
        columnNumber: 5
    }, this);
};
_s(Checkbox, "nQJ2kkvyIhvy43rtTD9Mt1ZIoPA=");
_c2 = Checkbox;
var _c, _c1, _c2;
$RefreshReg$(_c, "StyledInputContainer");
$RefreshReg$(_c1, "StyledInput");
$RefreshReg$(_c2, "Checkbox");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-ui/src/input/components/Checkbox.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,