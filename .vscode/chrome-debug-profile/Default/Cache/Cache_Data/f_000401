import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import __vite__cjsImport3_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport3_react["useCallback"]; const useEffect = __vite__cjsImport3_react["useEffect"]; const useMemo = __vite__cjsImport3_react["useMemo"]; const useState = __vite__cjsImport3_react["useState"];
import { Heading } from "/src/modules/spreadsheet-import/components/Heading.tsx";
import { StepNavigationButton } from "/src/modules/spreadsheet-import/components/StepNavigationButton.tsx";
import { useSpreadsheetImportInternal } from "/src/modules/spreadsheet-import/hooks/useSpreadsheetImportInternal.ts";
import { findUnmatchedRequiredFields } from "/src/modules/spreadsheet-import/utils/findUnmatchedRequiredFields.ts";
import { getMatchedColumns } from "/src/modules/spreadsheet-import/utils/getMatchedColumns.ts";
import { normalizeTableData } from "/src/modules/spreadsheet-import/utils/normalizeTableData.ts";
import { setColumn } from "/src/modules/spreadsheet-import/utils/setColumn.ts";
import { setIgnoreColumn } from "/src/modules/spreadsheet-import/utils/setIgnoreColumn.ts";
import { setSubColumn } from "/src/modules/spreadsheet-import/utils/setSubColumn.ts";
import { useDialogManager } from "/src/modules/ui/feedback/dialog-manager/hooks/useDialogManager.ts";
import { SnackBarVariant } from "/src/modules/ui/feedback/snack-bar-manager/components/SnackBar.tsx";
import { useSnackBar } from "/src/modules/ui/feedback/snack-bar-manager/hooks/useSnackBar.ts";
import { Modal } from "/src/modules/ui/layout/modal/components/Modal.tsx";
import { initialComputedColumnsSelector } from "/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/components/states/initialComputedColumnsState.ts";
import { UnmatchColumn } from "/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/components/UnmatchColumn.tsx";
import { SpreadsheetImportStepType } from "/src/modules/spreadsheet-import/steps/types/SpreadsheetImportStepType.ts";
import { SpreadsheetColumnType } from "/src/modules/spreadsheet-import/types/SpreadsheetColumnType.ts";
import { ScrollWrapper } from "/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx";
import { useLingui as $_useLingui } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_react.js?v=226f7286";
import { Trans as Trans_ } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_react.js?v=226f7286";
import { useRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { ColumnGrid } from "/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/components/ColumnGrid.tsx";
import { TemplateColumn } from "/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/components/TemplateColumn.tsx";
import { UserTableColumn } from "/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/components/UserTableColumn.tsx";
const StyledContent = styled(Modal.Content)`
  align-items: center;
  padding-left: ${({ theme })=>theme.spacing(6)};
  padding-right: ${({ theme })=>theme.spacing(6)};
`;
_c = StyledContent;
const StyledColumnsContainer = styled.div`
  align-items: center;
  display: flex;
  flex-direction: column;
  margin-bottom: ${({ theme })=>theme.spacing(4)};
`;
_c1 = StyledColumnsContainer;
const StyledColumns = styled.span`
  color: ${({ theme })=>theme.font.color.primary};
  font-size: ${({ theme })=>theme.font.size.sm};
  font-weight: ${({ theme })=>theme.font.weight.medium};
`;
_c2 = StyledColumns;
const StyledColumn = styled.span`
  color: ${({ theme })=>theme.font.color.primary};
  font-size: ${({ theme })=>theme.font.size.sm};
  font-weight: ${({ theme })=>theme.font.weight.regular};
`;
_c3 = StyledColumn;
export const MatchColumnsStep = ({ data, headerValues, onBack, setCurrentStepState, setPreviousStepState, currentStepState, nextStep, onError })=>{
    _s();
    const { enqueueDialog } = useDialogManager();
    const { enqueueSnackBar } = useSnackBar();
    const dataExample = data.slice(0, 2);
    const { fields, autoMapHeaders, autoMapDistance } = useSpreadsheetImportInternal();
    const [isLoading, setIsLoading] = useState(false);
    const [columns, setColumns] = useRecoilState(initialComputedColumnsSelector(headerValues));
    const { matchColumnsStepHook } = useSpreadsheetImportInternal();
    const { i18n: $__i18n, _: $__ } = $_useLingui();
    const onIgnore = useCallback((columnIndex)=>{
        setColumns(columns.map((column, index)=>columnIndex === index ? setIgnoreColumn(column) : column));
    }, [
        columns,
        setColumns
    ]);
    const onRevertIgnore = useCallback((columnIndex)=>{
        setColumns(columns.map((column, index)=>columnIndex === index ? setColumn(column) : column));
    }, [
        columns,
        setColumns
    ]);
    const onChange = useCallback((value, columnIndex)=>{
        if (value === 'do-not-import') {
            if (columns[columnIndex].type === SpreadsheetColumnType.ignored) {
                onRevertIgnore(columnIndex);
            } else {
                onIgnore(columnIndex);
            }
        } else {
            const field = fields.find((field)=>field.key === value);
            const existingFieldIndex = columns.findIndex((column)=>'value' in column && column.value === field.key);
            setColumns(columns.map((column, index)=>{
                if (columnIndex === index) {
                    return setColumn(column, field, data);
                } else if (index === existingFieldIndex) {
                    enqueueSnackBar('Another column unselected', {
                        detailedMessage: 'Columns cannot duplicate',
                        variant: SnackBarVariant.Error
                    });
                    return setColumn(column);
                } else {
                    return column;
                }
            }));
        }
    }, [
        columns,
        onRevertIgnore,
        onIgnore,
        fields,
        setColumns,
        data,
        enqueueSnackBar
    ]);
    const handleContinue = useCallback(async (values, rawData, columns)=>{
        try {
            const data = await matchColumnsStepHook(values, rawData, columns);
            setCurrentStepState({
                type: SpreadsheetImportStepType.validateData,
                data,
                importedColumns: columns
            });
            setPreviousStepState(currentStepState);
            nextStep();
        } catch (e) {
            onError(e.message);
        }
    }, [
        onError,
        matchColumnsStepHook,
        nextStep,
        setPreviousStepState,
        setCurrentStepState,
        currentStepState
    ]);
    const onSubChange = useCallback((value, columnIndex, entry)=>{
        setColumns(columns.map((column, index)=>columnIndex === index && 'matchedOptions' in column ? setSubColumn(column, entry, value) : column));
    }, [
        columns,
        setColumns
    ]);
    const unmatchedRequiredFields = useMemo(()=>findUnmatchedRequiredFields(fields, columns), [
        fields,
        columns
    ]);
    const handleAlertOnContinue = useCallback(async ()=>{
        setIsLoading(true);
        await handleContinue(normalizeTableData(columns, data, fields), data, columns);
        setIsLoading(false);
    }, [
        handleContinue,
        columns,
        data,
        fields
    ]);
    const handleOnContinue = useCallback(async ()=>{
        if (unmatchedRequiredFields.length > 0) {
            enqueueDialog({
                title: $__i18n._({
                    id: "v3W9iu",
                    message: "Not all columns matched"
                }),
                message: $__i18n._({
                    id: "/cSDOy",
                    message: "There are required columns that are not matched or ignored. Do you want to continue?"
                }),
                children: /*#__PURE__*/ _jsxDEV(StyledColumnsContainer, {
                    children: [
                        /*#__PURE__*/ _jsxDEV(StyledColumns, {
                            children: /*#__PURE__*/ _jsxDEV(Trans_, {
                                message: "Columns not matched:",
                                id: "93hd3e"
                            }, void 0, false, {
                                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                                lineNumber: 227,
                                columnNumber: 15
                            }, this)
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                            lineNumber: 226,
                            columnNumber: 13
                        }, this),
                        unmatchedRequiredFields.map((field)=>/*#__PURE__*/ _jsxDEV(StyledColumn, {
                                children: field
                            }, field, false, {
                                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                                lineNumber: 230,
                                columnNumber: 15
                            }, this))
                    ]
                }, void 0, true, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                    lineNumber: 225,
                    columnNumber: 11
                }, this),
                buttons: [
                    {
                        title: $__i18n._({
                            id: "dEgA5A",
                            message: "Cancel"
                        })
                    },
                    {
                        title: $__i18n._({
                            id: "xGVfLh",
                            message: "Continue"
                        }),
                        onClick: handleAlertOnContinue,
                        variant: 'primary',
                        role: 'confirm'
                    }
                ]
            });
        } else {
            setIsLoading(true);
            await handleContinue(normalizeTableData(columns, data, fields), data, columns);
            setIsLoading(false);
        }
    }, [
        unmatchedRequiredFields,
        enqueueDialog,
        handleAlertOnContinue,
        handleContinue,
        columns,
        data,
        fields,
        $__
    ]);
    useEffect(()=>{
        const isInitialColumnsState = columns.every((column)=>column.type === SpreadsheetColumnType.empty);
        if (autoMapHeaders && isInitialColumnsState) {
            setColumns(getMatchedColumns(columns, fields, data, autoMapDistance));
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    return /*#__PURE__*/ _jsxDEV(_Fragment, {
        children: [
            /*#__PURE__*/ _jsxDEV(ScrollWrapper, {
                contextProviderName: "modalContent",
                componentInstanceId: "scroll-wrapper-modal-content",
                heightMode: "full",
                children: /*#__PURE__*/ _jsxDEV(StyledContent, {
                    children: [
                        /*#__PURE__*/ _jsxDEV(Heading, {
                            title: $__i18n._({
                                id: "gDLior",
                                message: "Match Columns"
                            }),
                            description: $__i18n._({
                                id: "mWHn81",
                                message: "Select the correct field for each column you'd like to import."
                            })
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                            lineNumber: 282,
                            columnNumber: 11
                        }, this),
                        /*#__PURE__*/ _jsxDEV(ColumnGrid, {
                            columns: columns,
                            renderUserColumn: (columns, columnIndex)=>/*#__PURE__*/ _jsxDEV(UserTableColumn, {
                                    column: columns[columnIndex],
                                    importedRow: dataExample.map((row)=>row[columns[columnIndex].index])
                                }, void 0, false, {
                                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                                    lineNumber: 289,
                                    columnNumber: 15
                                }, void 0),
                            renderTemplateColumn: (columns, columnIndex)=>/*#__PURE__*/ _jsxDEV(TemplateColumn, {
                                    columns: columns,
                                    columnIndex: columnIndex,
                                    onChange: onChange
                                }, void 0, false, {
                                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                                    lineNumber: 297,
                                    columnNumber: 15
                                }, void 0),
                            renderUnmatchedColumn: (columns, columnIndex)=>/*#__PURE__*/ _jsxDEV(UnmatchColumn, {
                                    columns: columns,
                                    columnIndex: columnIndex,
                                    onSubChange: onSubChange
                                }, void 0, false, {
                                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                                    lineNumber: 304,
                                    columnNumber: 15
                                }, void 0)
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                            lineNumber: 286,
                            columnNumber: 11
                        }, this)
                    ]
                }, void 0, true, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                    lineNumber: 281,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                lineNumber: 276,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(StepNavigationButton, {
                onClick: handleOnContinue,
                isLoading: isLoading,
                title: $__i18n._({
                    id: "AxNmtI",
                    message: "Next Step"
                }),
                onBack: ()=>{
                    onBack?.();
                    setColumns([]);
                }
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx",
                lineNumber: 313,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
};
_s(MatchColumnsStep, "r0lFx51LbGPSMy58zXSbENgF5sc=", false, function() {
    return [
        useDialogManager,
        useSnackBar,
        useSpreadsheetImportInternal,
        useRecoilState,
        useSpreadsheetImportInternal
    ];
});
_c4 = MatchColumnsStep;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "StyledContent");
$RefreshReg$(_c1, "StyledColumnsContainer");
$RefreshReg$(_c2, "StyledColumns");
$RefreshReg$(_c3, "StyledColumn");
$RefreshReg$(_c4, "MatchColumnsStep");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/spreadsheet-import/steps/components/MatchColumnsStep/MatchColumnsStep.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,