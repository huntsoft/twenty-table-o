import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/ui/input/components/SelectInput.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { DropdownMenu } from "/src/modules/ui/layout/dropdown/components/DropdownMenu.tsx";
import { DropdownMenuItemsContainer } from "/src/modules/ui/layout/dropdown/components/DropdownMenuItemsContainer.tsx";
import { DropdownMenuSearchInput } from "/src/modules/ui/layout/dropdown/components/DropdownMenuSearchInput.tsx";
import { DropdownMenuSeparator } from "/src/modules/ui/layout/dropdown/components/DropdownMenuSeparator.tsx";
import { useScopedHotkeys } from "/src/modules/ui/utilities/hotkey/hooks/useScopedHotkeys.ts";
import { useListenClickOutside } from "/src/modules/ui/utilities/pointer-event/hooks/useListenClickOutside.ts";
import __vite__cjsImport8_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport8_react["useEffect"]; const useMemo = __vite__cjsImport8_react["useMemo"]; const useRef = __vite__cjsImport8_react["useRef"]; const useState = __vite__cjsImport8_react["useState"];
import __vite__cjsImport9_tsKeyEnum from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/ts-key-enum.js?v=226f7286"; const Key = __vite__cjsImport9_tsKeyEnum["Key"];
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { MenuItemSelectTag } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
export const SelectInput = ({ onOptionSelected, onClear, clearLabel, options, onCancel, defaultOption, onFilterChange, hotkeyScope })=>{
    _s();
    const containerRef = useRef(null);
    const [searchFilter, setSearchFilter] = useState('');
    const [selectedOption, setSelectedOption] = useState(defaultOption);
    const optionsToSelect = useMemo(()=>options.filter((option)=>{
            return option.value !== selectedOption?.value && option.label.toLowerCase().includes(searchFilter.toLowerCase());
        }) || [], [
        options,
        searchFilter,
        selectedOption?.value
    ]);
    const optionsInDropDown = useMemo(()=>selectedOption ? [
            selectedOption,
            ...optionsToSelect
        ] : optionsToSelect, [
        optionsToSelect,
        selectedOption
    ]);
    const handleOptionChange = (option)=>{
        setSelectedOption(option);
        onOptionSelected(option);
    };
    useEffect(()=>{
        onFilterChange?.(optionsInDropDown);
    }, [
        onFilterChange,
        optionsInDropDown
    ]);
    useListenClickOutside({
        refs: [
            containerRef
        ],
        callback: (event)=>{
            event.stopImmediatePropagation();
            const weAreNotInAnHTMLInput = !(event.target instanceof HTMLInputElement && event.target.tagName === 'INPUT');
            if (weAreNotInAnHTMLInput && isDefined(onCancel)) {
                onCancel();
            }
        },
        listenerId: 'select-input'
    });
    useScopedHotkeys(Key.Enter, ()=>{
        const selectedOption = optionsInDropDown.find((option)=>option.label.toLowerCase().includes(searchFilter.toLowerCase()));
        if (isDefined(selectedOption)) {
            handleOptionChange(selectedOption);
        }
    }, hotkeyScope, [
        searchFilter,
        optionsInDropDown
    ]);
    return /*#__PURE__*/ _jsxDEV(DropdownMenu, {
        ref: containerRef,
        "data-select-disable": true,
        children: [
            /*#__PURE__*/ _jsxDEV(DropdownMenuSearchInput, {
                value: searchFilter,
                onChange: (e)=>setSearchFilter(e.target.value),
                autoFocus: true
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx",
                lineNumber: 98,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(DropdownMenuSeparator, {}, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx",
                lineNumber: 103,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(DropdownMenuItemsContainer, {
                hasMaxHeight: true,
                children: [
                    onClear && clearLabel && /*#__PURE__*/ _jsxDEV(MenuItemSelectTag, {
                        selected: false,
                        text: `No ${clearLabel}`,
                        color: "transparent",
                        variant: 'outline',
                        onClick: ()=>{
                            setSelectedOption(undefined);
                            onClear();
                        }
                    }, `No ${clearLabel}`, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx",
                        lineNumber: 106,
                        columnNumber: 11
                    }, this),
                    optionsInDropDown.map((option)=>{
                        return /*#__PURE__*/ _jsxDEV(MenuItemSelectTag, {
                            selected: selectedOption?.value === option.value,
                            text: option.label,
                            color: option.color ?? 'transparent',
                            onClick: ()=>handleOptionChange(option),
                            LeftIcon: option.Icon
                        }, option.value, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx",
                            lineNumber: 120,
                            columnNumber: 13
                        }, this);
                    })
                ]
            }, void 0, true, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx",
                lineNumber: 104,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx",
        lineNumber: 97,
        columnNumber: 5
    }, this);
};
_s(SelectInput, "RkuenZEaTOlPHIccOOElGVqNC4I=", false, function() {
    return [
        useListenClickOutside,
        useScopedHotkeys
    ];
});
_c = SelectInput;
var _c;
$RefreshReg$(_c, "SelectInput");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/ui/input/components/SelectInput.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,