import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { GMAIL_SEND_SCOPE } from "/src/modules/accounts/constants/GmailSendScope.ts";
import { MICROSOFT_SEND_SCOPE } from "/src/modules/accounts/constants/MicrosoftSendScope.ts";
import { currentWorkspaceMemberState } from "/src/modules/auth/states/currentWorkspaceMemberState.ts";
import { useCommandMenu } from "/src/modules/command-menu/hooks/useCommandMenu.ts";
import { useFindManyRecords } from "/src/modules/object-record/hooks/useFindManyRecords.ts";
import { FormTextFieldInput } from "/src/modules/object-record/record-field/form-types/components/FormTextFieldInput.tsx";
import { useTriggerApisOAuth } from "/src/modules/settings/accounts/hooks/useTriggerApiOAuth.ts";
import { SettingsPath } from "/src/modules/types/SettingsPath.ts";
import { Select } from "/src/modules/ui/input/components/Select.tsx";
import { workflowIdState } from "/src/modules/workflow/states/workflowIdState.ts";
import { WorkflowStepBody } from "/src/modules/workflow/workflow-steps/components/WorkflowStepBody.tsx";
import { WorkflowStepHeader } from "/src/modules/workflow/workflow-steps/components/WorkflowStepHeader.tsx";
import { useActionHeaderTypeOrThrow } from "/src/modules/workflow/workflow-steps/workflow-actions/hooks/useActionHeaderTypeOrThrow.ts";
import { useActionIconColorOrThrow } from "/src/modules/workflow/workflow-steps/workflow-actions/hooks/useActionIconColorOrThrow.ts";
import { getActionIcon } from "/src/modules/workflow/workflow-steps/workflow-actions/utils/getActionIcon.ts";
import { WorkflowVariablePicker } from "/src/modules/workflow/workflow-variables/components/WorkflowVariablePicker.tsx";
import __vite__cjsImport18_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport18_react["useEffect"]; const useState = __vite__cjsImport18_react["useState"];
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { ConnectedAccountProvider } from "/@fs/D:/twenty-table-o/packages/twenty-shared/types/dist/twenty-shared-types.esm.js";
import { assertUnreachable, isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { IconPlus, useIcons } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { useDebouncedCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/use-debounce.js?v=226f7286";
import { useNavigateSettings } from "/src/hooks/useNavigateSettings.ts";
export const WorkflowEditActionSendEmail = ({ action, actionOptions })=>{
    _s();
    const { getIcon } = useIcons();
    const currentWorkspaceMember = useRecoilValue(currentWorkspaceMemberState);
    const { triggerApisOAuth } = useTriggerApisOAuth();
    const workflowId = useRecoilValue(workflowIdState);
    const redirectUrl = `/object/workflow/${workflowId}`;
    const [formData, setFormData] = useState({
        connectedAccountId: action.settings.input.connectedAccountId,
        email: action.settings.input.email,
        subject: action.settings.input.subject ?? '',
        body: action.settings.input.body ?? ''
    });
    const checkConnectedAccountScopes = async (connectedAccountId)=>{
        const connectedAccount = accounts.find((account)=>account.id === connectedAccountId);
        if (!isDefined(connectedAccount)) {
            return;
        }
        const scopes = connectedAccount.scopes;
        const hasSendScope = (connectedAccount, scopes)=>{
            switch(connectedAccount.provider){
                case ConnectedAccountProvider.GOOGLE:
                    return scopes.some((scope)=>scope === GMAIL_SEND_SCOPE);
                case ConnectedAccountProvider.MICROSOFT:
                    return scopes.some((scope)=>scope === MICROSOFT_SEND_SCOPE);
                default:
                    assertUnreachable(connectedAccount.provider, 'Provider not yet supported for sending emails');
            }
        };
        if (!isDefined(scopes) || !hasSendScope(connectedAccount, scopes)) {
            await triggerApisOAuth(connectedAccount.provider, {
                redirectLocation: redirectUrl,
                loginHint: connectedAccount.handle
            });
        }
    };
    const saveAction = useDebouncedCallback(async (formData)=>{
        if (actionOptions.readonly === true) {
            return;
        }
        actionOptions.onActionUpdate({
            ...action,
            settings: {
                ...action.settings,
                input: {
                    connectedAccountId: formData.connectedAccountId,
                    email: formData.email,
                    subject: formData.subject,
                    body: formData.body
                }
            }
        });
        await checkConnectedAccountScopes(formData.connectedAccountId);
    }, 1000);
    useEffect(()=>{
        return ()=>{
            saveAction.flush();
        };
    }, [
        saveAction
    ]);
    const handleFieldChange = (fieldName, updatedValue)=>{
        const newFormData = {
            ...formData,
            [fieldName]: updatedValue
        };
        setFormData(newFormData);
        saveAction(newFormData);
    };
    const filter = {
        or: [
            {
                accountOwnerId: {
                    eq: currentWorkspaceMember?.id
                }
            }
        ]
    };
    if (isDefined(action.settings.input.connectedAccountId) && action.settings.input.connectedAccountId !== '') {
        filter.or.push({
            id: {
                eq: action.settings.input.connectedAccountId
            }
        });
    }
    const { records: accounts, loading } = useFindManyRecords({
        objectNameSingular: 'connectedAccount',
        filter
    });
    let emptyOption = {
        label: 'None',
        value: null
    };
    const connectedAccountOptions = [];
    accounts.forEach((account)=>{
        const selectOption = {
            label: account.handle,
            value: account.id
        };
        if (account.accountOwnerId === currentWorkspaceMember?.id) {
            connectedAccountOptions.push(selectOption);
        } else {
            // This handle the case when the current connected account does not belong to the currentWorkspaceMember
            // In that case, current connected account email is displayed, but cannot be selected
            emptyOption = selectOption;
        }
    });
    const headerTitle = isDefined(action.name) ? action.name : 'Send Email';
    const headerIcon = getActionIcon(action.type);
    const headerIconColor = useActionIconColorOrThrow(action.type);
    const headerType = useActionHeaderTypeOrThrow(action.type);
    const navigate = useNavigateSettings();
    const { closeCommandMenu } = useCommandMenu();
    return !loading && /*#__PURE__*/ _jsxDEV(_Fragment, {
        children: [
            /*#__PURE__*/ _jsxDEV(WorkflowStepHeader, {
                onTitleChange: (newName)=>{
                    if (actionOptions.readonly === true) {
                        return;
                    }
                    actionOptions.onActionUpdate({
                        ...action,
                        name: newName
                    });
                },
                Icon: getIcon(headerIcon),
                iconColor: headerIconColor,
                initialTitle: headerTitle,
                headerType: headerType,
                disabled: actionOptions.readonly
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx",
                lineNumber: 200,
                columnNumber: 9
            }, this),
            /*#__PURE__*/ _jsxDEV(WorkflowStepBody, {
                children: [
                    /*#__PURE__*/ _jsxDEV(Select, {
                        dropdownId: "select-connected-account-id",
                        label: "Account",
                        fullWidth: true,
                        emptyOption: emptyOption,
                        value: formData.connectedAccountId,
                        options: connectedAccountOptions,
                        callToActionButton: {
                            onClick: ()=>{
                                closeCommandMenu();
                                navigate(SettingsPath.NewAccount);
                            },
                            Icon: IconPlus,
                            text: 'Add account'
                        },
                        onChange: (connectedAccountId)=>{
                            handleFieldChange('connectedAccountId', connectedAccountId);
                        },
                        disabled: actionOptions.readonly
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx",
                        lineNumber: 218,
                        columnNumber: 11
                    }, this),
                    /*#__PURE__*/ _jsxDEV(FormTextFieldInput, {
                        label: "Email",
                        placeholder: "Enter receiver email",
                        readonly: actionOptions.readonly,
                        defaultValue: formData.email,
                        onChange: (email)=>{
                            handleFieldChange('email', email);
                        },
                        VariablePicker: WorkflowVariablePicker
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx",
                        lineNumber: 238,
                        columnNumber: 11
                    }, this),
                    /*#__PURE__*/ _jsxDEV(FormTextFieldInput, {
                        label: "Subject",
                        placeholder: "Enter email subject",
                        readonly: actionOptions.readonly,
                        defaultValue: formData.subject,
                        onChange: (subject)=>{
                            handleFieldChange('subject', subject);
                        },
                        VariablePicker: WorkflowVariablePicker
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx",
                        lineNumber: 248,
                        columnNumber: 11
                    }, this),
                    /*#__PURE__*/ _jsxDEV(FormTextFieldInput, {
                        label: "Body",
                        placeholder: "Enter email body",
                        readonly: actionOptions.readonly,
                        defaultValue: formData.body,
                        onChange: (body)=>{
                            handleFieldChange('body', body);
                        },
                        VariablePicker: WorkflowVariablePicker,
                        multiline: true
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx",
                        lineNumber: 258,
                        columnNumber: 11
                    }, this)
                ]
            }, void 0, true, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx",
                lineNumber: 217,
                columnNumber: 9
            }, this)
        ]
    }, void 0, true);
};
_s(WorkflowEditActionSendEmail, "x6z/a3QcW94tHBi9KkPn608DDHk=", false, function() {
    return [
        useIcons,
        useRecoilValue,
        useTriggerApisOAuth,
        useRecoilValue,
        useDebouncedCallback,
        useFindManyRecords,
        useActionIconColorOrThrow,
        useActionHeaderTypeOrThrow,
        useNavigateSettings,
        useCommandMenu
    ];
});
_c = WorkflowEditActionSendEmail;
var _c;
$RefreshReg$(_c, "WorkflowEditActionSendEmail");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionSendEmail.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,