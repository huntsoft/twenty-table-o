import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport1__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNonEmptyString = __vite__cjsImport1__sniptt_guards["isNonEmptyString"]; const isObject = __vite__cjsImport1__sniptt_guards["isObject"];
import __vite__cjsImport2_qs from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/qs.js?v=226f7286"; const qs = __vite__cjsImport2_qs.__esModule ? __vite__cjsImport2_qs.default : __vite__cjsImport2_qs;
import __vite__cjsImport3_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useMemo = __vite__cjsImport3_react["useMemo"];
import { useParams, useSearchParams } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react-router-dom.js?v=226f7286";
import { useRecoilCallback, useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import z from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/zod.js?v=226f7286";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectNameSingularFromPlural } from "/src/modules/object-metadata/hooks/useObjectNameSingularFromPlural.ts";
import { objectMetadataItemFamilySelector } from "/src/modules/object-metadata/states/objectMetadataItemFamilySelector.ts";
import { objectMetadataItemsState } from "/src/modules/object-metadata/states/objectMetadataItemsState.ts";
import { getObjectRecordIdentifier } from "/src/modules/object-metadata/utils/getObjectRecordIdentifier.ts";
import { generateFindManyRecordsQuery } from "/src/modules/object-record/utils/generateFindManyRecordsQuery.ts";
import { ViewFilterOperand } from "/src/modules/views/types/ViewFilterOperand.ts";
import { relationFilterValueSchemaObject } from "/src/modules/views/view-filter-value/validation-schemas/jsonRelationFilterValueSchema.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
const filterQueryParamsSchema = z.object({
    viewId: z.string().optional(),
    filter: z.record(z.record(z.nativeEnum(ViewFilterOperand), z.string().or(z.array(z.string())).or(relationFilterValueSchemaObject))).optional()
});
export const useViewFromQueryParams = ()=>{
    const apolloClient = useApolloClient();
    const [searchParams] = useSearchParams();
    const { objectNamePlural = '' } = useParams();
    const { objectNameSingular } = useObjectNameSingularFromPlural({
        objectNamePlural
    });
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const objectMetadataItems = useRecoilValue(objectMetadataItemsState);
    const queryParamsValidation = filterQueryParamsSchema.safeParse(qs.parse(searchParams.toString()));
    const filterQueryParams = useMemo(()=>queryParamsValidation.success ? queryParamsValidation.data.filter : {}, [
        queryParamsValidation
    ]);
    const viewIdQueryParam = useMemo(()=>queryParamsValidation.success ? queryParamsValidation.data.viewId : undefined, [
        queryParamsValidation
    ]);
    const hasFiltersQueryParams = isDefined(filterQueryParams) && Object.entries(filterQueryParams).length > 0;
    const getFiltersFromQueryParams = useRecoilCallback(({ snapshot })=>async ()=>{
            if (!hasFiltersQueryParams) return [];
            return (await Promise.all(Object.entries(filterQueryParams).map(async ([fieldName, filterFromURL])=>{
                const [filterOperandFromURL, filterValueFromURL] = Object.entries(filterFromURL)[0];
                const fieldMetadataItem = objectMetadataItem.fields.find((field)=>field.name === fieldName);
                if (!fieldMetadataItem) return null;
                const relationObjectMetadataNameSingular = fieldMetadataItem.relationDefinition?.targetObjectMetadata?.nameSingular;
                const relationObjectMetadataNamePlural = fieldMetadataItem.relationDefinition?.targetObjectMetadata?.namePlural;
                const relationObjectMetadataItem = relationObjectMetadataNameSingular ? snapshot.getLoadable(objectMetadataItemFamilySelector({
                    objectName: relationObjectMetadataNameSingular,
                    objectNameType: 'singular'
                })).getValue() : null;
                const satisfiesRelationFilterSchema = relationFilterValueSchemaObject.safeParse(filterValueFromURL)?.success;
                const relationRecordNames = [];
                if (isNonEmptyString(relationObjectMetadataNamePlural) && isDefined(relationObjectMetadataItem) && (Array.isArray(filterValueFromURL) || satisfiesRelationFilterSchema)) {
                    const queryResult = await apolloClient.query({
                        query: generateFindManyRecordsQuery({
                            objectMetadataItem: relationObjectMetadataItem,
                            objectMetadataItems
                        }),
                        variables: {
                            filter: {
                                id: {
                                    in: satisfiesRelationFilterSchema ? filterValueFromURL?.selectedRecordIds : filterValueFromURL
                                }
                            }
                        }
                    });
                    const relationRecordNamesFromQuery = queryResult.data?.[relationObjectMetadataNamePlural]?.edges.map(({ node: record })=>getObjectRecordIdentifier({
                            objectMetadataItem: relationObjectMetadataItem,
                            record
                        }).name);
                    relationRecordNames.push(...relationRecordNamesFromQuery);
                }
                const filterValueAsString = Array.isArray(filterValueFromURL) || isObject(filterValueFromURL) ? JSON.stringify(filterValueFromURL) : filterValueFromURL;
                return {
                    __typename: 'ViewFilter',
                    id: `tmp-${[
                        fieldName,
                        filterOperandFromURL,
                        filterValueFromURL
                    ].join('-')}`,
                    fieldMetadataId: fieldMetadataItem.id,
                    operand: filterOperandFromURL,
                    value: filterValueAsString,
                    displayValue: relationRecordNames?.join(', ') ?? filterValueAsString,
                    persistAction: 'NONE'
                };
            }))).filter(isDefined);
        }, [
        apolloClient,
        filterQueryParams,
        hasFiltersQueryParams,
        objectMetadataItem.fields,
        objectMetadataItems
    ]);
    return {
        viewIdQueryParam,
        hasFiltersQueryParams,
        getFiltersFromQueryParams
    };
};

//# sourceMappingURL=data:application/json;base64,