import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useContext = __vite__cjsImport2_react["useContext"];
import { useIcons } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { FieldDisplay } from "/src/modules/object-record/record-field/components/FieldDisplay.tsx";
import { FieldInput } from "/src/modules/object-record/record-field/components/FieldInput.tsx";
import { FieldContext } from "/src/modules/object-record/record-field/contexts/FieldContext.ts";
import { FieldFocusContextProvider } from "/src/modules/object-record/record-field/contexts/FieldFocusContextProvider.tsx";
import { useGetButtonIcon } from "/src/modules/object-record/record-field/hooks/useGetButtonIcon.ts";
import { useIsFieldInputOnly } from "/src/modules/object-record/record-field/hooks/useIsFieldInputOnly.ts";
import { useIsFieldValueReadOnly } from "/src/modules/object-record/record-field/hooks/useIsFieldValueReadOnly.ts";
import { useOpenFieldInputEditMode } from "/src/modules/object-record/record-field/hooks/useOpenFieldInputEditMode.ts";
import { isFieldRelation } from "/src/modules/object-record/record-field/types/guards/isFieldRelation.ts";
import { isFieldSelect } from "/src/modules/object-record/record-field/types/guards/isFieldSelect.ts";
import { useInlineCell } from "/src/modules/object-record/record-inline-cell/hooks/useInlineCell.ts";
import { InlineCellHotkeyScope } from "/src/modules/object-record/record-inline-cell/types/InlineCellHotkeyScope.ts";
import { MultipleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/multiple-record-picker/types/MultipleRecordPickerHotkeyScope.ts";
import { SingleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/single-record-picker/types/SingleRecordPickerHotkeyScope.ts";
import { SelectFieldHotkeyScope } from "/src/modules/object-record/select/types/SelectFieldHotkeyScope.tsx";
import { currentHotkeyScopeState } from "/src/modules/ui/utilities/hotkey/states/internal/currentHotkeyScopeState.ts";
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { RelationDefinitionType } from "/src/generated-metadata/graphql.ts";
import { RecordInlineCellContainer } from "/src/modules/object-record/record-inline-cell/components/RecordInlineCellContainer.tsx";
import { RecordInlineCellContext } from "/src/modules/object-record/record-inline-cell/components/RecordInlineCellContext.tsx";
export const RecordInlineCell = ({ loading })=>{
    _s();
    const { fieldDefinition, recordId, isCentered, isDisplayModeFixHeight, onOpenEditMode, onCloseEditMode } = useContext(FieldContext);
    const buttonIcon = useGetButtonIcon();
    const isFieldInputOnly = useIsFieldInputOnly();
    const isFieldReadOnly = useIsFieldValueReadOnly();
    const { closeInlineCell } = useInlineCell();
    const handleEnter = (persistField)=>{
        persistField();
        closeInlineCell();
    };
    const handleSubmit = (persistField)=>{
        persistField();
        closeInlineCell();
    };
    const handleCancel = ()=>{
        closeInlineCell();
    };
    const handleEscape = ()=>{
        closeInlineCell();
    };
    const handleTab = (persistField)=>{
        persistField();
        closeInlineCell();
    };
    const handleShiftTab = (persistField)=>{
        persistField();
        closeInlineCell();
    };
    const handleClickOutside = useRecoilCallback(({ snapshot })=>(persistField, event)=>{
            const hotkeyScope = snapshot.getLoadable(currentHotkeyScopeState).getValue();
            if (hotkeyScope.scope !== InlineCellHotkeyScope.InlineCell) {
                return;
            }
            event.stopImmediatePropagation();
            persistField();
            closeInlineCell();
        }, [
        closeInlineCell
    ]);
    const { getIcon } = useIcons();
    const { openFieldInput, closeFieldInput } = useOpenFieldInputEditMode();
    // TODO: deprecate this and use useOpenFieldInput hooks to set the hotkey scope
    const computedHotkeyScope = (columnDefinition)=>{
        if (isFieldRelation(columnDefinition)) {
            if (columnDefinition.metadata.relationType === RelationDefinitionType.MANY_TO_ONE) {
                return SingleRecordPickerHotkeyScope.SingleRecordPicker;
            }
            if (columnDefinition.metadata.relationType === RelationDefinitionType.ONE_TO_MANY) {
                return MultipleRecordPickerHotkeyScope.MultipleRecordPicker;
            }
            return SingleRecordPickerHotkeyScope.SingleRecordPicker;
        }
        if (isFieldSelect(columnDefinition)) {
            return SelectFieldHotkeyScope.SelectField;
        }
        return undefined;
    };
    const RecordInlineCellContextValue = {
        readonly: isFieldReadOnly,
        buttonIcon: buttonIcon,
        IconLabel: fieldDefinition.iconName ? getIcon(fieldDefinition.iconName) : undefined,
        label: fieldDefinition.label,
        labelWidth: fieldDefinition.labelWidth,
        showLabel: fieldDefinition.showLabel,
        isCentered,
        editModeContent: /*#__PURE__*/ _jsxDEV(FieldInput, {
            onEnter: handleEnter,
            onCancel: handleCancel,
            onEscape: handleEscape,
            onSubmit: handleSubmit,
            onTab: handleTab,
            onShiftTab: handleShiftTab,
            onClickOutside: handleClickOutside,
            isReadOnly: isFieldReadOnly
        }, void 0, false, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx",
            lineNumber: 143,
            columnNumber: 7
        }, this),
        displayModeContent: /*#__PURE__*/ _jsxDEV(FieldDisplay, {}, void 0, false, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx",
            lineNumber: 154,
            columnNumber: 25
        }, this),
        isDisplayModeFixHeight: isDisplayModeFixHeight,
        editModeContentOnly: isFieldInputOnly,
        loading: loading,
        customEditHotkeyScope: computedHotkeyScope(fieldDefinition),
        onOpenEditMode: onOpenEditMode ?? (()=>openFieldInput({
                fieldDefinition,
                recordId
            })),
        onCloseEditMode: onCloseEditMode ?? (()=>closeFieldInput())
    };
    return /*#__PURE__*/ _jsxDEV(FieldFocusContextProvider, {
        children: /*#__PURE__*/ _jsxDEV(RecordInlineCellContext.Provider, {
            value: RecordInlineCellContextValue,
            children: /*#__PURE__*/ _jsxDEV(RecordInlineCellContainer, {}, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx",
                lineNumber: 167,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx",
            lineNumber: 166,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx",
        lineNumber: 165,
        columnNumber: 5
    }, this);
};
_s(RecordInlineCell, "uPpHDvswNq/tr6Jy7bKVOg0jF1I=", false, function() {
    return [
        useGetButtonIcon,
        useIsFieldInputOnly,
        useIsFieldValueReadOnly,
        useInlineCell,
        useRecoilCallback,
        useIcons,
        useOpenFieldInputEditMode
    ];
});
_c = RecordInlineCell;
var _c;
$RefreshReg$(_c, "RecordInlineCell");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-inline-cell/components/RecordInlineCell.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,