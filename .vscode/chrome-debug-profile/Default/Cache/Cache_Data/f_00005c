import __vite__cjsImport0__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNull = __vite__cjsImport0__sniptt_guards["isNull"]; const isUndefined = __vite__cjsImport0__sniptt_guards["isUndefined"];
import { getRecordFromCache } from "/src/modules/object-record/cache/utils/getRecordFromCache.ts";
import { GRAPHQL_TYPENAME_KEY } from "/src/modules/object-record/constants/GraphqlTypenameKey.ts";
import { isFieldActor } from "/src/modules/object-record/record-field/types/guards/isFieldActor.ts";
import { isFieldRelation } from "/src/modules/object-record/record-field/types/guards/isFieldRelation.ts";
import { isFieldUuid } from "/src/modules/object-record/record-field/types/guards/isFieldUuid.ts";
import { buildOptimisticActorFieldValueFromCurrentWorkspaceMember } from "/src/modules/object-record/utils/buildOptimisticActorFieldValueFromCurrentWorkspaceMember.ts";
import { getForeignKeyNameFromRelationFieldName } from "/src/modules/object-record/utils/getForeignKeyNameFromRelationFieldName.ts";
import { RelationDefinitionType } from "/src/generated-metadata/graphql.ts";
import { FieldMetadataType } from "/src/generated/graphql.tsx";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const computeOptimisticRecordFromInput = ({ objectMetadataItem, recordInput, cache, objectMetadataItems, currentWorkspaceMember })=>{
    const unknownRecordInputFields = Object.keys(recordInput).filter((recordKey)=>{
        const isUnknownMetadataItemField = objectMetadataItem.fields.find((field)=>field.name === recordKey) === undefined;
        const isTypenameField = recordKey === GRAPHQL_TYPENAME_KEY;
        return isUnknownMetadataItemField && !isTypenameField;
    });
    if (unknownRecordInputFields.length > 0) {
        throw new Error(`Should never occur, encountered unknown fields ${unknownRecordInputFields.join(', ')} in objectMetadataItem ${objectMetadataItem.nameSingular}`);
    }
    const optimisticRecord = {};
    for (const fieldMetadataItem of objectMetadataItem.fields){
        const recordInputFieldValue = recordInput[fieldMetadataItem.name];
        if (isFieldUuid(fieldMetadataItem)) {
            const isRelationFieldId = objectMetadataItem.fields.some(({ type, relationDefinition })=>{
                if (type !== FieldMetadataType.RELATION) {
                    return false;
                }
                if (!isDefined(relationDefinition)) {
                    return false;
                }
                const sourceFieldName = relationDefinition.sourceFieldMetadata.name;
                return getForeignKeyNameFromRelationFieldName(sourceFieldName) === fieldMetadataItem.name;
            });
            if (isRelationFieldId) {
                continue;
            }
        }
        if (isFieldActor(fieldMetadataItem) && isDefined(recordInputFieldValue)) {
            const defaultActorFieldValue = buildOptimisticActorFieldValueFromCurrentWorkspaceMember(currentWorkspaceMember);
            optimisticRecord[fieldMetadataItem.name] = {
                ...defaultActorFieldValue,
                ...recordInputFieldValue
            };
            continue;
        }
        const isRelationField = isFieldRelation(fieldMetadataItem);
        if (!isRelationField) {
            if (!isDefined(recordInputFieldValue)) {
                continue;
            }
            if (!fieldMetadataItem.isNullable && recordInputFieldValue == null) {
                continue;
            }
            optimisticRecord[fieldMetadataItem.name] = recordInputFieldValue;
            continue;
        }
        if (fieldMetadataItem.relationDefinition?.direction === RelationDefinitionType.ONE_TO_MANY) {
            continue;
        }
        const isManyToOneRelation = fieldMetadataItem.relationDefinition?.direction === RelationDefinitionType.MANY_TO_ONE;
        if (!isManyToOneRelation) {
            continue;
        }
        if (!isUndefined(recordInputFieldValue)) {
            throw new Error(`Should never provide relation mutation through anything else than the fieldId e.g companyId and not company, encountered: ${fieldMetadataItem.name}`);
        }
        const relationFieldIdName = getForeignKeyNameFromRelationFieldName(fieldMetadataItem.name);
        const recordInputFieldIdValue = recordInput[relationFieldIdName];
        if (isUndefined(recordInputFieldIdValue)) {
            continue;
        }
        const relationIdFieldMetadataItem = objectMetadataItem.fields.find((field)=>field.name === relationFieldIdName);
        if (!isDefined(relationIdFieldMetadataItem)) {
            throw new Error('Should never occur, encountered unknown relationId within relations definitions');
        }
        if (isNull(recordInputFieldIdValue)) {
            optimisticRecord[relationFieldIdName] = null;
            optimisticRecord[fieldMetadataItem.name] = null;
            continue;
        }
        const targetNameSingular = fieldMetadataItem.relationDefinition?.targetObjectMetadata.nameSingular;
        const targetObjectMetataDataItem = objectMetadataItems.find(({ nameSingular })=>nameSingular === targetNameSingular);
        if (!isDefined(targetObjectMetataDataItem)) {
            throw new Error('Should never occur, encountered invalid relation definition');
        }
        const cachedRecord = getRecordFromCache({
            cache,
            objectMetadataItem: targetObjectMetataDataItem,
            objectMetadataItems,
            recordId: recordInputFieldIdValue
        });
        optimisticRecord[relationFieldIdName] = recordInputFieldIdValue;
        if (!isDefined(cachedRecord) || Object.keys(cachedRecord).length <= 0) {
            continue;
        }
        optimisticRecord[fieldMetadataItem.name] = cachedRecord;
    }
    return optimisticRecord;
};

//# sourceMappingURL=data:application/json;base64,