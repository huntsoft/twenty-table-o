import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { triggerCreateRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerCreateRecordsOptimisticEffect.ts";
import { triggerDestroyRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerDestroyRecordsOptimisticEffect.ts";
import { currentWorkspaceMemberState } from "/src/modules/auth/states/currentWorkspaceMemberState.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { hasObjectMetadataItemFieldCreatedBy } from "/src/modules/object-metadata/utils/hasObjectMetadataItemFieldCreatedBy.ts";
import { useCreateOneRecordInCache } from "/src/modules/object-record/cache/hooks/useCreateOneRecordInCache.ts";
import { deleteRecordFromCache } from "/src/modules/object-record/cache/utils/deleteRecordFromCache.ts";
import { getObjectTypename } from "/src/modules/object-record/cache/utils/getObjectTypename.ts";
import { getRecordNodeFromRecord } from "/src/modules/object-record/cache/utils/getRecordNodeFromRecord.ts";
import { generateDepthOneRecordGqlFields } from "/src/modules/object-record/graphql/utils/generateDepthOneRecordGqlFields.ts";
import { useCreateManyRecordsMutation } from "/src/modules/object-record/hooks/useCreateManyRecordsMutation.ts";
import { useRefetchAggregateQueries } from "/src/modules/object-record/hooks/useRefetchAggregateQueries.ts";
import { computeOptimisticRecordFromInput } from "/src/modules/object-record/utils/computeOptimisticRecordFromInput.ts";
import { getCreateManyRecordsMutationResponseField } from "/src/modules/object-record/utils/getCreateManyRecordsMutationResponseField.ts";
import { sanitizeRecordInput } from "/src/modules/object-record/utils/sanitizeRecordInput.ts";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useCreateManyRecords = ({ objectNameSingular, recordGqlFields, skipPostOptimisticEffect = false, shouldMatchRootQueryFilter })=>{
    const apolloClient = useApolloClient();
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const objectMetadataHasCreatedByField = hasObjectMetadataItemFieldCreatedBy(objectMetadataItem);
    const computedRecordGqlFields = recordGqlFields ?? generateDepthOneRecordGqlFields({
        objectMetadataItem
    });
    const { createManyRecordsMutation } = useCreateManyRecordsMutation({
        objectNameSingular,
        recordGqlFields: computedRecordGqlFields
    });
    const createOneRecordInCache = useCreateOneRecordInCache({
        objectMetadataItem
    });
    const currentWorkspaceMember = useRecoilValue(currentWorkspaceMemberState);
    const { objectMetadataItems } = useObjectMetadataItems();
    const { refetchAggregateQueries } = useRefetchAggregateQueries({
        objectMetadataNamePlural: objectMetadataItem.namePlural
    });
    const createManyRecords = async (recordsToCreate, upsert)=>{
        const sanitizedCreateManyRecordsInput = [];
        const recordOptimisticRecordsInput = [];
        recordsToCreate.forEach((recordToCreate)=>{
            const idForCreation = recordToCreate?.id ?? v4();
            const sanitizedRecord = {
                ...sanitizeRecordInput({
                    objectMetadataItem,
                    recordInput: recordToCreate
                }),
                id: idForCreation
            };
            const baseOptimisticRecordInputCreatedBy = objectMetadataHasCreatedByField ? {
                createdBy: {
                    source: 'MANUAL',
                    context: {}
                }
            } : undefined;
            const optimisticRecordInput = {
                ...computeOptimisticRecordFromInput({
                    cache: apolloClient.cache,
                    objectMetadataItem,
                    objectMetadataItems,
                    currentWorkspaceMember: currentWorkspaceMember,
                    recordInput: {
                        ...baseOptimisticRecordInputCreatedBy,
                        ...recordToCreate
                    }
                }),
                id: idForCreation
            };
            sanitizedCreateManyRecordsInput.push(sanitizedRecord);
            recordOptimisticRecordsInput.push(optimisticRecordInput);
        });
        const recordsCreatedInCache = recordOptimisticRecordsInput.map((recordToCreate)=>createOneRecordInCache({
                ...recordToCreate,
                __typename: getObjectTypename(objectMetadataItem.nameSingular)
            })).filter(isDefined);
        if (recordsCreatedInCache.length > 0) {
            const recordNodeCreatedInCache = recordsCreatedInCache.map((record)=>getRecordNodeFromRecord({
                    objectMetadataItem,
                    objectMetadataItems,
                    record: record,
                    computeReferences: false
                })).filter(isDefined);
            triggerCreateRecordsOptimisticEffect({
                cache: apolloClient.cache,
                objectMetadataItem,
                recordsToCreate: recordNodeCreatedInCache,
                objectMetadataItems,
                shouldMatchRootQueryFilter
            });
        }
        const mutationResponseField = getCreateManyRecordsMutationResponseField(objectMetadataItem.namePlural);
        const createdObjects = await apolloClient.mutate({
            mutation: createManyRecordsMutation,
            variables: {
                data: sanitizedCreateManyRecordsInput,
                upsert: upsert
            },
            update: (cache, { data })=>{
                const records = data?.[mutationResponseField];
                if (!isDefined(records?.length) || skipPostOptimisticEffect) return;
                triggerCreateRecordsOptimisticEffect({
                    cache,
                    objectMetadataItem,
                    recordsToCreate: records,
                    objectMetadataItems,
                    shouldMatchRootQueryFilter,
                    checkForRecordInCache: true
                });
            }
        }).catch((error)=>{
            recordsCreatedInCache.forEach((recordToDestroy)=>{
                deleteRecordFromCache({
                    objectMetadataItems,
                    objectMetadataItem,
                    cache: apolloClient.cache,
                    recordToDestroy
                });
            });
            triggerDestroyRecordsOptimisticEffect({
                cache: apolloClient.cache,
                objectMetadataItem,
                recordsToDestroy: recordsCreatedInCache,
                objectMetadataItems
            });
            throw error;
        });
        await refetchAggregateQueries();
        return createdObjects.data?.[mutationResponseField] ?? [];
    };
    return {
        createManyRecords
    };
};

//# sourceMappingURL=data:application/json;base64,