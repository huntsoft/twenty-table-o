import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownOptionSelect.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownOptionSelect.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport2_react["useEffect"]; const useState = __vite__cjsImport2_react["useState"];
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import __vite__cjsImport4_tsKeyEnum from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/ts-key-enum.js?v=226f7286"; const Key = __vite__cjsImport4_tsKeyEnum["Key"];
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { useOptionsForSelect } from "/src/modules/object-record/object-filter-dropdown/hooks/useOptionsForSelect.ts";
import { DropdownMenuItemsContainer } from "/src/modules/ui/layout/dropdown/components/DropdownMenuItemsContainer.tsx";
import { useDropdown } from "/src/modules/ui/layout/dropdown/hooks/useDropdown.ts";
import { SelectableList } from "/src/modules/ui/layout/selectable-list/components/SelectableList.tsx";
import { useSelectableListStates } from "/src/modules/ui/layout/selectable-list/hooks/internal/useSelectableListStates.ts";
import { useSelectableList } from "/src/modules/ui/layout/selectable-list/hooks/useSelectableList.ts";
import { getFilterTypeFromFieldType } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { ObjectFilterDropdownComponentInstanceContext } from "/src/modules/object-record/object-filter-dropdown/states/contexts/ObjectFilterDropdownComponentInstanceContext.ts";
import { fieldMetadataItemUsedInDropdownComponentSelector } from "/src/modules/object-record/object-filter-dropdown/states/fieldMetadataItemUsedInDropdownComponentSelector.ts";
import { objectFilterDropdownSearchInputComponentState } from "/src/modules/object-record/object-filter-dropdown/states/objectFilterDropdownSearchInputComponentState.ts";
import { objectFilterDropdownSelectedOptionValuesComponentState } from "/src/modules/object-record/object-filter-dropdown/states/objectFilterDropdownSelectedOptionValuesComponentState.ts";
import { selectedFilterComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedFilterComponentState.ts";
import { selectedOperandInDropdownComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedOperandInDropdownComponentState.ts";
import { useApplyRecordFilter } from "/src/modules/object-record/record-filter/hooks/useApplyRecordFilter.ts";
import { SingleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/single-record-picker/types/SingleRecordPickerHotkeyScope.ts";
import { useScopedHotkeys } from "/src/modules/ui/utilities/hotkey/hooks/useScopedHotkeys.ts";
import { useAvailableComponentInstanceIdOrThrow } from "/src/modules/ui/utilities/state/component-state/hooks/useAvailableComponentInstanceIdOrThrow.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { MenuItem, MenuItemMultiSelect } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
export const EMPTY_FILTER_VALUE = '';
export const MAX_OPTIONS_TO_DISPLAY = 3;
export const ObjectFilterDropdownOptionSelect = ()=>{
    _s();
    const fieldMetadataItemUsedInDropdown = useRecoilComponentValueV2(fieldMetadataItemUsedInDropdownComponentSelector);
    const objectFilterDropdownSelectedOptionValues = useRecoilComponentValueV2(objectFilterDropdownSelectedOptionValuesComponentState);
    const selectedFilter = useRecoilComponentValueV2(selectedFilterComponentState);
    const objectFilterDropdownSearchInput = useRecoilComponentValueV2(objectFilterDropdownSearchInputComponentState);
    const selectedOperandInDropdown = useRecoilComponentValueV2(selectedOperandInDropdownComponentState);
    const componentInstanceId = useAvailableComponentInstanceIdOrThrow(ObjectFilterDropdownComponentInstanceContext);
    const { applyRecordFilter } = useApplyRecordFilter();
    const { closeDropdown } = useDropdown();
    const { selectedItemIdState } = useSelectableListStates({
        selectableListScopeId: componentInstanceId
    });
    const { resetSelectedItem } = useSelectableList(componentInstanceId);
    const selectedItemId = useRecoilValue(selectedItemIdState);
    const fieldMetaDataId = fieldMetadataItemUsedInDropdown?.id ?? '';
    const { selectOptions } = useOptionsForSelect(fieldMetaDataId);
    const [selectableOptions, setSelectableOptions] = useState([]);
    useEffect(()=>{
        if (isDefined(selectOptions)) {
            const options = selectOptions.map((option)=>{
                const isSelected = objectFilterDropdownSelectedOptionValues?.includes(option.value) ?? false;
                return {
                    ...option,
                    isSelected
                };
            });
            setSelectableOptions(options);
        }
    }, [
        objectFilterDropdownSelectedOptionValues,
        selectOptions
    ]);
    useScopedHotkeys([
        Key.Escape
    ], ()=>{
        closeDropdown();
        resetSelectedItem();
    }, SingleRecordPickerHotkeyScope.SingleRecordPicker, [
        closeDropdown,
        resetSelectedItem
    ]);
    const handleMultipleOptionSelectChange = (optionChanged, isSelected)=>{
        if (!selectOptions) {
            return;
        }
        const newSelectableOptions = selectableOptions.map((option)=>option.id === optionChanged.id ? {
                ...option,
                isSelected
            } : option);
        setSelectableOptions(newSelectableOptions);
        const selectedOptions = newSelectableOptions.filter((option)=>option.isSelected);
        const filterDisplayValue = selectedOptions.length > MAX_OPTIONS_TO_DISPLAY ? `${selectedOptions.length} options` : selectedOptions.map((option)=>option.label).join(', ');
        if (isDefined(fieldMetadataItemUsedInDropdown) && isDefined(selectedOperandInDropdown)) {
            const newFilterValue = selectedOptions.length > 0 ? JSON.stringify(selectedOptions.map((option)=>option.value)) : EMPTY_FILTER_VALUE;
            applyRecordFilter({
                id: selectedFilter?.id ? selectedFilter.id : v4(),
                type: getFilterTypeFromFieldType(fieldMetadataItemUsedInDropdown.type),
                label: fieldMetadataItemUsedInDropdown.label,
                operand: selectedOperandInDropdown,
                displayValue: filterDisplayValue,
                fieldMetadataId: fieldMetadataItemUsedInDropdown.id,
                value: newFilterValue,
                recordFilterGroupId: selectedFilter?.recordFilterGroupId,
                positionInRecordFilterGroup: selectedFilter?.positionInRecordFilterGroup
            });
        }
        resetSelectedItem();
    };
    const optionsInDropdown = selectableOptions?.filter((option)=>option.label.toLowerCase().includes(objectFilterDropdownSearchInput.toLowerCase()));
    const showNoResult = optionsInDropdown?.length === 0;
    const objectRecordsIds = optionsInDropdown.map((option)=>option.id);
    return /*#__PURE__*/ _jsxDEV(SelectableList, {
        selectableListId: componentInstanceId,
        selectableItemIdArray: objectRecordsIds,
        hotkeyScope: SingleRecordPickerHotkeyScope.SingleRecordPicker,
        onEnter: (itemId)=>{
            const option = optionsInDropdown.find((option)=>option.id === itemId);
            if (isDefined(option)) {
                handleMultipleOptionSelectChange(option, !option.isSelected);
            }
        },
        children: [
            /*#__PURE__*/ _jsxDEV(DropdownMenuItemsContainer, {
                hasMaxHeight: true,
                children: optionsInDropdown?.map((option)=>/*#__PURE__*/ _jsxDEV(MenuItemMultiSelect, {
                        selected: option.isSelected,
                        isKeySelected: option.id === selectedItemId,
                        onSelectChange: (selected)=>handleMultipleOptionSelectChange(option, selected),
                        text: option.label,
                        color: option.color,
                        className: ""
                    }, option.id, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownOptionSelect.tsx",
                        lineNumber: 179,
                        columnNumber: 11
                    }, this))
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownOptionSelect.tsx",
                lineNumber: 177,
                columnNumber: 7
            }, this),
            showNoResult && /*#__PURE__*/ _jsxDEV(MenuItem, {
                text: "No results"
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownOptionSelect.tsx",
                lineNumber: 192,
                columnNumber: 24
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownOptionSelect.tsx",
        lineNumber: 166,
        columnNumber: 5
    }, this);
};
_s(ObjectFilterDropdownOptionSelect, "Xn9ygp2noW4ODZI0RX62KhYMe8Y=", false, function() {
    return [
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useAvailableComponentInstanceIdOrThrow,
        useApplyRecordFilter,
        useDropdown,
        useSelectableListStates,
        useSelectableList,
        useRecoilValue,
        useOptionsForSelect,
        useScopedHotkeys
    ];
});
_c = ObjectFilterDropdownOptionSelect;
var _c;
$RefreshReg$(_c, "ObjectFilterDropdownOptionSelect");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownOptionSelect.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownOptionSelect.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,