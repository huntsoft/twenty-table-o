import __vite__cjsImport0__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNonEmptyString = __vite__cjsImport0__sniptt_guards["isNonEmptyString"];
import { generateILikeFiltersForCompositeFields } from "/src/utils/array/generateILikeFiltersForCompositeFields.ts";
import { getFilterTypeFromFieldType } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { convertGreaterThanRatingToArrayOfRatingValues, convertLessThanRatingToArrayOfRatingValues, convertRatingToRatingValue } from "/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRatingInput.tsx";
import { RecordFilterOperand } from "/src/modules/object-record/record-filter/types/RecordFilterOperand.ts";
import { getEmptyRecordGqlOperationFilter } from "/src/modules/object-record/record-filter/utils/getEmptyRecordGqlOperationFilter.ts";
import { resolveDateViewFilterValue } from "/src/modules/views/view-filter-value/utils/resolveDateViewFilterValue.ts";
import { resolveSelectViewFilterValue } from "/src/modules/views/view-filter-value/utils/resolveSelectViewFilterValue.ts";
import { jsonRelationFilterValueSchema } from "/src/modules/views/view-filter-value/validation-schemas/jsonRelationFilterValueSchema.ts";
import { simpleRelationFilterValueSchema } from "/src/modules/views/view-filter-value/validation-schemas/simpleRelationFilterValueSchema.ts";
import { endOfDay, roundToNearestMinutes, startOfDay } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/date-fns.js?v=226f7286";
import { z } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/zod.js?v=226f7286";
import { RecordFilterGroupLogicalOperator } from "/src/modules/object-record/record-filter-group/types/RecordFilterGroupLogicalOperator.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const computeFilterRecordGqlOperationFilter = ({ filterValueDependencies, filter, fieldMetadataItems: fields })=>{
    const correspondingField = fields.find((field)=>field.id === filter.fieldMetadataId);
    const compositeFieldName = filter.subFieldName;
    const isCompositeFieldFiter = isNonEmptyString(compositeFieldName);
    const isEmptinessOperand = [
        RecordFilterOperand.IsEmpty,
        RecordFilterOperand.IsNotEmpty
    ].includes(filter.operand);
    const isDateOperandWithoutValue = [
        RecordFilterOperand.IsInPast,
        RecordFilterOperand.IsInFuture,
        RecordFilterOperand.IsToday
    ].includes(filter.operand);
    if (!correspondingField) {
        return;
    }
    const filterType = getFilterTypeFromFieldType(correspondingField.type);
    const isFilterValueEmpty = !isDefined(filter.value) || filter.value === '';
    const shouldSkipFiltering = !isEmptinessOperand && !isDateOperandWithoutValue && isFilterValueEmpty;
    if (shouldSkipFiltering) {
        return;
    }
    const filterTypesThatHaveNoEmptinessOperand = [
        'BOOLEAN'
    ];
    const filterHasEmptinessOperands = !filterTypesThatHaveNoEmptinessOperand.includes(filterType);
    if (filterHasEmptinessOperands && isEmptinessOperand) {
        const emptyOperationFilter = getEmptyRecordGqlOperationFilter({
            operand: filter.operand,
            correspondingField,
            recordFilter: filter
        });
        return emptyOperationFilter;
    }
    switch(filterType){
        case 'TEXT':
            switch(filter.operand){
                case RecordFilterOperand.Contains:
                    return {
                        [correspondingField.name]: {
                            ilike: `%${filter.value}%`
                        }
                    };
                case RecordFilterOperand.DoesNotContain:
                    return {
                        not: {
                            [correspondingField.name]: {
                                ilike: `%${filter.value}%`
                            }
                        }
                    };
                default:
                    throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
            }
        case 'RAW_JSON':
            switch(filter.operand){
                case RecordFilterOperand.Contains:
                    return {
                        [correspondingField.name]: {
                            like: `%${filter.value}%`
                        }
                    };
                case RecordFilterOperand.DoesNotContain:
                    return {
                        not: {
                            [correspondingField.name]: {
                                like: `%${filter.value}%`
                            }
                        }
                    };
                default:
                    throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
            }
        case 'DATE':
        case 'DATE_TIME':
            {
                const resolvedFilterValue = resolveDateViewFilterValue(filter);
                const now = roundToNearestMinutes(new Date());
                const date = resolvedFilterValue instanceof Date ? resolvedFilterValue : now;
                switch(filter.operand){
                    case RecordFilterOperand.IsAfter:
                        {
                            return {
                                [correspondingField.name]: {
                                    gt: date.toISOString()
                                }
                            };
                        }
                    case RecordFilterOperand.IsBefore:
                        {
                            return {
                                [correspondingField.name]: {
                                    lt: date.toISOString()
                                }
                            };
                        }
                    case RecordFilterOperand.IsRelative:
                        {
                            const dateRange = z.object({
                                start: z.date(),
                                end: z.date()
                            }).safeParse(resolvedFilterValue).data;
                            const defaultDateRange = resolveDateViewFilterValue({
                                value: 'PAST_1_DAY',
                                operand: RecordFilterOperand.IsRelative
                            });
                            if (!defaultDateRange) {
                                throw new Error('Failed to resolve default date range');
                            }
                            const { start, end } = dateRange ?? defaultDateRange;
                            return {
                                and: [
                                    {
                                        [correspondingField.name]: {
                                            gte: start.toISOString()
                                        }
                                    },
                                    {
                                        [correspondingField.name]: {
                                            lte: end.toISOString()
                                        }
                                    }
                                ]
                            };
                        }
                    case RecordFilterOperand.Is:
                        {
                            const isValid = resolvedFilterValue instanceof Date;
                            const date = isValid ? resolvedFilterValue : now;
                            return {
                                and: [
                                    {
                                        [correspondingField.name]: {
                                            lte: endOfDay(date).toISOString()
                                        }
                                    },
                                    {
                                        [correspondingField.name]: {
                                            gte: startOfDay(date).toISOString()
                                        }
                                    }
                                ]
                            };
                        }
                    case RecordFilterOperand.IsInPast:
                        return {
                            [correspondingField.name]: {
                                lte: now.toISOString()
                            }
                        };
                    case RecordFilterOperand.IsInFuture:
                        return {
                            [correspondingField.name]: {
                                gte: now.toISOString()
                            }
                        };
                    case RecordFilterOperand.IsToday:
                        {
                            return {
                                and: [
                                    {
                                        [correspondingField.name]: {
                                            lte: endOfDay(now).toISOString()
                                        }
                                    },
                                    {
                                        [correspondingField.name]: {
                                            gte: startOfDay(now).toISOString()
                                        }
                                    }
                                ]
                            };
                        }
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
                }
            }
        case 'RATING':
            switch(filter.operand){
                case RecordFilterOperand.Is:
                    return {
                        [correspondingField.name]: {
                            eq: convertRatingToRatingValue(parseFloat(filter.value))
                        }
                    };
                case RecordFilterOperand.GreaterThan:
                    return {
                        [correspondingField.name]: {
                            in: convertGreaterThanRatingToArrayOfRatingValues(parseFloat(filter.value))
                        }
                    };
                case RecordFilterOperand.LessThan:
                    return {
                        [correspondingField.name]: {
                            in: convertLessThanRatingToArrayOfRatingValues(parseFloat(filter.value))
                        }
                    };
                default:
                    throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
            }
        case 'NUMBER':
            switch(filter.operand){
                case RecordFilterOperand.GreaterThan:
                    return {
                        [correspondingField.name]: {
                            gte: parseFloat(filter.value)
                        }
                    };
                case RecordFilterOperand.LessThan:
                    return {
                        [correspondingField.name]: {
                            lte: parseFloat(filter.value)
                        }
                    };
                default:
                    throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
            }
        case 'RELATION':
            {
                const { isCurrentWorkspaceMemberSelected, selectedRecordIds } = jsonRelationFilterValueSchema.catch({
                    isCurrentWorkspaceMemberSelected: false,
                    selectedRecordIds: simpleRelationFilterValueSchema.parse(filter.value)
                }).parse(filter.value);
                const recordIds = isCurrentWorkspaceMemberSelected ? [
                    ...selectedRecordIds,
                    filterValueDependencies.currentWorkspaceMemberId
                ] : selectedRecordIds;
                if (recordIds.length === 0) return;
                switch(filter.operand){
                    case RecordFilterOperand.Is:
                        return {
                            [correspondingField.name + 'Id']: {
                                in: recordIds
                            }
                        };
                    case RecordFilterOperand.IsNot:
                        {
                            if (recordIds.length === 0) return;
                            return {
                                or: [
                                    {
                                        not: {
                                            [correspondingField.name + 'Id']: {
                                                in: recordIds
                                            }
                                        }
                                    },
                                    {
                                        [correspondingField.name + 'Id']: {
                                            is: 'NULL'
                                        }
                                    }
                                ]
                            };
                        }
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
                }
            }
        case 'CURRENCY':
            switch(filter.operand){
                case RecordFilterOperand.GreaterThan:
                    return {
                        [correspondingField.name]: {
                            amountMicros: {
                                gte: parseFloat(filter.value) * 1000000
                            }
                        }
                    };
                case RecordFilterOperand.LessThan:
                    return {
                        [correspondingField.name]: {
                            amountMicros: {
                                lte: parseFloat(filter.value) * 1000000
                            }
                        }
                    };
                default:
                    throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
            }
        case 'LINKS':
            {
                const linksFilters = generateILikeFiltersForCompositeFields(filter.value, correspondingField.name, [
                    'primaryLinkLabel',
                    'primaryLinkUrl'
                ]);
                switch(filter.operand){
                    case RecordFilterOperand.Contains:
                        if (!isCompositeFieldFiter) {
                            return {
                                or: linksFilters
                            };
                        } else {
                            return {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        ilike: `%${filter.value}%`
                                    }
                                }
                            };
                        }
                    case RecordFilterOperand.DoesNotContain:
                        if (!isCompositeFieldFiter) {
                            return {
                                and: linksFilters.map((filter)=>{
                                    return {
                                        not: filter
                                    };
                                })
                            };
                        } else {
                            return {
                                not: {
                                    [correspondingField.name]: {
                                        [compositeFieldName]: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                }
                            };
                        }
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
                }
            }
        case 'FULL_NAME':
            {
                const fullNameFilters = generateILikeFiltersForCompositeFields(filter.value, correspondingField.name, [
                    'firstName',
                    'lastName'
                ]);
                switch(filter.operand){
                    case RecordFilterOperand.Contains:
                        if (!isCompositeFieldFiter) {
                            return {
                                or: fullNameFilters
                            };
                        } else {
                            return {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        ilike: `%${filter.value}%`
                                    }
                                }
                            };
                        }
                    case RecordFilterOperand.DoesNotContain:
                        if (!isCompositeFieldFiter) {
                            return {
                                and: fullNameFilters.map((filter)=>{
                                    return {
                                        not: filter
                                    };
                                })
                            };
                        } else {
                            return {
                                not: {
                                    [correspondingField.name]: {
                                        [compositeFieldName]: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                }
                            };
                        }
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
                }
            }
        case 'ADDRESS':
            switch(filter.operand){
                case RecordFilterOperand.Contains:
                    if (!isCompositeFieldFiter) {
                        return {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        addressStreet1: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressStreet2: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressCity: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressState: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressCountry: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressPostcode: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                }
                            ]
                        };
                    } else {
                        return {
                            [correspondingField.name]: {
                                [compositeFieldName]: {
                                    ilike: `%${filter.value}%`
                                }
                            }
                        };
                    }
                case RecordFilterOperand.DoesNotContain:
                    if (!isCompositeFieldFiter) {
                        return {
                            and: [
                                {
                                    not: {
                                        [correspondingField.name]: {
                                            addressStreet1: {
                                                ilike: `%${filter.value}%`
                                            }
                                        }
                                    }
                                },
                                {
                                    not: {
                                        [correspondingField.name]: {
                                            addressStreet2: {
                                                ilike: `%${filter.value}%`
                                            }
                                        }
                                    }
                                },
                                {
                                    not: {
                                        [correspondingField.name]: {
                                            addressCity: {
                                                ilike: `%${filter.value}%`
                                            }
                                        }
                                    }
                                }
                            ]
                        };
                    } else {
                        return {
                            not: {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        ilike: `%${filter.value}%`
                                    }
                                }
                            }
                        };
                    }
                default:
                    throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
            }
        case 'MULTI_SELECT':
            {
                const options = resolveSelectViewFilterValue(filter);
                if (options.length === 0) return;
                switch(filter.operand){
                    case RecordFilterOperand.Contains:
                        return {
                            [correspondingField.name]: {
                                containsAny: options
                            }
                        };
                    case RecordFilterOperand.DoesNotContain:
                        return {
                            or: [
                                {
                                    not: {
                                        [correspondingField.name]: {
                                            containsAny: options
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        isEmptyArray: true
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        is: 'NULL'
                                    }
                                }
                            ]
                        };
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
                }
            }
        case 'SELECT':
            {
                const options = resolveSelectViewFilterValue(filter);
                if (options.length === 0) return;
                switch(filter.operand){
                    case RecordFilterOperand.Is:
                        return {
                            [correspondingField.name]: {
                                in: options
                            }
                        };
                    case RecordFilterOperand.IsNot:
                        return {
                            not: {
                                [correspondingField.name]: {
                                    in: options
                                }
                            }
                        };
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
                }
            }
        case 'ARRAY':
            {
                switch(filter.operand){
                    case RecordFilterOperand.Contains:
                        return {
                            [correspondingField.name]: {
                                containsIlike: `%${filter.value}%`
                            }
                        };
                    case RecordFilterOperand.DoesNotContain:
                        return {
                            not: {
                                [correspondingField.name]: {
                                    containsIlike: `%${filter.value}%`
                                }
                            }
                        };
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
                }
            }
        // TODO: fix this with a new composite field in ViewFilter entity
        case 'ACTOR':
            {
                switch(filter.operand){
                    case RecordFilterOperand.Is:
                        {
                            if (filter.value === '[]') {
                                return;
                            }
                            const parsedRecordIds = JSON.parse(filter.value);
                            return {
                                [correspondingField.name]: {
                                    source: {
                                        in: parsedRecordIds
                                    }
                                }
                            };
                        }
                    case RecordFilterOperand.IsNot:
                        {
                            if (filter.value === '[]') {
                                return;
                            }
                            const parsedRecordIds = JSON.parse(filter.value);
                            if (parsedRecordIds.length === 0) return;
                            return {
                                not: {
                                    [correspondingField.name]: {
                                        source: {
                                            in: parsedRecordIds
                                        }
                                    }
                                }
                            };
                        }
                    case RecordFilterOperand.Contains:
                        return {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        name: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                }
                            ]
                        };
                    case RecordFilterOperand.DoesNotContain:
                        return {
                            and: [
                                {
                                    not: {
                                        [correspondingField.name]: {
                                            name: {
                                                ilike: `%${filter.value}%`
                                            }
                                        }
                                    }
                                }
                            ]
                        };
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filter.label} filter`);
                }
            }
        case 'EMAILS':
            switch(filter.operand){
                case RecordFilterOperand.Contains:
                    return {
                        or: [
                            {
                                [correspondingField.name]: {
                                    primaryEmail: {
                                        ilike: `%${filter.value}%`
                                    }
                                }
                            }
                        ]
                    };
                case RecordFilterOperand.DoesNotContain:
                    return {
                        and: [
                            {
                                not: {
                                    [correspondingField.name]: {
                                        primaryEmail: {
                                            ilike: `%${filter.value}%`
                                        }
                                    }
                                }
                            }
                        ]
                    };
                default:
                    throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
            }
        case 'PHONES':
            {
                const filterValue = filter.value.replace(/[^0-9]/g, '');
                switch(filter.operand){
                    case RecordFilterOperand.Contains:
                        return {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        primaryPhoneNumber: {
                                            ilike: `%${filterValue}%`
                                        }
                                    }
                                }
                            ]
                        };
                    case RecordFilterOperand.DoesNotContain:
                        return {
                            and: [
                                {
                                    not: {
                                        [correspondingField.name]: {
                                            primaryPhoneNumber: {
                                                ilike: `%${filterValue}%`
                                            }
                                        }
                                    }
                                }
                            ]
                        };
                    default:
                        throw new Error(`Unknown operand ${filter.operand} for ${filterType} filter`);
                }
            }
        case 'BOOLEAN':
            {
                return {
                    [correspondingField.name]: {
                        eq: filter.value === 'true'
                    }
                };
            }
        default:
            throw new Error('Unknown filter type');
    }
};
const computeRecordFilterGroupRecordGqlOperationFilter = (filterValueDependencies, filters, fields, recordFilterGroups, currentRecordFilterGroupId)=>{
    const currentRecordFilterGroup = recordFilterGroups.find((recordFilterGroup)=>recordFilterGroup.id === currentRecordFilterGroupId);
    if (!currentRecordFilterGroup) {
        return;
    }
    const recordFiltersInGroup = filters.filter((filter)=>filter.recordFilterGroupId === currentRecordFilterGroupId);
    const groupRecordGqlOperationFilters = recordFiltersInGroup.map((recordFilter)=>computeFilterRecordGqlOperationFilter({
            filterValueDependencies,
            filter: recordFilter,
            fieldMetadataItems: fields
        })).filter(isDefined);
    const subGroupRecordGqlOperationFilters = recordFilterGroups.filter((recordFilterGroup)=>recordFilterGroup.parentRecordFilterGroupId === currentRecordFilterGroupId).map((subViewFilterGroup)=>computeRecordFilterGroupRecordGqlOperationFilter(filterValueDependencies, filters, fields, recordFilterGroups, subViewFilterGroup.id)).filter(isDefined);
    if (currentRecordFilterGroup.logicalOperator === RecordFilterGroupLogicalOperator.AND) {
        return {
            and: [
                ...groupRecordGqlOperationFilters,
                ...subGroupRecordGqlOperationFilters
            ]
        };
    } else if (currentRecordFilterGroup.logicalOperator === RecordFilterGroupLogicalOperator.OR) {
        return {
            or: [
                ...groupRecordGqlOperationFilters,
                ...subGroupRecordGqlOperationFilters
            ]
        };
    } else {
        throw new Error(`Unknown logical operator ${currentRecordFilterGroup.logicalOperator}`);
    }
};
export const computeRecordGqlOperationFilter = ({ fields, filterValueDependencies, recordFilters, recordFilterGroups })=>{
    const regularRecordGqlOperationFilter = recordFilters.filter((filter)=>!isDefined(filter.recordFilterGroupId)).map((regularFilter)=>computeFilterRecordGqlOperationFilter({
            filterValueDependencies,
            filter: regularFilter,
            fieldMetadataItems: fields
        })).filter(isDefined);
    const outermostFilterGroupId = recordFilterGroups.find((recordFilterGroup)=>!recordFilterGroup.parentRecordFilterGroupId)?.id;
    const advancedRecordGqlOperationFilter = computeRecordFilterGroupRecordGqlOperationFilter(filterValueDependencies, recordFilters, fields, recordFilterGroups, outermostFilterGroupId);
    const recordGqlOperationFilters = [
        ...regularRecordGqlOperationFilter,
        advancedRecordGqlOperationFilter
    ].filter(isDefined);
    if (recordGqlOperationFilters.length === 0) {
        return {};
    }
    if (recordGqlOperationFilters.length === 1) {
        return recordGqlOperationFilters[0];
    }
    const recordGqlOperationFilter = {
        and: recordGqlOperationFilters
    };
    return recordGqlOperationFilter;
};

//# sourceMappingURL=data:application/json;base64,