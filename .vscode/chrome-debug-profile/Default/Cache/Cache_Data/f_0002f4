import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import { useOverlayScrollbars } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/overlayscrollbars-react.js?v=226f7286";
import __vite__cjsImport4_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport4_react["useEffect"]; const useRef = __vite__cjsImport4_react["useRef"];
import { getContextByProviderName } from "/src/modules/ui/utilities/scroll/contexts/ScrollWrapperContexts.tsx";
import { ScrollWrapperComponentInstanceContext } from "/src/modules/ui/utilities/scroll/states/contexts/ScrollWrapperComponentInstanceContext.ts";
import { scrollWrapperScrollBottomComponentState } from "/src/modules/ui/utilities/scroll/states/scrollWrappeScrollBottomComponentState.ts";
import { scrollWrapperInstanceComponentState } from "/src/modules/ui/utilities/scroll/states/scrollWrapperInstanceComponentState.ts";
import { scrollWrapperScrollLeftComponentState } from "/src/modules/ui/utilities/scroll/states/scrollWrapperScrollLeftComponentState.ts";
import { scrollWrapperScrollTopComponentState } from "/src/modules/ui/utilities/scroll/states/scrollWrapperScrollTopComponentState.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import { css } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react.js?v=226f7286";
import "/@fs/D:/twenty-table-o/node_modules/overlayscrollbars/styles/overlayscrollbars.css";
const StyledScrollWrapper = styled.div`
  display: flex;
  height: ${({ heightMode })=>{
    switch(heightMode){
        case 'full':
            return '100%';
        case 'fit-content':
            return 'fit-content';
    }
}};
  width: 100%;

  .os-scrollbar-handle {
    background-color: ${({ theme })=>theme.border.color.strong};
  }

  // Keep horizontal scrollbar always visible
  .os-scrollbar-horizontal {
    &.os-scrollbar-auto-hide {
      opacity: 1;
      visibility: visible;
    }
    .os-scrollbar-track {
      visibility: visible !important;
    }
  }

  .os-scrollbar {
    transition:
      opacity 300ms,
      visibility 300ms,
      top 300ms,
      right 300ms,
      bottom 300ms,
      left 300ms;
  }

  ${({ scrollbarVariant })=>scrollbarVariant === 'no-padding' && css`
      .os-scrollbar {
        --os-size: 6px;
        padding: 0px;
      }
    `}
`;
_c = StyledScrollWrapper;
const StyledInnerContainer = styled.div`
  height: 100%;
`;
_c1 = StyledInnerContainer;
export const ScrollWrapper = ({ componentInstanceId, children, className, heightMode = 'full', defaultEnableXScroll = true, defaultEnableYScroll = true, contextProviderName, scrollbarVariant = 'with-padding' })=>{
    _s();
    const scrollableRef = useRef(null);
    const Context = getContextByProviderName(contextProviderName);
    const setScrollTop = useSetRecoilComponentStateV2(scrollWrapperScrollTopComponentState, componentInstanceId);
    const setScrollLeft = useSetRecoilComponentStateV2(scrollWrapperScrollLeftComponentState, componentInstanceId);
    const setScrollBottom = useSetRecoilComponentStateV2(scrollWrapperScrollBottomComponentState, componentInstanceId);
    const handleScroll = (overlayScroll)=>{
        const target = overlayScroll.elements().scrollOffsetElement;
        setScrollTop(target.scrollTop);
        setScrollLeft(target.scrollLeft);
        setScrollBottom(target.scrollHeight - target.clientHeight - target.scrollTop);
    };
    const setOverlayScrollbars = useSetRecoilComponentStateV2(scrollWrapperInstanceComponentState, componentInstanceId);
    const [initialize, instance] = useOverlayScrollbars({
        options: {
            scrollbars: {
                autoHide: 'scroll',
                autoHideDelay: 500
            },
            overflow: {
                x: defaultEnableXScroll ? undefined : 'hidden',
                y: defaultEnableYScroll ? undefined : 'hidden'
            }
        },
        events: {
            updated: (osInstance)=>{
                const { scrollOffsetElement: target, scrollbarVertical, scrollbarHorizontal } = osInstance.elements();
                if (scrollbarVertical !== null) {
                    scrollbarVertical.track.dataset.selectDisable = 'true';
                }
                if (scrollbarHorizontal !== null) {
                    scrollbarHorizontal.track.dataset.selectDisable = 'true';
                }
                setScrollBottom(target.scrollHeight - target.clientHeight - target.scrollTop);
            },
            scroll: (osInstance)=>{
                const { scrollOffsetElement: target, scrollbarVertical } = osInstance.elements();
                // Hide vertical scrollbar by default
                if (scrollbarVertical !== null) {
                    scrollbarVertical.track.style.visibility = 'hidden';
                }
                // Show vertical scrollbar based on scroll direction
                const isVerticalScroll = target.scrollTop !== Number(target.dataset.lastScrollTop || '0');
                if (isVerticalScroll === true && scrollbarVertical !== null && target.scrollHeight > target.clientHeight) {
                    scrollbarVertical.track.style.visibility = 'visible';
                }
                // Update vertical scroll positions
                target.dataset.lastScrollTop = target.scrollTop.toString();
                handleScroll(osInstance);
            }
        }
    });
    useEffect(()=>{
        const currentRef = scrollableRef.current;
        if (currentRef !== null) {
            initialize(currentRef);
        }
        return ()=>{
            // Reset vertical scroll component-specific Recoil state
            setScrollTop(0);
            setOverlayScrollbars(null);
            instance()?.destroy();
        };
    }, [
        initialize,
        instance,
        setScrollTop,
        setOverlayScrollbars
    ]);
    useEffect(()=>{
        setOverlayScrollbars(instance());
    }, [
        instance,
        setOverlayScrollbars
    ]);
    return /*#__PURE__*/ _jsxDEV(ScrollWrapperComponentInstanceContext.Provider, {
        value: {
            instanceId: componentInstanceId
        },
        children: /*#__PURE__*/ _jsxDEV(Context.Provider, {
            value: {
                ref: scrollableRef,
                id: contextProviderName
            },
            children: /*#__PURE__*/ _jsxDEV(StyledScrollWrapper, {
                ref: scrollableRef,
                className: className,
                heightMode: heightMode,
                scrollbarVariant: scrollbarVariant,
                children: /*#__PURE__*/ _jsxDEV(StyledInnerContainer, {
                    children: children
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx",
                    lineNumber: 218,
                    columnNumber: 11
                }, this)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx",
                lineNumber: 212,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx",
            lineNumber: 206,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx",
        lineNumber: 203,
        columnNumber: 5
    }, this);
};
_s(ScrollWrapper, "aS7ejdQjkG3Rf2nLVtA6mLh8gpU=", false, function() {
    return [
        useSetRecoilComponentStateV2,
        useSetRecoilComponentStateV2,
        useSetRecoilComponentStateV2,
        useSetRecoilComponentStateV2,
        useOverlayScrollbars
    ];
});
_c2 = ScrollWrapper;
var _c, _c1, _c2;
$RefreshReg$(_c, "StyledScrollWrapper");
$RefreshReg$(_c1, "StyledInnerContainer");
$RefreshReg$(_c2, "ScrollWrapper");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/ui/utilities/scroll/components/ScrollWrapper.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,