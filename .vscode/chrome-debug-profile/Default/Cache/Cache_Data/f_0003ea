import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import __vite__cjsImport3_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport3_react["useEffect"]; const useRef = __vite__cjsImport3_react["useRef"]; const useState = __vite__cjsImport3_react["useState"];
import __vite__cjsImport4_tsKeyEnum from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/ts-key-enum.js?v=226f7286"; const Key = __vite__cjsImport4_tsKeyEnum["Key"];
import { TextInputV2 } from "/src/modules/ui/input/components/TextInputV2.tsx";
import { useScopedHotkeys } from "/src/modules/ui/utilities/hotkey/hooks/useScopedHotkeys.ts";
import { useListenClickOutside } from "/src/modules/ui/utilities/pointer-event/hooks/useListenClickOutside.ts";
import { splitFullName } from "/src/utils/format/spiltFullName.ts";
import { turnIntoEmptyStringIfWhitespacesOnly } from "/src/utils/string/turnIntoEmptyStringIfWhitespacesOnly.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
const StyledContainer = styled.div`
  display: flex;
  gap: ${({ theme })=>theme.spacing(1)};
  justify-content: inherit;
  width: 100%;
`;
_c = StyledContainer;
const StyledTextInputWrapper = styled.div`
  max-width: 50%;
`;
_c1 = StyledTextInputWrapper;
export const RecordTitleDoubleTextInput = ({ firstValue, secondValue, firstValuePlaceholder, secondValuePlaceholder, hotkeyScope, onClickOutside, onEnter, onEscape, onShiftTab, onTab, onChange, onPaste, sizeVariant })=>{
    _s();
    const [firstInternalValue, setFirstInternalValue] = useState(firstValue);
    const [secondInternalValue, setSecondInternalValue] = useState(secondValue);
    const firstValueInputRef = useRef(null);
    const secondValueInputRef = useRef(null);
    const containerRef = useRef(null);
    useEffect(()=>{
        setFirstInternalValue(firstValue);
        setSecondInternalValue(secondValue);
    }, [
        firstValue,
        secondValue
    ]);
    const handleChange = (newFirstValue, newSecondValue)=>{
        setFirstInternalValue(newFirstValue);
        setSecondInternalValue(newSecondValue);
        onChange?.({
            firstValue: newFirstValue,
            secondValue: newSecondValue
        });
    };
    const [focusPosition, setFocusPosition] = useState('left');
    useScopedHotkeys(Key.Enter, ()=>{
        onEnter({
            firstValue: firstInternalValue,
            secondValue: secondInternalValue
        });
    }, hotkeyScope, [
        onEnter,
        firstInternalValue,
        secondInternalValue
    ]);
    useScopedHotkeys([
        Key.Escape
    ], ()=>{
        onEscape({
            firstValue: firstInternalValue,
            secondValue: secondInternalValue
        });
    }, hotkeyScope, [
        onEscape,
        firstInternalValue,
        secondInternalValue
    ]);
    useScopedHotkeys('tab', ()=>{
        if (focusPosition === 'left') {
            setFocusPosition('right');
            secondValueInputRef.current?.focus();
        } else {
            onTab?.({
                firstValue: firstInternalValue,
                secondValue: secondInternalValue
            });
        }
    }, hotkeyScope, [
        onTab,
        firstInternalValue,
        secondInternalValue,
        focusPosition
    ]);
    useScopedHotkeys('shift+tab', ()=>{
        if (focusPosition === 'right') {
            setFocusPosition('left');
            firstValueInputRef.current?.focus();
        } else {
            onShiftTab?.({
                firstValue: firstInternalValue,
                secondValue: secondInternalValue
            });
        }
    }, hotkeyScope, [
        onShiftTab,
        firstInternalValue,
        secondInternalValue,
        focusPosition
    ]);
    useListenClickOutside({
        refs: [
            containerRef
        ],
        callback: (event)=>{
            onClickOutside?.(event, {
                firstValue: firstInternalValue,
                secondValue: secondInternalValue
            });
        },
        enabled: isDefined(onClickOutside),
        listenerId: 'record-title-double-text-input'
    });
    const handleOnPaste = (event)=>{
        if (firstInternalValue.length > 0 || secondInternalValue.length > 0) {
            return;
        }
        event.preventDefault();
        const name = event.clipboardData.getData('Text');
        const splittedName = splitFullName(name);
        onPaste?.({
            firstValue: splittedName[0],
            secondValue: splittedName[1]
        });
    };
    const handleClickToPreventParentClickEvents = (event)=>{
        event.stopPropagation();
        event.preventDefault();
    };
    return /*#__PURE__*/ _jsxDEV(StyledContainer, {
        ref: containerRef,
        children: [
            /*#__PURE__*/ _jsxDEV(StyledTextInputWrapper, {
                children: /*#__PURE__*/ _jsxDEV(TextInputV2, {
                    autoGrow: true,
                    sizeVariant: sizeVariant,
                    autoComplete: "off",
                    inheritFontStyles: true,
                    autoFocus: true,
                    onFocus: (event)=>{
                        if (isDefined(firstInternalValue)) {
                            event.target.select();
                        }
                        setFocusPosition('left');
                    },
                    ref: firstValueInputRef,
                    placeholder: firstValuePlaceholder,
                    value: firstInternalValue,
                    onChange: (text)=>{
                        handleChange(turnIntoEmptyStringIfWhitespacesOnly(text), secondInternalValue);
                    },
                    onPaste: (event)=>handleOnPaste(event),
                    onClick: handleClickToPreventParentClickEvents
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx",
                    lineNumber: 182,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx",
                lineNumber: 181,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(StyledTextInputWrapper, {
                children: /*#__PURE__*/ _jsxDEV(TextInputV2, {
                    autoGrow: true,
                    sizeVariant: sizeVariant,
                    autoComplete: "off",
                    inheritFontStyles: true,
                    onFocus: (event)=>{
                        if (isDefined(secondInternalValue)) {
                            event.target.select();
                        }
                        setFocusPosition('right');
                    },
                    ref: secondValueInputRef,
                    placeholder: secondValuePlaceholder,
                    value: secondInternalValue,
                    onChange: (text)=>{
                        handleChange(firstInternalValue, turnIntoEmptyStringIfWhitespacesOnly(text));
                    },
                    onClick: handleClickToPreventParentClickEvents
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx",
                    lineNumber: 210,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx",
                lineNumber: 209,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx",
        lineNumber: 180,
        columnNumber: 5
    }, this);
};
_s(RecordTitleDoubleTextInput, "HLLgO7CnVr6qzkU09crCjEyQSfk=", false, function() {
    return [
        useScopedHotkeys,
        useScopedHotkeys,
        useScopedHotkeys,
        useScopedHotkeys,
        useListenClickOutside
    ];
});
_c2 = RecordTitleDoubleTextInput;
var _c, _c1, _c2;
$RefreshReg$(_c, "StyledContainer");
$RefreshReg$(_c1, "StyledTextInputWrapper");
$RefreshReg$(_c2, "RecordTitleDoubleTextInput");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-title-cell/components/RecordTitleDoubleTextInput.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,