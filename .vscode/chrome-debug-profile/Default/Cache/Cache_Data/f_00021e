import { MAX_SEARCH_RESULTS } from "/src/modules/command-menu/constants/MaxSearchResults.ts";
import { search } from "/src/modules/command-menu/graphql/queries/search.ts";
import { usePerformCombinedFindManyRecords } from "/src/modules/object-record/multiple-objects/hooks/usePerformCombinedFindManyRecords.ts";
import { multipleRecordPickerPickableMorphItemsComponentState } from "/src/modules/object-record/record-picker/multiple-record-picker/states/multipleRecordPickerPickableMorphItemsComponentState.ts";
import { multipleRecordPickerSearchFilterComponentState } from "/src/modules/object-record/record-picker/multiple-record-picker/states/multipleRecordPickerSearchFilterComponentState.ts";
import { multipleRecordPickerSearchableObjectMetadataItemsComponentState } from "/src/modules/object-record/record-picker/multiple-record-picker/states/multipleRecordPickerSearchableObjectMetadataItemsComponentState.ts";
import { searchRecordStoreComponentFamilyState } from "/src/modules/object-record/record-picker/multiple-record-picker/states/searchRecordStoreComponentFamilyState.ts";
import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport8__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNonEmptyArray = __vite__cjsImport8__sniptt_guards["isNonEmptyArray"];
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { capitalize, isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useMultipleRecordPickerPerformSearch = ()=>{
    const client = useApolloClient();
    const { performCombinedFindManyRecords } = usePerformCombinedFindManyRecords();
    const performSearch = useRecoilCallback(({ snapshot, set })=>async ({ multipleRecordPickerInstanceId, forceSearchFilter = '', forceSearchableObjectMetadataItems = [], forcePickableMorphItems = [] })=>{
            const { getLoadable } = snapshot;
            const recordPickerSearchFilter = getLoadable(multipleRecordPickerSearchFilterComponentState.atomFamily({
                instanceId: multipleRecordPickerInstanceId
            })).getValue();
            const searchFilter = forceSearchFilter ?? recordPickerSearchFilter;
            const recordPickerSearchableObjectMetadataItems = getLoadable(multipleRecordPickerSearchableObjectMetadataItemsComponentState.atomFamily({
                instanceId: multipleRecordPickerInstanceId
            })).getValue();
            const searchableObjectMetadataItems = forceSearchableObjectMetadataItems.length > 0 ? forceSearchableObjectMetadataItems : recordPickerSearchableObjectMetadataItems;
            const recordPickerPickableMorphItems = getLoadable(multipleRecordPickerPickableMorphItemsComponentState.atomFamily({
                instanceId: multipleRecordPickerInstanceId
            })).getValue();
            const pickableMorphItems = forcePickableMorphItems.length > 0 ? forcePickableMorphItems : recordPickerPickableMorphItems;
            const selectedPickableMorphItems = pickableMorphItems.filter(({ isSelected })=>isSelected);
            const [searchRecordsFilteredOnPickedRecords, searchRecordsExcludingPickedRecords] = await performSearchQueries({
                client,
                searchFilter,
                searchableObjectMetadataItems,
                pickedRecordIds: selectedPickableMorphItems.map(({ recordId })=>recordId)
            });
            const pickedMorphItems = pickableMorphItems.filter(({ isSelected })=>isSelected);
            // We update the existing pickedMorphItems to be matching the search filter
            const updatedPickedMorphItems = pickedMorphItems.map((morphItem)=>{
                const record = searchRecordsFilteredOnPickedRecords.find(({ recordId })=>recordId === morphItem.recordId);
                return {
                    ...morphItem,
                    isMatchingSearchFilter: isDefined(record)
                };
            });
            const searchRecordsFilteredOnPickedRecordsWithoutDuplicates = searchRecordsFilteredOnPickedRecords.filter((searchRecord)=>!updatedPickedMorphItems.some(({ recordId })=>recordId === searchRecord.recordId));
            const searchRecordsExcludingPickedRecordsWithoutDuplicates = searchRecordsExcludingPickedRecords.filter((searchRecord)=>!searchRecordsFilteredOnPickedRecords.some(({ recordId })=>recordId === searchRecord.recordId) && !pickedMorphItems.some(({ recordId })=>recordId === searchRecord.recordId));
            const morphItems = [
                ...updatedPickedMorphItems,
                ...searchRecordsFilteredOnPickedRecordsWithoutDuplicates.map(({ recordId, objectNameSingular })=>({
                        isMatchingSearchFilter: true,
                        isSelected: true,
                        objectMetadataId: searchableObjectMetadataItems.find((objectMetadata)=>objectMetadata.nameSingular === objectNameSingular)?.id,
                        recordId
                    })),
                ...searchRecordsExcludingPickedRecordsWithoutDuplicates.map(({ recordId, objectNameSingular })=>({
                        isMatchingSearchFilter: true,
                        isSelected: false,
                        objectMetadataId: searchableObjectMetadataItems.find((objectMetadata)=>objectMetadata.nameSingular === objectNameSingular)?.id,
                        recordId
                    }))
            ];
            set(multipleRecordPickerPickableMorphItemsComponentState.atomFamily({
                instanceId: multipleRecordPickerInstanceId
            }), morphItems);
            const searchRecords = [
                ...searchRecordsFilteredOnPickedRecords,
                ...searchRecordsExcludingPickedRecordsWithoutDuplicates
            ];
            searchRecords.forEach((searchRecord)=>{
                set(searchRecordStoreComponentFamilyState.atomFamily({
                    instanceId: multipleRecordPickerInstanceId,
                    familyKey: searchRecord.recordId
                }), searchRecord);
            });
            if (searchRecords.length > 0) {
                const filterPerMetadataItemFilteredOnRecordId = Object.fromEntries(searchableObjectMetadataItems.map(({ nameSingular })=>{
                    const recordIdsForMetadataItem = searchRecords.filter(({ objectNameSingular })=>objectNameSingular === nameSingular).map(({ recordId })=>recordId);
                    if (!isNonEmptyArray(recordIdsForMetadataItem)) {
                        return null;
                    }
                    return [
                        `filter${capitalize(nameSingular)}`,
                        {
                            id: {
                                in: recordIdsForMetadataItem
                            }
                        }
                    ];
                }).filter(isDefined));
                const operationSignatures = searchableObjectMetadataItems.filter(({ nameSingular })=>isDefined(filterPerMetadataItemFilteredOnRecordId[`filter${capitalize(nameSingular)}`])).map((objectMetadataItem)=>({
                        objectNameSingular: objectMetadataItem.nameSingular,
                        variables: {
                            filter: filterPerMetadataItemFilteredOnRecordId[`filter${capitalize(objectMetadataItem.nameSingular)}`]
                        }
                    }));
                performCombinedFindManyRecords({
                    operationSignatures
                }).then(({ result })=>{
                    Object.values(result).flat().forEach((objectRecord)=>{
                        const searchRecord = searchRecords.find(({ recordId })=>recordId === objectRecord.id);
                        if (!searchRecord) {
                            return;
                        }
                        set(searchRecordStoreComponentFamilyState.atomFamily({
                            instanceId: multipleRecordPickerInstanceId,
                            familyKey: objectRecord.id
                        }), {
                            ...searchRecord,
                            record: objectRecord
                        });
                    });
                });
            }
        }, [
        client,
        performCombinedFindManyRecords
    ]);
    return {
        performSearch
    };
};
const performSearchQueries = async ({ client, searchFilter, searchableObjectMetadataItems, pickedRecordIds })=>{
    if (searchableObjectMetadataItems.length === 0) {
        return [
            [],
            []
        ];
    }
    const searchRecords = async (filter)=>{
        const { data } = await client.query({
            query: search,
            variables: {
                searchInput: searchFilter,
                includedObjectNameSingulars: searchableObjectMetadataItems.map(({ nameSingular })=>nameSingular),
                filter,
                limit: MAX_SEARCH_RESULTS
            }
        });
        return data.search;
    };
    const searchRecordsExcludingPickedRecords = await searchRecords(pickedRecordIds.length > 0 ? {
        not: {
            id: {
                in: pickedRecordIds
            }
        }
    } : undefined);
    const searchRecordsIncludingPickedRecords = pickedRecordIds.length > 0 ? await searchRecords({
        id: {
            in: pickedRecordIds
        }
    }) : [];
    return [
        searchRecordsIncludingPickedRecords,
        searchRecordsExcludingPickedRecords
    ];
};

//# sourceMappingURL=data:application/json;base64,