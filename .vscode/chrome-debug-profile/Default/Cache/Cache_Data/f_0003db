import { useContextStoreObjectMetadataItemOrThrow } from "/src/modules/context-store/hooks/useContextStoreObjectMetadataItemOrThrow.ts";
import { contextStoreCurrentViewIdComponentState } from "/src/modules/context-store/states/contextStoreCurrentViewIdComponentState.ts";
import { useSetRecordGroups } from "/src/modules/object-record/record-group/hooks/useSetRecordGroups.ts";
import { useRecoilComponentCallbackStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentCallbackStateV2.ts";
import { usePersistViewGroupRecords } from "/src/modules/views/hooks/internal/usePersistViewGroupRecords.ts";
import { useGetViewFromPrefetchState } from "/src/modules/views/hooks/useGetViewFromPrefetchState.ts";
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { isUndefinedOrNull } from "/src/utils/isUndefinedOrNull.ts";
export const useHandleRecordGroupField = ()=>{
    const { createViewGroupRecords, deleteViewGroupRecords } = usePersistViewGroupRecords();
    const currentViewIdCallbackState = useRecoilComponentCallbackStateV2(contextStoreCurrentViewIdComponentState);
    const { objectMetadataItem } = useContextStoreObjectMetadataItemOrThrow();
    const { getViewFromPrefetchState } = useGetViewFromPrefetchState();
    const { setRecordGroupsFromViewGroups } = useSetRecordGroups();
    const handleRecordGroupFieldChange = useRecoilCallback(({ snapshot })=>async (fieldMetadataItem)=>{
            const currentViewId = snapshot.getLoadable(currentViewIdCallbackState).getValue();
            if (!currentViewId) {
                return;
            }
            const view = await getViewFromPrefetchState(currentViewId);
            if (isUndefinedOrNull(view)) {
                return;
            }
            if (isUndefinedOrNull(fieldMetadataItem.options) || fieldMetadataItem.options.length === 0) {
                return;
            }
            const existingGroupKeys = new Set(view.viewGroups.map((group)=>`${group.fieldMetadataId}:${group.fieldValue}`));
            const viewGroupsToCreate = fieldMetadataItem.options// Avoid creation of already existing view groups
            .filter((option)=>!existingGroupKeys.has(`${fieldMetadataItem.id}:${option.value}`))// Alphabetically sort the options by default
            .sort((a, b)=>a.value.localeCompare(b.value)).map((option, index)=>({
                    __typename: 'ViewGroup',
                    id: v4(),
                    fieldValue: option.value,
                    isVisible: true,
                    position: index,
                    fieldMetadataId: fieldMetadataItem.id
                }));
            if (!existingGroupKeys.has(`${fieldMetadataItem.id}:`) && fieldMetadataItem.isNullable === true) {
                viewGroupsToCreate.push({
                    __typename: 'ViewGroup',
                    id: v4(),
                    fieldValue: '',
                    isVisible: true,
                    position: fieldMetadataItem.options.length,
                    fieldMetadataId: fieldMetadataItem.id
                });
            }
            const viewGroupsToDelete = view.viewGroups.filter((group)=>group.fieldMetadataId !== fieldMetadataItem.id);
            const newViewGroupsList = [
                ...view.viewGroups.filter((group)=>group.fieldMetadataId === fieldMetadataItem.id),
                ...viewGroupsToCreate
            ];
            setRecordGroupsFromViewGroups(view.id, newViewGroupsList, objectMetadataItem);
            if (viewGroupsToCreate.length > 0) {
                await createViewGroupRecords({
                    viewGroupsToCreate,
                    viewId: view.id
                });
            }
            if (viewGroupsToDelete.length > 0) {
                await deleteViewGroupRecords(viewGroupsToDelete);
            }
        }, [
        objectMetadataItem,
        currentViewIdCallbackState,
        getViewFromPrefetchState,
        setRecordGroupsFromViewGroups,
        createViewGroupRecords,
        deleteViewGroupRecords
    ]);
    const resetRecordGroupField = useRecoilCallback(({ snapshot })=>async ()=>{
            const currentViewId = snapshot.getLoadable(currentViewIdCallbackState).getValue();
            if (!currentViewId) {
                return;
            }
            const view = await getViewFromPrefetchState(currentViewId);
            if (isUndefinedOrNull(view)) {
                return;
            }
            if (view.viewGroups.length === 0) {
                return;
            }
            await deleteViewGroupRecords(view.viewGroups);
        }, [
        deleteViewGroupRecords,
        currentViewIdCallbackState,
        getViewFromPrefetchState
    ]);
    return {
        handleRecordGroupFieldChange,
        resetRecordGroupField
    };
};

//# sourceMappingURL=data:application/json;base64,