import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import __vite__cjsImport3_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport3_react["useCallback"]; const useMemo = __vite__cjsImport3_react["useMemo"]; const useState = __vite__cjsImport3_react["useState"];
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { IconPlus, LightIconButton } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { isObjectMetadataReadOnly } from "/src/modules/object-metadata/utils/isObjectMetadataReadOnly.ts";
import { useRecordTableContextOrThrow } from "/src/modules/object-record/record-table/contexts/RecordTableContext.ts";
import { useCreateNewIndexRecord } from "/src/modules/object-record/record-table/hooks/useCreateNewIndexRecord.ts";
import { useTableColumns } from "/src/modules/object-record/record-table/hooks/useTableColumns.ts";
import { RecordTableColumnHeadWithDropdown } from "/src/modules/object-record/record-table/record-table-header/components/RecordTableColumnHeadWithDropdown.tsx";
import { isRecordTableScrolledLeftComponentState } from "/src/modules/object-record/record-table/states/isRecordTableScrolledLeftComponentState.ts";
import { resizeFieldOffsetComponentState } from "/src/modules/object-record/record-table/states/resizeFieldOffsetComponentState.ts";
import { tableColumnsComponentState } from "/src/modules/object-record/record-table/states/tableColumnsComponentState.ts";
import { useHasObjectReadOnlyPermission } from "/src/modules/settings/roles/hooks/useHasObjectReadOnlyPermission.ts";
import { useTrackPointer } from "/src/modules/ui/utilities/pointer-event/hooks/useTrackPointer.ts";
import { getSnapshotValue } from "/src/modules/ui/utilities/recoil-scope/utils/getSnapshotValue.ts";
import { useIsMobile } from "/src/modules/ui/utilities/responsive/hooks/useIsMobile.ts";
import { useRecoilComponentCallbackStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentCallbackStateV2.ts";
import { useRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentStateV2.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { mapArrayToObject } from "/src/utils/array/mapArrayToObject.ts";
const COLUMN_MIN_WIDTH = 104;
const StyledColumnHeaderCell = styled.th`
  border-bottom: 1px solid ${({ theme })=>theme.border.color.light};
  color: ${({ theme })=>theme.font.color.tertiary};
  padding: 0;
  text-align: left;
  transition: 0.3s ease;

  background-color: ${({ theme })=>theme.background.primary};
  border-right: 1px solid ${({ theme })=>theme.border.color.light};
  ${({ columnWidth })=>`
      min-width: ${columnWidth}px;
      width: ${columnWidth}px;
      `}
  position: relative;
  user-select: none;
  ${({ theme })=>{
    return `
    &:hover {
      background: ${theme.background.secondary};
    };
    &:active {
      background: ${theme.background.tertiary};
    };
    `;
}};
  ${({ isResizing, theme })=>{
    if (isResizing === true) {
        return `&:after {
        background-color: ${theme.color.blue};
        bottom: 0;
        content: '';
        display: block;
        position: absolute;
        right: -1px;
        top: 0;
        width: 2px;
      }`;
    }
}};

  // TODO: refactor this, each component should own its CSS
  div {
    overflow: hidden;
  }
`;
_c = StyledColumnHeaderCell;
const StyledResizeHandler = styled.div`
  bottom: 0;
  cursor: col-resize;
  padding: 0 ${({ theme })=>theme.spacing(2)};
  position: absolute;
  right: -9px;
  top: 0;
  width: 3px;
  z-index: 1;
`;
_c1 = StyledResizeHandler;
const StyledColumnHeadContainer = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  position: relative;
  z-index: 1;

  & > :first-of-type {
    flex: 1;
  }
`;
_c2 = StyledColumnHeadContainer;
const StyledHeaderIcon = styled.div`
  margin: ${({ theme })=>theme.spacing(1, 1, 1, 1.5)};
`;
_c3 = StyledHeaderIcon;
export const RecordTableHeaderCell = ({ column })=>{
    _s();
    const { objectMetadataItem } = useRecordTableContextOrThrow();
    const resizeFieldOffsetState = useRecoilComponentCallbackStateV2(resizeFieldOffsetComponentState);
    const [resizeFieldOffset, setResizeFieldOffset] = useRecoilComponentStateV2(resizeFieldOffsetComponentState);
    const tableColumns = useRecoilComponentValueV2(tableColumnsComponentState);
    const tableColumnsByKey = useMemo(()=>mapArrayToObject(tableColumns, ({ fieldMetadataId })=>fieldMetadataId), [
        tableColumns
    ]);
    const [initialPointerPositionX, setInitialPointerPositionX] = useState(null);
    const [resizedFieldKey, setResizedFieldKey] = useState(null);
    const { handleColumnsChange } = useTableColumns();
    const handleResizeHandlerStart = useCallback((positionX)=>{
        setInitialPointerPositionX(positionX);
    }, []);
    const [iconVisibility, setIconVisibility] = useState(false);
    const handleResizeHandlerMove = useCallback((positionX)=>{
        if (!initialPointerPositionX) return;
        setResizeFieldOffset(positionX - initialPointerPositionX);
    }, [
        setResizeFieldOffset,
        initialPointerPositionX
    ]);
    const handleResizeHandlerEnd = useRecoilCallback(({ snapshot, set })=>async ()=>{
            if (!resizedFieldKey) return;
            const resizeFieldOffset = getSnapshotValue(snapshot, resizeFieldOffsetState);
            const nextWidth = Math.round(Math.max(tableColumnsByKey[resizedFieldKey].size + resizeFieldOffset, COLUMN_MIN_WIDTH));
            set(resizeFieldOffsetState, 0);
            setInitialPointerPositionX(null);
            setResizedFieldKey(null);
            if (nextWidth !== tableColumnsByKey[resizedFieldKey].size) {
                const nextColumns = tableColumns.map((column)=>column.fieldMetadataId === resizedFieldKey ? {
                        ...column,
                        size: nextWidth
                    } : column);
                await handleColumnsChange(nextColumns);
            }
        }, [
        resizedFieldKey,
        resizeFieldOffsetState,
        tableColumnsByKey,
        setResizedFieldKey,
        tableColumns,
        handleColumnsChange
    ]);
    useTrackPointer({
        shouldTrackPointer: resizedFieldKey !== null,
        onMouseDown: handleResizeHandlerStart,
        onMouseMove: handleResizeHandlerMove,
        onMouseUp: handleResizeHandlerEnd
    });
    const isRecordTableScrolledLeft = useRecoilComponentValueV2(isRecordTableScrolledLeftComponentState);
    const isMobile = useIsMobile();
    const disableColumnResize = column.isLabelIdentifier && isMobile && !isRecordTableScrolledLeft;
    const { createNewIndexRecord } = useCreateNewIndexRecord({
        objectMetadataItem
    });
    const handlePlusButtonClick = ()=>{
        createNewIndexRecord();
    };
    const isReadOnly = isObjectMetadataReadOnly(objectMetadataItem);
    const hasObjectReadOnlyPermission = useHasObjectReadOnlyPermission();
    return /*#__PURE__*/ _jsxDEV(StyledColumnHeaderCell, {
        isResizing: resizedFieldKey === column.fieldMetadataId,
        columnWidth: Math.max(tableColumnsByKey[column.fieldMetadataId].size + (resizedFieldKey === column.fieldMetadataId ? resizeFieldOffset : 0) + 24, COLUMN_MIN_WIDTH),
        onMouseEnter: ()=>setIconVisibility(true),
        onMouseLeave: ()=>setIconVisibility(false),
        children: [
            /*#__PURE__*/ _jsxDEV(StyledColumnHeadContainer, {
                children: [
                    /*#__PURE__*/ _jsxDEV(RecordTableColumnHeadWithDropdown, {
                        column: column
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx",
                        lineNumber: 231,
                        columnNumber: 9
                    }, this),
                    (useIsMobile() || iconVisibility) && !!column.isLabelIdentifier && !isReadOnly && !hasObjectReadOnlyPermission && /*#__PURE__*/ _jsxDEV(StyledHeaderIcon, {
                        children: /*#__PURE__*/ _jsxDEV(LightIconButton, {
                            Icon: IconPlus,
                            size: "small",
                            accent: "tertiary",
                            onClick: handlePlusButtonClick
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx",
                            lineNumber: 237,
                            columnNumber: 15
                        }, this)
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx",
                        lineNumber: 236,
                        columnNumber: 13
                    }, this)
                ]
            }, void 0, true, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx",
                lineNumber: 230,
                columnNumber: 7
            }, this),
            !disableColumnResize && /*#__PURE__*/ _jsxDEV(StyledResizeHandler, {
                className: "cursor-col-resize",
                role: "separator",
                onPointerDown: ()=>{
                    setResizedFieldKey(column.fieldMetadataId);
                }
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx",
                lineNumber: 247,
                columnNumber: 9
            }, this)
        ]
    }, column.fieldMetadataId, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx",
        lineNumber: 218,
        columnNumber: 5
    }, this);
};
_s(RecordTableHeaderCell, "FBRWCUkFg8mgc6PEEV6DofEbvEE=", false, function() {
    return [
        useRecordTableContextOrThrow,
        useRecoilComponentCallbackStateV2,
        useRecoilComponentStateV2,
        useRecoilComponentValueV2,
        useTableColumns,
        useRecoilCallback,
        useTrackPointer,
        useRecoilComponentValueV2,
        useIsMobile,
        useCreateNewIndexRecord,
        useHasObjectReadOnlyPermission,
        useIsMobile
    ];
});
_c4 = RecordTableHeaderCell;
var _c, _c1, _c2, _c3, _c4;
$RefreshReg$(_c, "StyledColumnHeaderCell");
$RefreshReg$(_c1, "StyledResizeHandler");
$RefreshReg$(_c2, "StyledColumnHeadContainer");
$RefreshReg$(_c3, "StyledHeaderIcon");
$RefreshReg$(_c4, "RecordTableHeaderCell");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-header/components/RecordTableHeaderCell.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,