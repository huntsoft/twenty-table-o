import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport1_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport1_react["useCallback"];
import { triggerCreateRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerCreateRecordsOptimisticEffect.ts";
import { triggerDestroyRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerDestroyRecordsOptimisticEffect.ts";
import { triggerUpdateRecordOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffect.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { CoreObjectNameSingular } from "/src/modules/object-metadata/types/CoreObjectNameSingular.ts";
import { useGetRecordFromCache } from "/src/modules/object-record/cache/hooks/useGetRecordFromCache.ts";
import { useCreateOneRecordMutation } from "/src/modules/object-record/hooks/useCreateOneRecordMutation.ts";
import { useDestroyOneRecordMutation } from "/src/modules/object-record/hooks/useDestroyOneRecordMutation.ts";
import { useUpdateOneRecordMutation } from "/src/modules/object-record/hooks/useUpdateOneRecordMutation.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const usePersistViewFilterRecords = ()=>{
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular: CoreObjectNameSingular.ViewFilter
    });
    const getRecordFromCache = useGetRecordFromCache({
        objectNameSingular: CoreObjectNameSingular.ViewFilter
    });
    const { destroyOneRecordMutation } = useDestroyOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewFilter
    });
    const { createOneRecordMutation } = useCreateOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewFilter
    });
    const { updateOneRecordMutation } = useUpdateOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewFilter
    });
    const { objectMetadataItems } = useObjectMetadataItems();
    const apolloClient = useApolloClient();
    const createViewFilterRecords = useCallback((viewFiltersToCreate, view)=>{
        if (viewFiltersToCreate.length === 0) return;
        return Promise.all(viewFiltersToCreate.map((viewFilter)=>apolloClient.mutate({
                mutation: createOneRecordMutation,
                variables: {
                    input: {
                        id: viewFilter.id,
                        fieldMetadataId: viewFilter.fieldMetadataId,
                        viewId: view.id,
                        value: viewFilter.value,
                        displayValue: viewFilter.displayValue,
                        operand: viewFilter.operand,
                        viewFilterGroupId: viewFilter.viewFilterGroupId,
                        positionInViewFilterGroup: viewFilter.positionInViewFilterGroup
                    }
                },
                update: (cache, { data })=>{
                    const record = data?.['createViewFilter'];
                    if (!isDefined(record)) return;
                    triggerCreateRecordsOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        recordsToCreate: [
                            record
                        ],
                        objectMetadataItems
                    });
                }
            })));
    }, [
        apolloClient,
        createOneRecordMutation,
        objectMetadataItem,
        objectMetadataItems
    ]);
    const updateViewFilterRecords = useCallback((viewFiltersToUpdate)=>{
        if (!viewFiltersToUpdate.length) return;
        return Promise.all(viewFiltersToUpdate.map((viewFilter)=>apolloClient.mutate({
                mutation: updateOneRecordMutation,
                variables: {
                    idToUpdate: viewFilter.id,
                    input: {
                        value: viewFilter.value,
                        displayValue: viewFilter.displayValue,
                        operand: viewFilter.operand,
                        positionInViewFilterGroup: viewFilter.positionInViewFilterGroup,
                        viewFilterGroupId: viewFilter.viewFilterGroupId
                    }
                },
                update: (cache, { data })=>{
                    const record = data?.['updateViewFilter'];
                    if (!isDefined(record)) return;
                    const cachedRecord = getRecordFromCache(record.id, cache);
                    if (!isDefined(cachedRecord)) return;
                    triggerUpdateRecordOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        currentRecord: cachedRecord,
                        updatedRecord: record,
                        objectMetadataItems
                    });
                }
            })));
    }, [
        apolloClient,
        getRecordFromCache,
        objectMetadataItem,
        objectMetadataItems,
        updateOneRecordMutation
    ]);
    const deleteViewFilterRecords = useCallback((viewFilterIdsToDelete)=>{
        if (!viewFilterIdsToDelete.length) return;
        return Promise.all(viewFilterIdsToDelete.map((viewFilterId)=>apolloClient.mutate({
                mutation: destroyOneRecordMutation,
                variables: {
                    idToDestroy: viewFilterId
                },
                update: (cache, { data })=>{
                    const record = data?.['destroyViewFilter'];
                    if (!isDefined(record)) return;
                    const cachedRecord = getRecordFromCache(record.id, cache);
                    if (!isDefined(cachedRecord)) return;
                    triggerDestroyRecordsOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        recordsToDestroy: [
                            cachedRecord
                        ],
                        objectMetadataItems
                    });
                }
            })));
    }, [
        apolloClient,
        destroyOneRecordMutation,
        getRecordFromCache,
        objectMetadataItem,
        objectMetadataItems
    ]);
    return {
        createViewFilterRecords,
        updateViewFilterRecords,
        deleteViewFilterRecords
    };
};

//# sourceMappingURL=data:application/json;base64,