import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { FormNumberFieldInput } from "/src/modules/object-record/record-field/form-types/components/FormNumberFieldInput.tsx";
import { FormTextFieldInput } from "/src/modules/object-record/record-field/form-types/components/FormTextFieldInput.tsx";
import { Select } from "/src/modules/ui/input/components/Select.tsx";
import { WorkflowStepBody } from "/src/modules/workflow/workflow-steps/components/WorkflowStepBody.tsx";
import { WorkflowStepHeader } from "/src/modules/workflow/workflow-steps/components/WorkflowStepHeader.tsx";
import { CRON_TRIGGER_INTERVAL_OPTIONS } from "/src/modules/workflow/workflow-trigger/constants/CronTriggerIntervalOptions.ts";
import { getCronTriggerDefaultSettings } from "/src/modules/workflow/workflow-trigger/utils/getCronTriggerDefaultSettings.ts";
import { getTriggerIcon } from "/src/modules/workflow/workflow-trigger/utils/getTriggerIcon.ts";
import { getTriggerDefaultLabel } from "/src/modules/workflow/workflow-trigger/utils/getTriggerLabel.ts";
import { useTheme } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react.js?v=226f7286";
import __vite__cjsImport12__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNumber = __vite__cjsImport12__sniptt_guards["isNumber"];
import __vite__cjsImport13_cronValidate from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/cron-validate.js?v=226f7286"; const cron = __vite__cjsImport13_cronValidate.__esModule ? __vite__cjsImport13_cronValidate.default : __vite__cjsImport13_cronValidate;
import __vite__cjsImport14_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useState = __vite__cjsImport14_react["useState"];
import { useIcons } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const WorkflowEditTriggerCronForm = ({ trigger, triggerOptions })=>{
    _s();
    const theme = useTheme();
    const [errorMessages, setErrorMessages] = useState({});
    const [errorMessagesVisible, setErrorMessagesVisible] = useState(false);
    const { getIcon } = useIcons();
    const headerIcon = getTriggerIcon({
        type: 'CRON'
    });
    const defaultLabel = getTriggerDefaultLabel({
        type: 'CRON'
    }) ?? '';
    const headerTitle = isDefined(trigger.name) ? trigger.name : defaultLabel;
    const headerType = 'Trigger';
    const onBlur = ()=>{
        setErrorMessagesVisible(true);
    };
    return /*#__PURE__*/ _jsxDEV(_Fragment, {
        children: [
            /*#__PURE__*/ _jsxDEV(WorkflowStepHeader, {
                onTitleChange: (newName)=>{
                    if (triggerOptions.readonly === true) {
                        return;
                    }
                    triggerOptions.onTriggerUpdate({
                        ...trigger,
                        name: newName
                    });
                },
                Icon: getIcon(headerIcon),
                iconColor: theme.font.color.tertiary,
                initialTitle: headerTitle,
                headerType: headerType,
                disabled: triggerOptions.readonly
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                lineNumber: 70,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(WorkflowStepBody, {
                children: [
                    /*#__PURE__*/ _jsxDEV(Select, {
                        dropdownId: "workflow-edit-cron-trigger-interval",
                        label: "Trigger interval",
                        fullWidth: true,
                        disabled: triggerOptions.readonly,
                        value: trigger.settings.type,
                        options: CRON_TRIGGER_INTERVAL_OPTIONS,
                        onChange: (newTriggerType)=>{
                            if (triggerOptions.readonly === true) {
                                return;
                            }
                            setErrorMessages({});
                            setErrorMessagesVisible(false);
                            triggerOptions.onTriggerUpdate({
                                ...trigger,
                                settings: getCronTriggerDefaultSettings(newTriggerType)
                            });
                        },
                        withSearchInput: true
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                        lineNumber: 88,
                        columnNumber: 9
                    }, this),
                    trigger.settings.type === 'CUSTOM' && /*#__PURE__*/ _jsxDEV(FormTextFieldInput, {
                        label: "Expression",
                        placeholder: "0 */1 * * *",
                        error: errorMessagesVisible ? errorMessages.CUSTOM : undefined,
                        onBlur: onBlur,
                        hint: "Format: [Minute] [Hour] [Day of Month] [Month] [Day of Week]",
                        readonly: triggerOptions.readonly,
                        defaultValue: trigger.settings.pattern,
                        onChange: (newPattern)=>{
                            if (triggerOptions.readonly === true) {
                                return;
                            }
                            const cronValidator = cron(newPattern);
                            if (cronValidator.isError() === true) {
                                setErrorMessages({
                                    CUSTOM: `Invalid cron pattern, ${cronValidator.getError()[0].replace(/\. \(Input cron:.*$/, '')}`
                                });
                                return;
                            }
                            setErrorMessages((prev)=>({
                                    ...prev,
                                    CUSTOM: undefined
                                }));
                            triggerOptions.onTriggerUpdate({
                                ...trigger,
                                settings: {
                                    ...trigger.settings,
                                    type: 'CUSTOM',
                                    pattern: newPattern
                                }
                            });
                        }
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                        lineNumber: 112,
                        columnNumber: 11
                    }, this),
                    trigger.settings.type === 'DAYS' && /*#__PURE__*/ _jsxDEV(_Fragment, {
                        children: [
                            /*#__PURE__*/ _jsxDEV(FormNumberFieldInput, {
                                label: "Days Between Triggers",
                                error: errorMessagesVisible ? errorMessages.DAYS_day : undefined,
                                onBlur: onBlur,
                                defaultValue: trigger.settings.schedule.day,
                                onChange: (newDay)=>{
                                    if (triggerOptions.readonly === true) {
                                        return;
                                    }
                                    if (!isDefined(newDay)) {
                                        return;
                                    }
                                    if (!isNumber(newDay) || newDay <= 0) {
                                        setErrorMessages((prev)=>({
                                                ...prev,
                                                DAYS_day: `Invalid day value '${newDay}'. Should be integer greater than 1`
                                            }));
                                        return;
                                    }
                                    setErrorMessages((prev)=>({
                                            ...prev,
                                            DAYS_day: undefined
                                        }));
                                    triggerOptions.onTriggerUpdate({
                                        ...trigger,
                                        settings: {
                                            ...trigger.settings,
                                            type: 'DAYS',
                                            schedule: {
                                                day: newDay,
                                                hour: trigger.settings.type === 'DAYS' ? trigger.settings.schedule.hour : 0,
                                                minute: trigger.settings.type === 'DAYS' ? trigger.settings.schedule.minute : 0
                                            }
                                        }
                                    });
                                },
                                placeholder: "Enter number greater than 1",
                                readonly: triggerOptions.readonly
                            }, void 0, false, {
                                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                                lineNumber: 154,
                                columnNumber: 13
                            }, this),
                            /*#__PURE__*/ _jsxDEV(FormNumberFieldInput, {
                                label: "Trigger at Hour",
                                error: errorMessagesVisible ? errorMessages.DAYS_hour : undefined,
                                onBlur: onBlur,
                                defaultValue: trigger.settings.schedule.hour,
                                onChange: (newHour)=>{
                                    if (triggerOptions.readonly === true) {
                                        return;
                                    }
                                    if (!isDefined(newHour)) {
                                        return;
                                    }
                                    if (!isNumber(newHour) || newHour < 0 || newHour > 23) {
                                        setErrorMessages((prev)=>({
                                                ...prev,
                                                DAYS_hour: `Invalid hour value '${newHour}'. Should be integer between 0 and 23`
                                            }));
                                        return;
                                    }
                                    setErrorMessages((prev)=>({
                                            ...prev,
                                            DAYS_hour: undefined
                                        }));
                                    triggerOptions.onTriggerUpdate({
                                        ...trigger,
                                        settings: {
                                            ...trigger.settings,
                                            type: 'DAYS',
                                            schedule: {
                                                day: trigger.settings.type === 'DAYS' ? trigger.settings.schedule.day : 1,
                                                hour: newHour,
                                                minute: trigger.settings.type === 'DAYS' ? trigger.settings.schedule.minute : 0
                                            }
                                        }
                                    });
                                },
                                placeholder: "Enter number between 0 and 23",
                                readonly: triggerOptions.readonly
                            }, void 0, false, {
                                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                                lineNumber: 203,
                                columnNumber: 13
                            }, this),
                            /*#__PURE__*/ _jsxDEV(FormNumberFieldInput, {
                                label: "Trigger at Minute",
                                error: errorMessagesVisible ? errorMessages.DAYS_minute : undefined,
                                onBlur: onBlur,
                                defaultValue: trigger.settings.schedule.minute,
                                onChange: (newMinute)=>{
                                    if (triggerOptions.readonly === true) {
                                        return;
                                    }
                                    if (!isDefined(newMinute)) {
                                        return;
                                    }
                                    if (!isNumber(newMinute) || newMinute < 0 || newMinute > 59) {
                                        setErrorMessages((prev)=>({
                                                ...prev,
                                                DAYS_minute: `Invalid minute value '${newMinute}'. Should be integer between 0 and 59`
                                            }));
                                        return;
                                    }
                                    setErrorMessages((prev)=>({
                                            ...prev,
                                            DAYS_minute: undefined
                                        }));
                                    triggerOptions.onTriggerUpdate({
                                        ...trigger,
                                        settings: {
                                            ...trigger.settings,
                                            type: 'DAYS',
                                            schedule: {
                                                day: trigger.settings.type === 'DAYS' ? trigger.settings.schedule.day : 1,
                                                hour: trigger.settings.type === 'DAYS' ? trigger.settings.schedule.hour : 0,
                                                minute: newMinute
                                            }
                                        }
                                    });
                                },
                                placeholder: "Enter number between 0 and 59",
                                readonly: triggerOptions.readonly
                            }, void 0, false, {
                                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                                lineNumber: 252,
                                columnNumber: 13
                            }, this)
                        ]
                    }, void 0, true),
                    trigger.settings.type === 'HOURS' && /*#__PURE__*/ _jsxDEV(_Fragment, {
                        children: [
                            /*#__PURE__*/ _jsxDEV(FormNumberFieldInput, {
                                label: "Hours Between Triggers",
                                error: errorMessagesVisible ? errorMessages.HOURS_hour : undefined,
                                onBlur: onBlur,
                                defaultValue: trigger.settings.schedule.hour,
                                onChange: (newHour)=>{
                                    if (triggerOptions.readonly === true) {
                                        return;
                                    }
                                    if (!isDefined(newHour)) {
                                        return;
                                    }
                                    if (!isNumber(newHour) || newHour <= 0) {
                                        setErrorMessages((prev)=>({
                                                ...prev,
                                                HOURS_hour: `Invalid hour value '${newHour}'. Should be integer greater than 1`
                                            }));
                                        return;
                                    }
                                    setErrorMessages((prev)=>({
                                            ...prev,
                                            HOURS_hour: undefined
                                        }));
                                    triggerOptions.onTriggerUpdate({
                                        ...trigger,
                                        settings: {
                                            ...trigger.settings,
                                            type: 'HOURS',
                                            schedule: {
                                                hour: newHour,
                                                minute: trigger.settings.type === 'HOURS' ? trigger.settings.schedule.minute : 0
                                            }
                                        }
                                    });
                                },
                                placeholder: "Enter number greater than 1",
                                readonly: triggerOptions.readonly
                            }, void 0, false, {
                                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                                lineNumber: 307,
                                columnNumber: 13
                            }, this),
                            /*#__PURE__*/ _jsxDEV(FormNumberFieldInput, {
                                label: "Trigger at Minute",
                                error: errorMessagesVisible ? errorMessages.HOURS_minute : undefined,
                                onBlur: onBlur,
                                defaultValue: trigger.settings.schedule.minute,
                                onChange: (newMinute)=>{
                                    if (triggerOptions.readonly === true) {
                                        return;
                                    }
                                    if (!isDefined(newMinute)) {
                                        return;
                                    }
                                    if (!isNumber(newMinute) || newMinute < 0 || newMinute > 59) {
                                        setErrorMessages((prev)=>({
                                                ...prev,
                                                HOURS_minute: `Invalid minute value '${newMinute}'. Should be integer between 0 and 59`
                                            }));
                                        return;
                                    }
                                    setErrorMessages((prev)=>({
                                            ...prev,
                                            HOURS_minute: undefined
                                        }));
                                    triggerOptions.onTriggerUpdate({
                                        ...trigger,
                                        settings: {
                                            ...trigger.settings,
                                            type: 'HOURS',
                                            schedule: {
                                                hour: trigger.settings.type === 'HOURS' ? trigger.settings.schedule.hour : 1,
                                                minute: newMinute
                                            }
                                        }
                                    });
                                },
                                placeholder: "Enter number between 0 and 59",
                                readonly: triggerOptions.readonly
                            }, void 0, false, {
                                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                                lineNumber: 354,
                                columnNumber: 13
                            }, this)
                        ]
                    }, void 0, true),
                    trigger.settings.type === 'MINUTES' && /*#__PURE__*/ _jsxDEV(FormNumberFieldInput, {
                        label: "Minutes Between Triggers",
                        error: errorMessagesVisible ? errorMessages.MINUTES : undefined,
                        onBlur: onBlur,
                        defaultValue: trigger.settings.schedule.minute,
                        onChange: (newMinute)=>{
                            if (triggerOptions.readonly === true) {
                                return;
                            }
                            if (!isDefined(newMinute)) {
                                return;
                            }
                            if (!isNumber(newMinute) || newMinute <= 0) {
                                setErrorMessages({
                                    MINUTES: `Invalid minute value '${newMinute}'. Should be integer greater than 1`
                                });
                                return;
                            }
                            setErrorMessages((prev)=>({
                                    ...prev,
                                    MINUTES: undefined
                                }));
                            triggerOptions.onTriggerUpdate({
                                ...trigger,
                                settings: {
                                    ...trigger.settings,
                                    type: 'MINUTES',
                                    schedule: {
                                        minute: newMinute
                                    }
                                }
                            });
                        },
                        placeholder: "Enter number greater than 1",
                        readonly: triggerOptions.readonly
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                        lineNumber: 404,
                        columnNumber: 11
                    }, this)
                ]
            }, void 0, true, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx",
                lineNumber: 87,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
};
_s(WorkflowEditTriggerCronForm, "MhvbB11BpnGh1R3I1f73fTZH8d4=", false, function() {
    return [
        useTheme,
        useIcons
    ];
});
_c = WorkflowEditTriggerCronForm;
var _c;
$RefreshReg$(_c, "WorkflowEditTriggerCronForm");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-trigger/components/WorkflowEditTriggerCronForm.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,