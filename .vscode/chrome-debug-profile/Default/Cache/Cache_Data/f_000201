import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-table/record-table-body/components/RecordTableNoRecordGroupBodyEffect.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-body/components/RecordTableNoRecordGroupBodyEffect.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport2_react["useEffect"]; const useState = __vite__cjsImport2_react["useState"];
import { useRecoilState, useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { useDebouncedCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/use-debounce.js?v=226f7286";
import { currentWorkspaceMemberState } from "/src/modules/auth/states/currentWorkspaceMemberState.ts";
import { lastShowPageRecordIdState } from "/src/modules/object-record/record-field/states/lastShowPageRecordId.ts";
import { useLazyLoadRecordIndexTable } from "/src/modules/object-record/record-index/hooks/useLazyLoadRecordIndexTable.ts";
import { ROW_HEIGHT } from "/src/modules/object-record/record-table/constants/RowHeight.ts";
import { useRecordTableContextOrThrow } from "/src/modules/object-record/record-table/contexts/RecordTableContext.ts";
import { hasRecordTableFetchedAllRecordsComponentStateV2 } from "/src/modules/object-record/record-table/states/hasRecordTableFetchedAllRecordsComponentStateV2.ts";
import { tableEncounteredUnrecoverableErrorComponentState } from "/src/modules/object-record/record-table/states/tableEncounteredUnrecoverableErrorComponentState.ts";
import { tableLastRowVisibleComponentState } from "/src/modules/object-record/record-table/states/tableLastRowVisibleComponentState.ts";
import { isFetchingMoreRecordsFamilyState } from "/src/modules/object-record/states/isFetchingMoreRecordsFamilyState.ts";
import { useRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentStateV2.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import __vite__cjsImport17__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNonEmptyString = __vite__cjsImport17__sniptt_guards["isNonEmptyString"]; const isNull = __vite__cjsImport17__sniptt_guards["isNull"];
import { useScrollToPosition } from "/src/hooks/useScrollToPosition.ts";
export const RecordTableNoRecordGroupBodyEffect = ()=>{
    _s();
    const { objectNameSingular } = useRecordTableContextOrThrow();
    const currentWorkspaceMember = useRecoilValue(currentWorkspaceMemberState);
    const [hasInitializedScroll, setHasInitializedScroll] = useState(false);
    const { findManyRecords, fetchMoreRecords, records, totalCount, setRecordTableData, loading, queryStateIdentifier, hasNextPage } = useLazyLoadRecordIndexTable(objectNameSingular);
    const isFetchingMoreObjects = useRecoilValue(isFetchingMoreRecordsFamilyState(queryStateIdentifier));
    const tableLastRowVisible = useRecoilComponentValueV2(tableLastRowVisibleComponentState);
    const [encounteredUnrecoverableError, setEncounteredUnrecoverableError] = useRecoilComponentStateV2(tableEncounteredUnrecoverableErrorComponentState);
    const setHasRecordTableFetchedAllRecordsComponents = useSetRecoilComponentStateV2(hasRecordTableFetchedAllRecordsComponentStateV2);
    const [lastShowPageRecordId, setLastShowPageRecordId] = useRecoilState(lastShowPageRecordIdState);
    const [hasInitialized, setHasInitialized] = useState(false);
    const { scrollToPosition } = useScrollToPosition();
    useEffect(()=>{
        if (isNonEmptyString(lastShowPageRecordId) && !hasInitializedScroll) {
            const isRecordAlreadyFetched = records.some((record)=>record.id === lastShowPageRecordId);
            if (isRecordAlreadyFetched) {
                const recordPosition = records.findIndex((record)=>record.id === lastShowPageRecordId);
                const positionInPx = recordPosition * ROW_HEIGHT;
                scrollToPosition(positionInPx);
                setHasInitializedScroll(true);
            }
        }
    }, [
        loading,
        lastShowPageRecordId,
        records,
        scrollToPosition,
        hasInitializedScroll,
        setLastShowPageRecordId
    ]);
    useEffect(()=>{
        if (!loading) {
            setRecordTableData({
                records,
                totalCount
            });
        }
    }, [
        records,
        totalCount,
        setRecordTableData,
        loading
    ]);
    const fetchMoreDebouncedIfRequested = useDebouncedCallback(async ()=>{
        // We are debouncing here to give the user some room to scroll if they want to within this throttle window
        return await fetchMoreRecords();
    }, 100);
    useEffect(()=>{
        const allRecordsHaveBeenFetched = !hasNextPage;
        setHasRecordTableFetchedAllRecordsComponents(allRecordsHaveBeenFetched);
    }, [
        hasNextPage,
        setHasRecordTableFetchedAllRecordsComponents
    ]);
    useEffect(()=>{
        (async ()=>{
            if (!isFetchingMoreObjects && tableLastRowVisible && hasNextPage && !encounteredUnrecoverableError) {
                const result = await fetchMoreDebouncedIfRequested();
                const isForbidden = result?.error?.graphQLErrors.some((e)=>e.extensions?.code === 'FORBIDDEN') ?? false;
                if (isForbidden) {
                    setEncounteredUnrecoverableError(true);
                }
            }
        })();
    }, [
        hasNextPage,
        records,
        lastShowPageRecordId,
        scrollToPosition,
        fetchMoreDebouncedIfRequested,
        isFetchingMoreObjects,
        tableLastRowVisible,
        encounteredUnrecoverableError,
        setEncounteredUnrecoverableError
    ]);
    useEffect(()=>{
        if (isNull(currentWorkspaceMember)) {
            return;
        }
        if (!hasInitialized) {
            findManyRecords();
            setHasInitialized(true);
        }
    }, [
        currentWorkspaceMember,
        findManyRecords,
        hasInitialized
    ]);
    return /*#__PURE__*/ _jsxDEV(_Fragment, {}, void 0, false);
};
_s(RecordTableNoRecordGroupBodyEffect, "Bew1trvRml15j5LUOD/XqpekGt0=", false, function() {
    return [
        useRecordTableContextOrThrow,
        useRecoilValue,
        useLazyLoadRecordIndexTable,
        useRecoilValue,
        useRecoilComponentValueV2,
        useRecoilComponentStateV2,
        useSetRecoilComponentStateV2,
        useRecoilState,
        useScrollToPosition,
        useDebouncedCallback
    ];
});
_c = RecordTableNoRecordGroupBodyEffect;
var _c;
$RefreshReg$(_c, "RecordTableNoRecordGroupBodyEffect");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-body/components/RecordTableNoRecordGroupBodyEffect.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-body/components/RecordTableNoRecordGroupBodyEffect.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,