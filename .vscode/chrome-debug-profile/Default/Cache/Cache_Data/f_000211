import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useDeleteMultipleRecordsAction.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useDeleteMultipleRecordsAction.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { contextStoreCurrentViewIdComponentState } from "/src/modules/context-store/states/contextStoreCurrentViewIdComponentState.ts";
import { contextStoreFiltersComponentState } from "/src/modules/context-store/states/contextStoreFiltersComponentState.ts";
import { contextStoreNumberOfSelectedRecordsComponentState } from "/src/modules/context-store/states/contextStoreNumberOfSelectedRecordsComponentState.ts";
import { contextStoreTargetedRecordsRuleComponentState } from "/src/modules/context-store/states/contextStoreTargetedRecordsRuleComponentState.ts";
import { computeContextStoreFilters } from "/src/modules/context-store/utils/computeContextStoreFilters.ts";
import { BACKEND_BATCH_REQUEST_MAX_COUNT } from "/src/modules/object-record/constants/BackendBatchRequestMaxCount.ts";
import { DEFAULT_QUERY_PAGE_SIZE } from "/src/modules/object-record/constants/DefaultQueryPageSize.ts";
import { useDeleteManyRecords } from "/src/modules/object-record/hooks/useDeleteManyRecords.ts";
import { useLazyFetchAllRecords } from "/src/modules/object-record/hooks/useLazyFetchAllRecords.ts";
import { useCheckIsSoftDeleteFilter } from "/src/modules/object-record/record-filter/hooks/useCheckIsSoftDeleteFilter.ts";
import { useFilterValueDependencies } from "/src/modules/object-record/record-filter/hooks/useFilterValueDependencies.ts";
import { useRecordTable } from "/src/modules/object-record/record-table/hooks/useRecordTable.ts";
import { getRecordIndexIdFromObjectNamePluralAndViewId } from "/src/modules/object-record/utils/getRecordIndexIdFromObjectNamePluralAndViewId.ts";
import { useHasObjectReadOnlyPermission } from "/src/modules/settings/roles/hooks/useHasObjectReadOnlyPermission.ts";
import { ConfirmationModal } from "/src/modules/ui/layout/modal/components/ConfirmationModal.tsx";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { i18n as $_i18n } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_core.js?v=226f7286";
import __vite__cjsImport19_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport19_react["useCallback"]; const useState = __vite__cjsImport19_react["useState"];
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useDeleteMultipleRecordsAction = ({ objectMetadataItem })=>{
    _s();
    const [isDeleteRecordsModalOpen, setIsDeleteRecordsModalOpen] = useState(false);
    const contextStoreCurrentViewId = useRecoilComponentValueV2(contextStoreCurrentViewIdComponentState);
    if (!contextStoreCurrentViewId) {
        throw new Error('Current view ID is not defined');
    }
    const hasObjectReadOnlyPermission = useHasObjectReadOnlyPermission();
    const { resetTableRowSelection } = useRecordTable({
        recordTableId: getRecordIndexIdFromObjectNamePluralAndViewId(objectMetadataItem.namePlural, contextStoreCurrentViewId)
    });
    const { deleteManyRecords } = useDeleteManyRecords({
        objectNameSingular: objectMetadataItem.nameSingular
    });
    const contextStoreNumberOfSelectedRecords = useRecoilComponentValueV2(contextStoreNumberOfSelectedRecordsComponentState);
    const contextStoreTargetedRecordsRule = useRecoilComponentValueV2(contextStoreTargetedRecordsRuleComponentState);
    const contextStoreFilters = useRecoilComponentValueV2(contextStoreFiltersComponentState);
    const { filterValueDependencies } = useFilterValueDependencies();
    const graphqlFilter = computeContextStoreFilters(contextStoreTargetedRecordsRule, contextStoreFilters, objectMetadataItem, filterValueDependencies);
    const { checkIsSoftDeleteFilter } = useCheckIsSoftDeleteFilter();
    const isDeletedFilterActive = contextStoreFilters.some(checkIsSoftDeleteFilter);
    const { fetchAllRecords: fetchAllRecordIds } = useLazyFetchAllRecords({
        objectNameSingular: objectMetadataItem.nameSingular,
        filter: graphqlFilter,
        limit: DEFAULT_QUERY_PAGE_SIZE,
        recordGqlFields: {
            id: true
        }
    });
    const handleDeleteClick = useCallback(async ()=>{
        const recordsToDelete = await fetchAllRecordIds();
        const recordIdsToDelete = recordsToDelete.map((record)=>record.id);
        resetTableRowSelection();
        await deleteManyRecords({
            recordIdsToDelete
        });
    }, [
        deleteManyRecords,
        fetchAllRecordIds,
        resetTableRowSelection
    ]);
    const isRemoteObject = objectMetadataItem.isRemote;
    const shouldBeRegistered = !hasObjectReadOnlyPermission && !isRemoteObject && !isDeletedFilterActive && isDefined(contextStoreNumberOfSelectedRecords) && contextStoreNumberOfSelectedRecords < BACKEND_BATCH_REQUEST_MAX_COUNT && contextStoreNumberOfSelectedRecords > 0;
    const onClick = ()=>{
        if (!shouldBeRegistered) {
            return;
        }
        setIsDeleteRecordsModalOpen(true);
    };
    const confirmationModal = /*#__PURE__*/ _jsxDEV(ConfirmationModal, {
        isOpen: isDeleteRecordsModalOpen,
        setIsOpen: setIsDeleteRecordsModalOpen,
        title: 'Delete Records',
        subtitle: $_i18n._({
            id: "2BZAqa",
            message: "Are you sure you want to delete these records? They can be recovered from the Command menu."
        }),
        onConfirmClick: handleDeleteClick,
        confirmButtonText: 'Delete Records'
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useDeleteMultipleRecordsAction.tsx",
        lineNumber: 113,
        columnNumber: 7
    }, this);
    return {
        shouldBeRegistered,
        onClick,
        ConfirmationModal: confirmationModal
    };
};
_s(useDeleteMultipleRecordsAction, "YzeLEwjs2sEIZqJhgP1QJyKdMjI=", false, function() {
    return [
        useRecoilComponentValueV2,
        useHasObjectReadOnlyPermission,
        useRecordTable,
        useDeleteManyRecords,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useFilterValueDependencies,
        useCheckIsSoftDeleteFilter,
        useLazyFetchAllRecords
    ];
});


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useDeleteMultipleRecordsAction.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useDeleteMultipleRecordsAction.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,