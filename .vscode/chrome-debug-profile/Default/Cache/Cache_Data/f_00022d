import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRecordSelect.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRecordSelect.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { getFilterTypeFromFieldType, getRelationObjectMetadataNameSingular } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { ObjectFilterDropdownRecordPinnedItems } from "/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRecordPinnedItems.tsx";
import { CURRENT_WORKSPACE_MEMBER_SELECTABLE_ITEM_ID } from "/src/modules/object-record/object-filter-dropdown/constants/CurrentWorkspaceMemberSelectableItemId.ts";
import { fieldMetadataItemUsedInDropdownComponentSelector } from "/src/modules/object-record/object-filter-dropdown/states/fieldMetadataItemUsedInDropdownComponentSelector.ts";
import { objectFilterDropdownSearchInputComponentState } from "/src/modules/object-record/object-filter-dropdown/states/objectFilterDropdownSearchInputComponentState.ts";
import { selectedFilterComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedFilterComponentState.ts";
import { selectedOperandInDropdownComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedOperandInDropdownComponentState.ts";
import { useApplyRecordFilter } from "/src/modules/object-record/record-filter/hooks/useApplyRecordFilter.ts";
import { currentRecordFiltersComponentState } from "/src/modules/object-record/record-filter/states/currentRecordFiltersComponentState.ts";
import { findDuplicateRecordFilterInNonAdvancedRecordFilters } from "/src/modules/object-record/record-filter/utils/findDuplicateRecordFilterInNonAdvancedRecordFilters.ts";
import { SingleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/single-record-picker/types/SingleRecordPickerHotkeyScope.ts";
import { MultipleSelectDropdown } from "/src/modules/object-record/select/components/MultipleSelectDropdown.tsx";
import { useRecordsForSelect } from "/src/modules/object-record/select/hooks/useRecordsForSelect.ts";
import { DropdownMenuSeparator } from "/src/modules/ui/layout/dropdown/components/DropdownMenuSeparator.tsx";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { jsonRelationFilterValueSchema } from "/src/modules/views/view-filter-value/validation-schemas/jsonRelationFilterValueSchema.ts";
import { simpleRelationFilterValueSchema } from "/src/modules/views/view-filter-value/validation-schemas/simpleRelationFilterValueSchema.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { IconUserCircle } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
export const EMPTY_FILTER_VALUE = JSON.stringify({
    isCurrentWorkspaceMemberSelected: false,
    selectedRecordIds: []
});
export const MAX_RECORDS_TO_DISPLAY = 3;
export const ObjectFilterDropdownRecordSelect = ({ viewComponentId, recordFilterId })=>{
    _s();
    const fieldMetadataItemUsedInFilterDropdown = useRecoilComponentValueV2(fieldMetadataItemUsedInDropdownComponentSelector);
    const selectedOperandInDropdown = useRecoilComponentValueV2(selectedOperandInDropdownComponentState);
    const selectedFilter = useRecoilComponentValueV2(selectedFilterComponentState);
    const objectFilterDropdownSearchInput = useRecoilComponentValueV2(objectFilterDropdownSearchInputComponentState);
    const currentRecordFilters = useRecoilComponentValueV2(currentRecordFiltersComponentState);
    const { applyRecordFilter } = useApplyRecordFilter(viewComponentId);
    const { isCurrentWorkspaceMemberSelected } = jsonRelationFilterValueSchema.catch({
        isCurrentWorkspaceMemberSelected: false,
        selectedRecordIds: simpleRelationFilterValueSchema.parse(selectedFilter?.value)
    }).parse(selectedFilter?.value);
    if (!isDefined(fieldMetadataItemUsedInFilterDropdown)) {
        throw new Error('fieldMetadataItemUsedInFilterDropdown is not defined');
    }
    const objectNameSingular = getRelationObjectMetadataNameSingular({
        field: fieldMetadataItemUsedInFilterDropdown
    });
    if (!isDefined(objectNameSingular)) {
        throw new Error('relationObjectMetadataNameSingular is not defined');
    }
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const objectLabelPlural = objectMetadataItem?.labelPlural;
    if (!isDefined(objectNameSingular)) {
        throw new Error('objectNameSingular is not defined');
    }
    const firstSimpleRecordFilterForFieldMetadataItemUsedInDropdown = currentRecordFilters.find((filter)=>filter.fieldMetadataId === fieldMetadataItemUsedInFilterDropdown?.id && !isDefined(filter.recordFilterGroupId));
    const recordFilterPassedInProps = currentRecordFilters.find((filter)=>filter.id === recordFilterId);
    const recordFilterUsedInDropdown = isDefined(recordFilterId) ? recordFilterPassedInProps : firstSimpleRecordFilterForFieldMetadataItemUsedInDropdown;
    const { selectedRecordIds } = jsonRelationFilterValueSchema.catch({
        isCurrentWorkspaceMemberSelected: false,
        selectedRecordIds: simpleRelationFilterValueSchema.parse(recordFilterUsedInDropdown?.value)
    }).parse(recordFilterUsedInDropdown?.value);
    const { loading, filteredSelectedRecords, recordsToSelect, selectedRecords } = useRecordsForSelect({
        searchFilterText: objectFilterDropdownSearchInput,
        selectedIds: selectedRecordIds,
        objectNameSingular,
        limit: 10
    });
    const currentWorkspaceMemberSelectableItem = {
        id: CURRENT_WORKSPACE_MEMBER_SELECTABLE_ITEM_ID,
        name: 'Me',
        isSelected: isCurrentWorkspaceMemberSelected ?? false,
        AvatarIcon: IconUserCircle
    };
    const pinnedSelectableItems = objectNameSingular === 'workspaceMember' ? [
        currentWorkspaceMemberSelectableItem
    ] : [];
    const filteredPinnedSelectableItems = pinnedSelectableItems.filter((item)=>item.name.toLowerCase().includes(objectFilterDropdownSearchInput.toLowerCase()));
    const handleMultipleRecordSelectChange = (itemToSelect, isNewSelectedValue)=>{
        if (loading) {
            return;
        }
        const isItemCurrentWorkspaceMember = itemToSelect.id === CURRENT_WORKSPACE_MEMBER_SELECTABLE_ITEM_ID;
        const selectedRecordIdsWithAddedRecord = [
            ...selectedRecordIds,
            itemToSelect.id
        ];
        const selectedRecordIdsWithRemovedRecord = selectedRecordIds.filter((id)=>id !== itemToSelect.id);
        const newSelectedRecordIds = isItemCurrentWorkspaceMember ? selectedRecordIds : isNewSelectedValue ? selectedRecordIdsWithAddedRecord : selectedRecordIdsWithRemovedRecord;
        const newIsCurrentWorkspaceMemberSelected = isItemCurrentWorkspaceMember ? isNewSelectedValue : isCurrentWorkspaceMemberSelected;
        const selectedRecordNames = [
            ...recordsToSelect,
            ...selectedRecords,
            ...filteredSelectedRecords
        ].filter((record, index, self)=>self.findIndex((r)=>r.id === record.id) === index).filter((record)=>newSelectedRecordIds.includes(record.id)).map((record)=>record.name);
        const selectedPinnedItemNames = newIsCurrentWorkspaceMemberSelected ? [
            currentWorkspaceMemberSelectableItem.name
        ] : [];
        const selectedItemNames = [
            ...selectedPinnedItemNames,
            ...selectedRecordNames
        ];
        const filterDisplayValue = selectedItemNames.length > MAX_RECORDS_TO_DISPLAY ? `${selectedItemNames.length} ${objectLabelPlural.toLowerCase()}` : selectedItemNames.join(', ');
        if (isDefined(selectedOperandInDropdown)) {
            const newFilterValue = newSelectedRecordIds.length > 0 || newIsCurrentWorkspaceMemberSelected ? JSON.stringify({
                isCurrentWorkspaceMemberSelected: newIsCurrentWorkspaceMemberSelected,
                selectedRecordIds: newSelectedRecordIds
            }) : '';
            const duplicateFilterInCurrentRecordFilters = findDuplicateRecordFilterInNonAdvancedRecordFilters({
                recordFilters: currentRecordFilters,
                fieldMetadataItemId: fieldMetadataItemUsedInFilterDropdown.id
            });
            const filterIsAlreadyInCurrentRecordFilters = isDefined(duplicateFilterInCurrentRecordFilters);
            if (filterIsAlreadyInCurrentRecordFilters && !isDefined(recordFilterId)) {
                applyRecordFilter({
                    id: duplicateFilterInCurrentRecordFilters.id,
                    type: getFilterTypeFromFieldType(fieldMetadataItemUsedInFilterDropdown.type),
                    label: fieldMetadataItemUsedInFilterDropdown.label,
                    operand: selectedOperandInDropdown,
                    displayValue: filterDisplayValue,
                    fieldMetadataId: fieldMetadataItemUsedInFilterDropdown.id,
                    value: newFilterValue,
                    recordFilterGroupId: duplicateFilterInCurrentRecordFilters.recordFilterGroupId,
                    positionInRecordFilterGroup: duplicateFilterInCurrentRecordFilters.positionInRecordFilterGroup
                });
            } else {
                applyRecordFilter({
                    id: selectedFilter?.id ? selectedFilter.id : v4(),
                    type: getFilterTypeFromFieldType(fieldMetadataItemUsedInFilterDropdown.type),
                    label: fieldMetadataItemUsedInFilterDropdown.label,
                    operand: selectedOperandInDropdown,
                    displayValue: filterDisplayValue,
                    fieldMetadataId: fieldMetadataItemUsedInFilterDropdown.id,
                    value: newFilterValue,
                    recordFilterGroupId: selectedFilter?.recordFilterGroupId,
                    positionInRecordFilterGroup: selectedFilter?.positionInRecordFilterGroup
                });
            }
        }
    };
    return /*#__PURE__*/ _jsxDEV(_Fragment, {
        children: [
            filteredPinnedSelectableItems.length > 0 && /*#__PURE__*/ _jsxDEV(_Fragment, {
                children: [
                    /*#__PURE__*/ _jsxDEV(ObjectFilterDropdownRecordPinnedItems, {
                        selectableItems: filteredPinnedSelectableItems,
                        onChange: handleMultipleRecordSelectChange
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRecordSelect.tsx",
                        lineNumber: 262,
                        columnNumber: 11
                    }, this),
                    /*#__PURE__*/ _jsxDEV(DropdownMenuSeparator, {}, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRecordSelect.tsx",
                        lineNumber: 266,
                        columnNumber: 11
                    }, this)
                ]
            }, void 0, true),
            /*#__PURE__*/ _jsxDEV(MultipleSelectDropdown, {
                selectableListId: "object-filter-record-select-id",
                hotkeyScope: SingleRecordPickerHotkeyScope.SingleRecordPicker,
                itemsToSelect: recordsToSelect,
                filteredSelectedItems: filteredSelectedRecords,
                selectedItems: selectedRecords,
                onChange: handleMultipleRecordSelectChange,
                searchFilter: objectFilterDropdownSearchInput,
                loadingItems: loading
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRecordSelect.tsx",
                lineNumber: 269,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
};
_s(ObjectFilterDropdownRecordSelect, "EogO2aZFN1XWuQ2zyQa0ila1zyI=", false, function() {
    return [
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useApplyRecordFilter,
        useObjectMetadataItem,
        useRecordsForSelect
    ];
});
_c = ObjectFilterDropdownRecordSelect;
var _c;
$RefreshReg$(_c, "ObjectFilterDropdownRecordSelect");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRecordSelect.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownRecordSelect.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,