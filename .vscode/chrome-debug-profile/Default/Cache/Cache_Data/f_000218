import { getJoinObjectNameSingular } from "/src/modules/activities/utils/getJoinObjectNameSingular.ts";
import { objectMetadataItemsState } from "/src/modules/object-metadata/states/objectMetadataItemsState.ts";
import { CoreObjectNameSingular } from "/src/modules/object-metadata/types/CoreObjectNameSingular.ts";
import { useCreateOneRecord } from "/src/modules/object-record/hooks/useCreateOneRecord.ts";
import { useDeleteOneRecord } from "/src/modules/object-record/hooks/useDeleteOneRecord.ts";
import { searchRecordStoreComponentFamilyState } from "/src/modules/object-record/record-picker/multiple-record-picker/states/searchRecordStoreComponentFamilyState.ts";
import { recordStoreFamilyState } from "/src/modules/object-record/record-store/states/recordStoreFamilyState.ts";
import __vite__cjsImport7__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNull = __vite__cjsImport7__sniptt_guards["isNull"];
import { useRecoilCallback, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useUpdateActivityTargetFromInlineCell = ({ activityObjectNameSingular, activityId })=>{
    const { createOneRecord: createOneActivityTarget } = useCreateOneRecord({
        objectNameSingular: getJoinObjectNameSingular(activityObjectNameSingular)
    });
    const { deleteOneRecord: deleteOneActivityTarget } = useDeleteOneRecord({
        objectNameSingular: getJoinObjectNameSingular(activityObjectNameSingular)
    });
    const setActivityFromStore = useSetRecoilState(recordStoreFamilyState(activityId));
    const updateActivityTargetFromInlineCell = useRecoilCallback(({ snapshot })=>async ({ morphItem, activityTargetWithTargetRecords, recordPickerInstanceId })=>{
            const targetObjectName = activityObjectNameSingular === CoreObjectNameSingular.Task ? 'task' : 'note';
            const pickedObjectMetadataItem = snapshot.getLoadable(objectMetadataItemsState).getValue().find((objectMetadataItem)=>objectMetadataItem.id === morphItem.objectMetadataId);
            if (!isDefined(pickedObjectMetadataItem)) {
                throw new Error('Could not find object metadata item');
            }
            let activityTargetsAfterUpdate = [];
            const existingActivityTarget = activityTargetWithTargetRecords.find((activityTarget)=>activityTarget.targetObject.id === morphItem.recordId);
            if (isDefined(existingActivityTarget)) {
                activityTargetsAfterUpdate = activityTargetWithTargetRecords.map((activityTarget)=>{
                    if (activityTarget.targetObject.id === morphItem.recordId && !morphItem.isSelected) {
                        return undefined;
                    }
                    return activityTarget.activityTarget;
                }).filter(isDefined);
                if (!morphItem.isSelected) {
                    await deleteOneActivityTarget(existingActivityTarget.activityTarget.id);
                }
            } else {
                const searchRecord = snapshot.getLoadable(searchRecordStoreComponentFamilyState.atomFamily({
                    instanceId: recordPickerInstanceId,
                    familyKey: morphItem.recordId
                })).getValue();
                if (!isDefined(searchRecord) || !isDefined(searchRecord?.record)) {
                    return;
                }
                if (!morphItem.isSelected) {
                    return;
                }
                const targetRecord = searchRecord.record;
                const activityTarget = activityObjectNameSingular === CoreObjectNameSingular.Task ? {
                    id: v4(),
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    __typename: 'TaskTarget',
                    taskId: activityId,
                    task: {
                        id: activityId,
                        __typename: 'Task',
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    },
                    [pickedObjectMetadataItem.nameSingular]: targetRecord
                } : {
                    id: v4(),
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    __typename: 'NoteTarget',
                    noteId: activityId,
                    note: {
                        id: activityId,
                        __typename: 'Note',
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    },
                    [pickedObjectMetadataItem.nameSingular]: targetRecord
                };
                activityTargetsAfterUpdate = [
                    ...activityTargetWithTargetRecords.map((activityTarget)=>{
                        return activityTarget.activityTarget;
                    }),
                    activityTarget
                ];
                await createOneActivityTarget({
                    ...activityTarget,
                    [targetObjectName]: undefined,
                    [pickedObjectMetadataItem.nameSingular]: undefined,
                    [`${pickedObjectMetadataItem.nameSingular}Id`]: morphItem.recordId
                });
            }
            setActivityFromStore((currentActivity)=>{
                if (isNull(currentActivity)) {
                    return null;
                }
                return {
                    ...currentActivity,
                    [`${targetObjectName}Targets`]: activityTargetsAfterUpdate
                };
            });
        }, [
        activityId,
        activityObjectNameSingular,
        createOneActivityTarget,
        deleteOneActivityTarget,
        setActivityFromStore
    ]);
    return {
        updateActivityTargetFromInlineCell
    };
};

//# sourceMappingURL=data:application/json;base64,