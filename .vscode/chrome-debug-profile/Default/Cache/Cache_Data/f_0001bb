import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import __vite__cjsImport3_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport3_react["useEffect"]; const useMemo = __vite__cjsImport3_react["useMemo"];
import { CustomResolverFetchMoreLoader } from "/src/modules/activities/components/CustomResolverFetchMoreLoader.tsx";
import { EmailLoader } from "/src/modules/activities/emails/components/EmailLoader.tsx";
import { EmailThreadHeader } from "/src/modules/activities/emails/components/EmailThreadHeader.tsx";
import { EmailThreadMessage } from "/src/modules/activities/emails/components/EmailThreadMessage.tsx";
import { CommandMenuMessageThreadIntermediaryMessages } from "/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadIntermediaryMessages.tsx";
import { useEmailThreadInCommandMenu } from "/src/modules/command-menu/pages/message-thread/hooks/useEmailThreadInCommandMenu.ts";
import { messageThreadComponentState } from "/src/modules/command-menu/pages/message-thread/states/messageThreadComponentState.ts";
import { useIsMobile } from "/src/modules/ui/utilities/responsive/hooks/useIsMobile.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import { assertUnreachable } from "/src/modules/workflow/utils/assertUnreachable.ts";
import { Button, IconArrowBackUp } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { ConnectedAccountProvider } from "/@fs/D:/twenty-table-o/packages/twenty-shared/types/dist/twenty-shared-types.esm.js";
const StyledWrapper = styled.div`
  display: flex;
  flex-direction: column;
  height: 100%;
`;
_c = StyledWrapper;
const StyledContainer = styled.div`
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex: 1;
  height: 85%;
  overflow-y: auto;
`;
_c1 = StyledContainer;
const StyledButtonContainer = styled.div`
  background: ${({ theme })=>theme.background.secondary};
  border-top: 1px solid ${({ theme })=>theme.border.color.light};
  display: flex;
  justify-content: flex-end;
  height: ${({ isMobile })=>isMobile ? '100px' : '50px'};
  padding: ${({ theme })=>theme.spacing(2)};
  width: 100%;
  box-sizing: border-box;
`;
_c2 = StyledButtonContainer;
export const CommandMenuMessageThreadPage = ()=>{
    _s();
    const setMessageThread = useSetRecoilComponentStateV2(messageThreadComponentState);
    const isMobile = useIsMobile();
    const { thread, messages, fetchMoreMessages, threadLoading, messageThreadExternalId, connectedAccountHandle, messageChannelLoading, connectedAccountProvider, lastMessageExternalId } = useEmailThreadInCommandMenu();
    useEffect(()=>{
        if (!messages[0]?.messageThread) {
            return;
        }
        setMessageThread(messages[0]?.messageThread);
    }, [
        messages,
        setMessageThread
    ]);
    const messagesCount = messages.length;
    const is5OrMoreMessages = messagesCount >= 5;
    const firstMessages = messages.slice(0, is5OrMoreMessages ? 2 : messagesCount - 1);
    const intermediaryMessages = is5OrMoreMessages ? messages.slice(2, messagesCount - 1) : [];
    const lastMessage = messages[messagesCount - 1];
    const subject = messages[0]?.subject;
    const canReply = useMemo(()=>{
        return connectedAccountHandle && connectedAccountProvider && lastMessage && messageThreadExternalId != null;
    }, [
        connectedAccountHandle,
        connectedAccountProvider,
        lastMessage,
        messageThreadExternalId
    ]);
    const handleReplyClick = ()=>{
        if (!canReply) {
            return;
        }
        let url;
        switch(connectedAccountProvider){
            case ConnectedAccountProvider.MICROSOFT:
                url = `https://outlook.office.com/mail/deeplink?ItemID=${lastMessageExternalId}`;
                window.open(url, '_blank');
                break;
            case ConnectedAccountProvider.GOOGLE:
                url = `https://mail.google.com/mail/?authuser=${connectedAccountHandle}#all/${messageThreadExternalId}`;
                window.open(url, '_blank');
                break;
            case null:
                throw new Error('Account provider not provided');
            default:
                assertUnreachable(connectedAccountProvider);
        }
    };
    if (!thread || !messages.length) {
        return null;
    }
    return /*#__PURE__*/ _jsxDEV(StyledWrapper, {
        children: [
            /*#__PURE__*/ _jsxDEV(StyledContainer, {
                children: threadLoading ? /*#__PURE__*/ _jsxDEV(EmailLoader, {
                    loadingText: "Loading thread"
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                    lineNumber: 123,
                    columnNumber: 11
                }, this) : /*#__PURE__*/ _jsxDEV(_Fragment, {
                    children: [
                        /*#__PURE__*/ _jsxDEV(EmailThreadHeader, {
                            subject: subject,
                            lastMessageSentAt: lastMessage.receivedAt
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                            lineNumber: 126,
                            columnNumber: 13
                        }, this),
                        firstMessages.map((message)=>/*#__PURE__*/ _jsxDEV(EmailThreadMessage, {
                                sender: message.sender,
                                participants: message.messageParticipants,
                                body: message.text,
                                sentAt: message.receivedAt
                            }, message.id, false, {
                                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                                lineNumber: 131,
                                columnNumber: 15
                            }, this)),
                        /*#__PURE__*/ _jsxDEV(CommandMenuMessageThreadIntermediaryMessages, {
                            messages: intermediaryMessages
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                            lineNumber: 139,
                            columnNumber: 13
                        }, this),
                        /*#__PURE__*/ _jsxDEV(EmailThreadMessage, {
                            sender: lastMessage.sender,
                            participants: lastMessage.messageParticipants,
                            body: lastMessage.text,
                            sentAt: lastMessage.receivedAt,
                            isExpanded: true
                        }, lastMessage.id, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                            lineNumber: 142,
                            columnNumber: 13
                        }, this),
                        /*#__PURE__*/ _jsxDEV(CustomResolverFetchMoreLoader, {
                            loading: threadLoading,
                            onLastRowVisible: fetchMoreMessages
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                            lineNumber: 150,
                            columnNumber: 13
                        }, this)
                    ]
                }, void 0, true)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                lineNumber: 121,
                columnNumber: 7
            }, this),
            canReply && !messageChannelLoading && /*#__PURE__*/ _jsxDEV(StyledButtonContainer, {
                isMobile: isMobile,
                children: /*#__PURE__*/ _jsxDEV(Button, {
                    onClick: handleReplyClick,
                    title: "Reply",
                    Icon: IconArrowBackUp,
                    disabled: !canReply
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                    lineNumber: 159,
                    columnNumber: 11
                }, this)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
                lineNumber: 158,
                columnNumber: 9
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx",
        lineNumber: 120,
        columnNumber: 5
    }, this);
};
_s(CommandMenuMessageThreadPage, "qdB/H3H9wL4ThFEPOEGuMMk5+9k=", false, function() {
    return [
        useSetRecoilComponentStateV2,
        useIsMobile,
        useEmailThreadInCommandMenu
    ];
});
_c3 = CommandMenuMessageThreadPage;
var _c, _c1, _c2, _c3;
$RefreshReg$(_c, "StyledWrapper");
$RefreshReg$(_c1, "StyledContainer");
$RefreshReg$(_c2, "StyledButtonContainer");
$RefreshReg$(_c3, "CommandMenuMessageThreadPage");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/pages/message-thread/components/CommandMenuMessageThreadPage.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,