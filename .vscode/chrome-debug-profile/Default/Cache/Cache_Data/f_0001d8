import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport1_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport1_react["useCallback"];
import { triggerUpdateRecordOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffect.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { useGetRecordFromCache } from "/src/modules/object-record/cache/hooks/useGetRecordFromCache.ts";
import { getObjectTypename } from "/src/modules/object-record/cache/utils/getObjectTypename.ts";
import { getRecordNodeFromRecord } from "/src/modules/object-record/cache/utils/getRecordNodeFromRecord.ts";
import { updateRecordFromCache } from "/src/modules/object-record/cache/utils/updateRecordFromCache.ts";
import { useDeleteOneRecordMutation } from "/src/modules/object-record/hooks/useDeleteOneRecordMutation.ts";
import { useRefetchAggregateQueries } from "/src/modules/object-record/hooks/useRefetchAggregateQueries.ts";
import { getDeleteOneRecordMutationResponseField } from "/src/modules/object-record/utils/getDeleteOneRecordMutationResponseField.ts";
import __vite__cjsImport12__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNull = __vite__cjsImport12__sniptt_guards["isNull"];
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useDeleteOneRecord = ({ objectNameSingular })=>{
    const apolloClient = useApolloClient();
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const getRecordFromCache = useGetRecordFromCache({
        objectNameSingular
    });
    const { deleteOneRecordMutation } = useDeleteOneRecordMutation({
        objectNameSingular
    });
    const { objectMetadataItems } = useObjectMetadataItems();
    const { refetchAggregateQueries } = useRefetchAggregateQueries({
        objectMetadataNamePlural: objectMetadataItem.namePlural
    });
    const mutationResponseField = getDeleteOneRecordMutationResponseField(objectNameSingular);
    const deleteOneRecord = useCallback(async (idToDelete)=>{
        const cachedRecord = getRecordFromCache(idToDelete, apolloClient.cache);
        const cachedRecordNode = getRecordNodeFromRecord({
            record: cachedRecord,
            objectMetadataItem,
            objectMetadataItems,
            computeReferences: false
        });
        const currentTimestamp = new Date().toISOString();
        const computedOptimisticRecord = {
            ...cachedRecord,
            id: idToDelete,
            deletedAt: currentTimestamp,
            __typename: getObjectTypename(objectMetadataItem.nameSingular)
        };
        const optimisticRecordNode = getRecordNodeFromRecord({
            record: computedOptimisticRecord,
            objectMetadataItem,
            objectMetadataItems,
            computeReferences: false
        });
        const shouldHandleOptimisticCache = !isNull(cachedRecord) && isDefined(optimisticRecordNode) && isDefined(cachedRecordNode);
        if (shouldHandleOptimisticCache) {
            const recordGqlFields = {
                deletedAt: true
            };
            updateRecordFromCache({
                objectMetadataItems,
                objectMetadataItem,
                cache: apolloClient.cache,
                record: computedOptimisticRecord,
                recordGqlFields
            });
            triggerUpdateRecordOptimisticEffect({
                cache: apolloClient.cache,
                objectMetadataItem,
                currentRecord: cachedRecordNode,
                updatedRecord: optimisticRecordNode,
                objectMetadataItems
            });
        }
        const deletedRecord = await apolloClient.mutate({
            mutation: deleteOneRecordMutation,
            variables: {
                idToDelete: idToDelete
            },
            update: (cache, { data })=>{
                const record = data?.[mutationResponseField];
                if (!isDefined(record) || !shouldHandleOptimisticCache) {
                    return;
                }
                triggerUpdateRecordOptimisticEffect({
                    cache,
                    objectMetadataItem,
                    currentRecord: optimisticRecordNode,
                    updatedRecord: record,
                    objectMetadataItems
                });
            }
        }).catch((error)=>{
            if (!shouldHandleOptimisticCache) {
                throw error;
            }
            const recordGqlFields = {
                deletedAt: true
            };
            updateRecordFromCache({
                objectMetadataItems,
                objectMetadataItem,
                cache: apolloClient.cache,
                record: {
                    ...cachedRecord,
                    deletedAt: null
                },
                recordGqlFields
            });
            triggerUpdateRecordOptimisticEffect({
                cache: apolloClient.cache,
                objectMetadataItem,
                currentRecord: optimisticRecordNode,
                updatedRecord: cachedRecordNode,
                objectMetadataItems
            });
            throw error;
        });
        await refetchAggregateQueries();
        return deletedRecord.data?.[mutationResponseField] ?? null;
    }, [
        apolloClient,
        deleteOneRecordMutation,
        getRecordFromCache,
        mutationResponseField,
        objectMetadataItem,
        objectMetadataItems,
        refetchAggregateQueries
    ]);
    return {
        deleteOneRecord
    };
};

//# sourceMappingURL=data:application/json;base64,