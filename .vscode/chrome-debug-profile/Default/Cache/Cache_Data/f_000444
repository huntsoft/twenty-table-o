import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellFieldContextWrapper.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellFieldContextWrapper.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useContext = __vite__cjsImport2_react["useContext"];
import { isLabelIdentifierField } from "/src/modules/object-metadata/utils/isLabelIdentifierField.ts";
import { FieldContext } from "/src/modules/object-record/record-field/contexts/FieldContext.ts";
import { RecordFieldComponentInstanceContext } from "/src/modules/object-record/record-field/states/contexts/RecordFieldComponentInstanceContext.ts";
import { isFieldRelation } from "/src/modules/object-record/record-field/types/guards/isFieldRelation.ts";
import { isFieldSelect } from "/src/modules/object-record/record-field/types/guards/isFieldSelect.ts";
import { useRecordIndexContextOrThrow } from "/src/modules/object-record/record-index/contexts/RecordIndexContext.ts";
import { MultipleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/multiple-record-picker/types/MultipleRecordPickerHotkeyScope.ts";
import { SingleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/single-record-picker/types/SingleRecordPickerHotkeyScope.ts";
import { RecordUpdateContext } from "/src/modules/object-record/record-table/contexts/EntityUpdateMutationHookContext.ts";
import { RecordTableCellContext } from "/src/modules/object-record/record-table/contexts/RecordTableCellContext.ts";
import { useRecordTableContextOrThrow } from "/src/modules/object-record/record-table/contexts/RecordTableContext.ts";
import { useRecordTableRowContextOrThrow } from "/src/modules/object-record/record-table/contexts/RecordTableRowContext.ts";
import { TableHotkeyScope } from "/src/modules/object-record/record-table/types/TableHotkeyScope.ts";
import { SelectFieldHotkeyScope } from "/src/modules/object-record/select/types/SelectFieldHotkeyScope.tsx";
import { getRecordFieldInputId } from "/src/modules/object-record/utils/getRecordFieldInputId.ts";
import { RelationDefinitionType } from "/src/generated-metadata/graphql.ts";
import { isUndefinedOrNull } from "/src/utils/isUndefinedOrNull.ts";
export const RecordTableCellFieldContextWrapper = ({ children })=>{
    _s();
    const { objectMetadataItem } = useRecordTableContextOrThrow();
    const { indexIdentifierUrl } = useRecordIndexContextOrThrow();
    const { columnDefinition } = useContext(RecordTableCellContext);
    const { recordId } = useRecordTableRowContextOrThrow();
    const updateRecord = useContext(RecordUpdateContext);
    if (isUndefinedOrNull(columnDefinition)) {
        return null;
    }
    // TODO: deprecate this and use useOpenFieldInput hooks to set the hotkey scope
    const computedHotkeyScope = (columnDefinition)=>{
        if (isFieldRelation(columnDefinition)) {
            if (columnDefinition.metadata.relationType === RelationDefinitionType.MANY_TO_ONE) {
                return SingleRecordPickerHotkeyScope.SingleRecordPicker;
            }
            if (columnDefinition.metadata.relationType === RelationDefinitionType.ONE_TO_MANY) {
                return MultipleRecordPickerHotkeyScope.MultipleRecordPicker;
            }
            return SingleRecordPickerHotkeyScope.SingleRecordPicker;
        }
        if (isFieldSelect(columnDefinition)) {
            return SelectFieldHotkeyScope.SelectField;
        }
        return TableHotkeyScope.CellEditMode;
    };
    const customHotkeyScope = computedHotkeyScope(columnDefinition);
    return /*#__PURE__*/ _jsxDEV(FieldContext.Provider, {
        value: {
            recordId,
            fieldDefinition: columnDefinition,
            useUpdateRecord: ()=>[
                    updateRecord,
                    {}
                ],
            hotkeyScope: customHotkeyScope,
            labelIdentifierLink: indexIdentifierUrl(recordId),
            isLabelIdentifier: isLabelIdentifierField({
                fieldMetadataItem: {
                    id: columnDefinition.fieldMetadataId,
                    name: columnDefinition.metadata.fieldName
                },
                objectMetadataItem
            }),
            displayedMaxRows: 1
        },
        children: /*#__PURE__*/ _jsxDEV(RecordFieldComponentInstanceContext.Provider, {
            value: {
                instanceId: getRecordFieldInputId(recordId, columnDefinition.metadata.fieldName, 'record-table-cell')
            },
            children: children
        }, void 0, false, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellFieldContextWrapper.tsx",
            lineNumber: 91,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellFieldContextWrapper.tsx",
        lineNumber: 74,
        columnNumber: 5
    }, this);
};
_s(RecordTableCellFieldContextWrapper, "wH6qd5mT175LxcCvrGvDj56+5Ck=", false, function() {
    return [
        useRecordTableContextOrThrow,
        useRecordIndexContextOrThrow,
        useRecordTableRowContextOrThrow
    ];
});
_c = RecordTableCellFieldContextWrapper;
var _c;
$RefreshReg$(_c, "RecordTableCellFieldContextWrapper");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellFieldContextWrapper.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellFieldContextWrapper.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,