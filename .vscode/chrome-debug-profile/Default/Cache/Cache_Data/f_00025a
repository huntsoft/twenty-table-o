import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/object-filter-dropdown/components/AdvancedFilterButton.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/AdvancedFilterButton.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { useObjectMetadataItemById } from "/src/modules/object-metadata/hooks/useObjectMetadataItemById.ts";
import { availableFieldMetadataItemsForFilterFamilySelector } from "/src/modules/object-metadata/states/availableFieldMetadataItemsForFilterFamilySelector.ts";
import { getFilterTypeFromFieldType } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { OBJECT_FILTER_DROPDOWN_ID } from "/src/modules/object-record/object-filter-dropdown/constants/ObjectFilterDropdownId.ts";
import { useUpsertRecordFilterGroup } from "/src/modules/object-record/record-filter-group/hooks/useUpsertRecordFilterGroup.ts";
import { currentRecordFilterGroupsComponentState } from "/src/modules/object-record/record-filter-group/states/currentRecordFilterGroupsComponentState.ts";
import { RecordFilterGroupLogicalOperator } from "/src/modules/object-record/record-filter-group/types/RecordFilterGroupLogicalOperator.ts";
import { useUpsertRecordFilter } from "/src/modules/object-record/record-filter/hooks/useUpsertRecordFilter.ts";
import { getRecordFilterOperands } from "/src/modules/object-record/record-filter/utils/getRecordFilterOperands.ts";
import { useDropdown } from "/src/modules/ui/layout/dropdown/hooks/useDropdown.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { ADVANCED_FILTER_DROPDOWN_ID } from "/src/modules/views/constants/AdvancedFilterDropdownId.ts";
import { useGetCurrentViewOnly } from "/src/modules/views/hooks/useGetCurrentViewOnly.ts";
import { ViewFilterGroupLogicalOperator } from "/src/modules/views/types/ViewFilterGroupLogicalOperator.ts";
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import { useLingui as $_useLingui } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_react.js?v=226f7286";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { IconFilter, MenuItemLeftContent, Pill, StyledMenuItemBase } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const StyledContainer = styled.div`
  align-items: center;
  display: flex;
  justify-content: space-between;
  padding: ${({ theme })=>theme.spacing(1)};
  border-top: 1px solid ${({ theme })=>theme.border.color.light};
`;
_c = StyledContainer;
export const StyledMenuItemSelect = styled(StyledMenuItemBase)`
  &:hover {
    background: ${({ theme })=>theme.background.transparent.light};
  }
`;
_c1 = StyledMenuItemSelect;
export const StyledPill = styled(Pill)`
  background: ${({ theme })=>theme.color.blueAccent10};
  color: ${({ theme })=>theme.color.blue};
`;
_c2 = StyledPill;
export const AdvancedFilterButton = ()=>{
    _s();
    const advancedFilterQuerySubFilterCount = 0; // TODO
    const { i18n: $__i18n, _: $__ } = $_useLingui();
    const { openDropdown: openAdvancedFilterDropdown } = useDropdown(ADVANCED_FILTER_DROPDOWN_ID);
    const { closeDropdown: closeObjectFilterDropdown } = useDropdown(OBJECT_FILTER_DROPDOWN_ID);
    const { currentView } = useGetCurrentViewOnly();
    const { upsertRecordFilterGroup } = useUpsertRecordFilterGroup();
    const { upsertRecordFilter } = useUpsertRecordFilter();
    const objectMetadataId = currentView?.objectMetadataId;
    if (!objectMetadataId) {
        throw new Error('Object metadata id is missing from current view');
    }
    const { objectMetadataItem } = useObjectMetadataItemById({
        objectId: objectMetadataId ?? null
    });
    const availableFieldMetadataItemsForFilter = useRecoilValue(availableFieldMetadataItemsForFilterFamilySelector({
        objectMetadataItemId: objectMetadataItem.id
    }));
    const currentRecordFilterGroups = useRecoilComponentValueV2(currentRecordFilterGroupsComponentState);
    const handleClick = ()=>{
        if (!isDefined(currentView)) {
            throw new Error('Missing current view id');
        }
        const alreadyHasAdvancedFilterGroup = currentRecordFilterGroups.length > 0;
        if (!alreadyHasAdvancedFilterGroup) {
            const newRecordFilterGroup = {
                id: v4(),
                viewId: currentView.id,
                logicalOperator: ViewFilterGroupLogicalOperator.AND
            };
            upsertRecordFilterGroup({
                id: newRecordFilterGroup.id,
                logicalOperator: RecordFilterGroupLogicalOperator.AND
            });
            const defaultFieldMetadataItem = availableFieldMetadataItemsForFilter.find((fieldMetadataItem)=>fieldMetadataItem.id === objectMetadataItem?.labelIdentifierFieldMetadataId) ?? availableFieldMetadataItemsForFilter[0];
            if (!isDefined(defaultFieldMetadataItem)) {
                throw new Error('Missing default filter definition');
            }
            const filterType = getFilterTypeFromFieldType(defaultFieldMetadataItem.type);
            const firstOperand = getRecordFilterOperands({
                filterType
            })[0];
            upsertRecordFilter({
                id: v4(),
                fieldMetadataId: defaultFieldMetadataItem.id,
                operand: firstOperand,
                value: '',
                displayValue: '',
                recordFilterGroupId: newRecordFilterGroup.id,
                type: getFilterTypeFromFieldType(defaultFieldMetadataItem.type),
                label: defaultFieldMetadataItem.label,
                positionInRecordFilterGroup: 1
            });
        }
        closeObjectFilterDropdown();
        openAdvancedFilterDropdown({
            scope: ADVANCED_FILTER_DROPDOWN_ID
        });
    };
    return /*#__PURE__*/ _jsxDEV(StyledContainer, {
        children: /*#__PURE__*/ _jsxDEV(StyledMenuItemSelect, {
            onClick: handleClick,
            children: [
                /*#__PURE__*/ _jsxDEV(MenuItemLeftContent, {
                    LeftIcon: IconFilter,
                    text: $__i18n._({
                        id: "tMFFwF",
                        message: "Advanced filter"
                    })
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/AdvancedFilterButton.tsx",
                    lineNumber: 146,
                    columnNumber: 9
                }, this),
                advancedFilterQuerySubFilterCount > 0 && /*#__PURE__*/ _jsxDEV(StyledPill, {
                    label: advancedFilterQuerySubFilterCount.toString()
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/AdvancedFilterButton.tsx",
                    lineNumber: 148,
                    columnNumber: 11
                }, this)
            ]
        }, void 0, true, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/AdvancedFilterButton.tsx",
            lineNumber: 145,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/AdvancedFilterButton.tsx",
        lineNumber: 144,
        columnNumber: 5
    }, this);
};
_s(AdvancedFilterButton, "KQQHLIxY4Z2XgshYTKpGtGTRDT4=", false, function() {
    return [
        useDropdown,
        useDropdown,
        useGetCurrentViewOnly,
        useUpsertRecordFilterGroup,
        useUpsertRecordFilter,
        useObjectMetadataItemById,
        useRecoilValue,
        useRecoilComponentValueV2
    ];
});
_c3 = AdvancedFilterButton;
var _c, _c1, _c2, _c3;
$RefreshReg$(_c, "StyledContainer");
$RefreshReg$(_c1, "StyledMenuItemSelect");
$RefreshReg$(_c2, "StyledPill");
$RefreshReg$(_c3, "AdvancedFilterButton");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/AdvancedFilterButton.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/AdvancedFilterButton.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,