import { contextStoreTargetedRecordsRuleComponentState } from "/src/modules/context-store/states/contextStoreTargetedRecordsRuleComponentState.ts";
import { availableFieldMetadataItemsForFilterFamilySelector } from "/src/modules/object-metadata/states/availableFieldMetadataItemsForFilterFamilySelector.ts";
import { availableFieldMetadataItemsForSortFamilySelector } from "/src/modules/object-metadata/states/availableFieldMetadataItemsForSortFamilySelector.ts";
import { formatFieldMetadataItemAsColumnDefinition } from "/src/modules/object-metadata/utils/formatFieldMetadataItemAsColumnDefinition.ts";
import { useSetRecordGroups } from "/src/modules/object-record/record-group/hooks/useSetRecordGroups.ts";
import { recordIndexFieldDefinitionsState } from "/src/modules/object-record/record-index/states/recordIndexFieldDefinitionsState.ts";
import { recordIndexIsCompactModeActiveState } from "/src/modules/object-record/record-index/states/recordIndexIsCompactModeActiveState.ts";
import { recordIndexKanbanAggregateOperationState } from "/src/modules/object-record/record-index/states/recordIndexKanbanAggregateOperationState.ts";
import { recordIndexKanbanFieldMetadataIdState } from "/src/modules/object-record/record-index/states/recordIndexKanbanFieldMetadataIdState.ts";
import { recordIndexOpenRecordInState } from "/src/modules/object-record/record-index/states/recordIndexOpenRecordInState.ts";
import { recordIndexViewTypeState } from "/src/modules/object-record/record-index/states/recordIndexViewTypeState.ts";
import { useSetTableColumns } from "/src/modules/object-record/record-table/hooks/useSetTableColumns.ts";
import { viewFieldAggregateOperationState } from "/src/modules/object-record/record-table/record-table-footer/states/viewFieldAggregateOperationState.ts";
import { convertAggregateOperationToExtendedAggregateOperation } from "/src/modules/object-record/utils/convertAggregateOperationToExtendedAggregateOperation.ts";
import { filterAvailableTableColumns } from "/src/modules/object-record/utils/filterAvailableTableColumns.ts";
import { getRecordIndexIdFromObjectNamePluralAndViewId } from "/src/modules/object-record/utils/getRecordIndexIdFromObjectNamePluralAndViewId.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import { mapViewFieldsToColumnDefinitions } from "/src/modules/views/utils/mapViewFieldsToColumnDefinitions.ts";
import { mapViewFiltersToFilters } from "/src/modules/views/utils/mapViewFiltersToFilters.ts";
import { useRecoilCallback, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { isDeeplyEqual } from "/src/utils/isDeeplyEqual.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useLoadRecordIndexStates = ()=>{
    const setContextStoreTargetedRecordsRuleComponentState = useSetRecoilComponentStateV2(contextStoreTargetedRecordsRuleComponentState);
    const setRecordIndexIsCompactModeActive = useSetRecoilState(recordIndexIsCompactModeActiveState);
    const setRecordIndexViewType = useSetRecoilState(recordIndexViewTypeState);
    const setRecordIndexOpenRecordIn = useSetRecoilState(recordIndexOpenRecordInState);
    const setRecordIndexViewKanbanFieldMetadataIdState = useSetRecoilState(recordIndexKanbanFieldMetadataIdState);
    const setRecordIndexViewKanbanAggregateOperationState = useSetRecoilState(recordIndexKanbanAggregateOperationState);
    const { setRecordGroupsFromViewGroups } = useSetRecordGroups();
    const { setTableColumns } = useSetTableColumns();
    const onViewFieldsChange = useRecoilCallback(({ set, snapshot })=>(viewFields, objectMetadataItem, recordIndexId)=>{
            const activeFieldMetadataItems = objectMetadataItem.fields.filter(({ isActive, isSystem })=>isActive && !isSystem);
            const filterableFieldMetadataItems = snapshot.getLoadable(availableFieldMetadataItemsForFilterFamilySelector({
                objectMetadataItemId: objectMetadataItem.id
            })).getValue();
            const sortableFieldMetadataItems = snapshot.getLoadable(availableFieldMetadataItemsForSortFamilySelector({
                objectMetadataItemId: objectMetadataItem.id
            })).getValue();
            const columnDefinitions = activeFieldMetadataItems.map((field, index)=>formatFieldMetadataItemAsColumnDefinition({
                    position: index,
                    field,
                    objectMetadataItem
                })).filter(filterAvailableTableColumns).map((column)=>{
                const existsInFilterDefinitions = filterableFieldMetadataItems.some((fieldMetadataItem)=>fieldMetadataItem.id === column.fieldMetadataId);
                const existsInSortDefinitions = sortableFieldMetadataItems.some((fieldMetadataItem)=>fieldMetadataItem.id === column.fieldMetadataId);
                return {
                    ...column,
                    isFilterable: existsInFilterDefinitions,
                    isSortable: existsInSortDefinitions
                };
            });
            const newFieldDefinitions = mapViewFieldsToColumnDefinitions({
                viewFields,
                columnDefinitions
            });
            setTableColumns(newFieldDefinitions, recordIndexId);
            const existingRecordIndexFieldDefinitions = snapshot.getLoadable(recordIndexFieldDefinitionsState).getValue();
            if (!isDeeplyEqual(existingRecordIndexFieldDefinitions, newFieldDefinitions)) {
                set(recordIndexFieldDefinitionsState, newFieldDefinitions);
            }
            for (const viewField of viewFields){
                const viewFieldMetadataType = objectMetadataItem.fields?.find((field)=>field.id === viewField.fieldMetadataId)?.type;
                const aggregateOperationForViewField = snapshot.getLoadable(viewFieldAggregateOperationState({
                    viewFieldId: viewField.id
                })).getValue();
                const convertedViewFieldAggregateOperation = isDefined(viewField.aggregateOperation) ? convertAggregateOperationToExtendedAggregateOperation(viewField.aggregateOperation, viewFieldMetadataType) : viewField.aggregateOperation;
                if (aggregateOperationForViewField !== convertedViewFieldAggregateOperation) {
                    set(viewFieldAggregateOperationState({
                        viewFieldId: viewField.id
                    }), convertedViewFieldAggregateOperation);
                }
            }
        }, [
        setTableColumns
    ]);
    const loadRecordIndexStates = useRecoilCallback(({ snapshot })=>async (view, objectMetadataItem)=>{
            const recordIndexId = getRecordIndexIdFromObjectNamePluralAndViewId(objectMetadataItem.namePlural, view.id);
            const filterableFieldMetadataItems = snapshot.getLoadable(availableFieldMetadataItemsForFilterFamilySelector({
                objectMetadataItemId: objectMetadataItem.id
            })).getValue();
            onViewFieldsChange(view.viewFields, objectMetadataItem, recordIndexId);
            setRecordGroupsFromViewGroups(view.id, view.viewGroups, objectMetadataItem);
            setContextStoreTargetedRecordsRuleComponentState((prev)=>({
                    ...prev,
                    filters: mapViewFiltersToFilters(view.viewFilters, filterableFieldMetadataItems)
                }));
            setRecordIndexViewType(view.type);
            setRecordIndexOpenRecordIn(view.openRecordIn);
            setRecordIndexViewKanbanFieldMetadataIdState(view.kanbanFieldMetadataId);
            const kanbanAggregateOperationFieldMetadataType = objectMetadataItem.fields?.find((field)=>field.id === view.kanbanAggregateOperationFieldMetadataId)?.type;
            setRecordIndexViewKanbanAggregateOperationState({
                operation: isDefined(view.kanbanAggregateOperation) ? convertAggregateOperationToExtendedAggregateOperation(view.kanbanAggregateOperation, kanbanAggregateOperationFieldMetadataType) : view.kanbanAggregateOperation,
                fieldMetadataId: view.kanbanAggregateOperationFieldMetadataId
            });
            setRecordIndexIsCompactModeActive(view.isCompact);
        }, [
        onViewFieldsChange,
        setRecordGroupsFromViewGroups,
        setContextStoreTargetedRecordsRuleComponentState,
        setRecordIndexIsCompactModeActive,
        setRecordIndexViewKanbanAggregateOperationState,
        setRecordIndexViewKanbanFieldMetadataIdState,
        setRecordIndexViewType,
        setRecordIndexOpenRecordIn
    ]);
    return {
        loadRecordIndexStates
    };
};

//# sourceMappingURL=data:application/json;base64,