/* eslint-disable @nx/workspace-explicit-boolean-predicates-in-if */ import __vite__cjsImport0__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isDate = __vite__cjsImport0__sniptt_guards["isDate"]; const isNumber = __vite__cjsImport0__sniptt_guards["isNumber"]; const isString = __vite__cjsImport0__sniptt_guards["isString"];
import { differenceInCalendarDays, formatDistanceToNow } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/date-fns.js?v=226f7286";
import { DateTime } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/luxon.js?v=226f7286";
import __vite__cjsImport3_moize from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/moize.js?v=226f7286"; const moize = __vite__cjsImport3_moize.__esModule ? __vite__cjsImport3_moize.default : __vite__cjsImport3_moize;
import { logError } from "/src/utils/logError.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const DEFAULT_DATE_LOCALE = 'en-EN';
export const parseDate = (dateToParse)=>{
    if (dateToParse === 'now') return DateTime.fromJSDate(new Date());
    let formattedDate = null;
    if (!dateToParse) {
        throw new Error(`Invalid date passed to formatPastDate: "${dateToParse}"`);
    } else if (isString(dateToParse)) {
        formattedDate = DateTime.fromISO(dateToParse);
    } else if (isDate(dateToParse)) {
        formattedDate = DateTime.fromJSDate(dateToParse);
    } else if (isNumber(dateToParse)) {
        formattedDate = DateTime.fromMillis(dateToParse);
    }
    if (!formattedDate) {
        throw new Error(`Invalid date passed to formatPastDate: "${dateToParse}"`);
    }
    if (!formattedDate.isValid) {
        throw new Error(`Invalid date passed to formatPastDate: "${dateToParse}"`);
    }
    return formattedDate.setLocale(DEFAULT_DATE_LOCALE);
};
const isSameDay = (a, b)=>a.hasSame(b, 'day') && a.hasSame(b, 'month') && a.hasSame(b, 'year');
export const formatDate = (dateToFormat, format)=>{
    try {
        const parsedDate = parseDate(dateToFormat);
        return parsedDate.toFormat(format);
    } catch (error) {
        logError(error);
        return '';
    }
};
export const beautifyExactDateTime = (dateToBeautify)=>{
    const isToday = isSameDay(parseDate(dateToBeautify), DateTime.local());
    const dateFormat = isToday ? 'T' : 'DD Â· T';
    return formatDate(dateToBeautify, dateFormat);
};
export const beautifyExactDate = (dateToBeautify)=>{
    const isToday = isSameDay(parseDate(dateToBeautify), DateTime.local());
    const dateFormat = isToday ? "'Today'" : 'DD';
    return formatDate(dateToBeautify, dateFormat);
};
export const beautifyPastDateRelativeToNow = (pastDate)=>{
    try {
        const parsedDate = parseDate(pastDate);
        return formatDistanceToNow(parsedDate.toJSDate(), {
            addSuffix: true
        }).replace('less than a minute ago', 'now');
    } catch (error) {
        logError(error);
        return '';
    }
};
export const beautifyPastDateAbsolute = (pastDate)=>{
    try {
        const parsedPastDate = parseDate(pastDate);
        const hoursDiff = parsedPastDate.diffNow('hours').negate().hours;
        if (hoursDiff <= 24) {
            return parsedPastDate.toFormat('HH:mm');
        } else if (hoursDiff <= 7 * 24) {
            return parsedPastDate.toFormat('cccc - HH:mm');
        } else if (hoursDiff <= 365 * 24) {
            return parsedPastDate.toFormat('MMMM d - HH:mm');
        } else {
            return parsedPastDate.toFormat('dd/MM/yyyy - HH:mm');
        }
    } catch (error) {
        logError(error);
        return '';
    }
};
export const hasDatePassed = (date)=>{
    try {
        const parsedDate = parseDate(date);
        return differenceInCalendarDays(DateTime.local().toJSDate(), parsedDate.toJSDate()) >= 1;
    } catch (error) {
        logError(error);
        return false;
    }
};
export const beautifyDateDiff = (date, dateToCompareWith, short = false)=>{
    const dateDiff = DateTime.fromISO(date).diff(dateToCompareWith ? DateTime.fromISO(dateToCompareWith) : DateTime.now(), [
        'years',
        'days'
    ]);
    let result = '';
    if (dateDiff.years) result = result + `${dateDiff.years} year`;
    if (![
        0,
        1
    ].includes(dateDiff.years)) result = result + 's';
    if (short && dateDiff.years) return result;
    if (dateDiff.years && dateDiff.days) result = result + ' and ';
    if (dateDiff.days) result = result + `${Math.floor(dateDiff.days)} day`;
    if (![
        0,
        1
    ].includes(dateDiff.days)) result = result + 's';
    return result;
};
const getMonthLabels = ()=>{
    const formatter = new Intl.DateTimeFormat(undefined, {
        month: 'short',
        timeZone: 'UTC'
    });
    return [
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12
    ].map((month)=>{
        const monthZeroFilled = month < 10 ? `0${month}` : month;
        return new Date(`2017-${monthZeroFilled}-01T00:00:00+00:00`);
    }).map((date)=>formatter.format(date));
};
export const getMonthLabelsMemoized = moize(getMonthLabels);
export const formatISOStringToHumanReadableDateTime = (date)=>{
    const monthLabels = getMonthLabelsMemoized();
    if (!isDefined(monthLabels)) {
        return formatToHumanReadableDateTime(date);
    }
    const year = date.slice(0, 4);
    const month = date.slice(5, 7);
    const monthLabel = monthLabels[parseInt(month, 10) - 1];
    const jsDate = new Date(date);
    const day = jsDate.getDate();
    const hours = `0${jsDate.getHours()}`.slice(-2);
    const minutes = `0${jsDate.getMinutes()}`.slice(-2);
    return `${day} ${monthLabel} ${year} - ${hours}:${minutes}`;
};
export const formatISOStringToHumanReadableDate = (date)=>{
    const monthLabels = getMonthLabelsMemoized();
    if (!isDefined(monthLabels)) {
        return formatToHumanReadableDate(date);
    }
    const year = date.slice(0, 4);
    const month = date.slice(5, 7);
    const day = date.slice(8, 10);
    const monthLabel = monthLabels[parseInt(month, 10) - 1];
    return `${day} ${monthLabel} ${year}`;
};
export const formatToHumanReadableDate = (date)=>{
    const parsedJSDate = parseDate(date).toJSDate();
    return new Intl.DateTimeFormat(undefined, {
        month: 'short',
        day: 'numeric',
        year: 'numeric'
    }).format(parsedJSDate);
};
export const formatToHumanReadableDateTime = (date)=>{
    const parsedJSDate = parseDate(date).toJSDate();
    return new Intl.DateTimeFormat(undefined, {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        hour: 'numeric',
        minute: 'numeric'
    }).format(parsedJSDate);
};

//# sourceMappingURL=data:application/json;base64,