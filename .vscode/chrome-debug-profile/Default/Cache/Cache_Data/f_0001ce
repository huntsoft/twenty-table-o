import { isNonEmptyArray } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client_utilities.js?v=226f7286";
import __vite__cjsImport1__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNonEmptyString = __vite__cjsImport1__sniptt_guards["isNonEmptyString"];
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useMemo = __vite__cjsImport2_react["useMemo"];
import { useRecoilCallback, useRecoilState, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { isAggregationEnabled } from "/src/modules/object-metadata/utils/isAggregationEnabled.ts";
import { getRecordsFromRecordConnection } from "/src/modules/object-record/cache/utils/getRecordsFromRecordConnection.ts";
import { useHandleFindManyRecordsError } from "/src/modules/object-record/hooks/useHandleFindManyRecordsError.ts";
import { filterUniqueRecordEdgesByCursor } from "/src/modules/object-record/utils/filterUniqueRecordEdgesByCursor.ts";
import { getQueryIdentifier } from "/src/modules/object-record/utils/getQueryIdentifier.ts";
import { cursorFamilyState } from "/src/modules/object-record/states/cursorFamilyState.ts";
import { hasNextPageFamilyState } from "/src/modules/object-record/states/hasNextPageFamilyState.ts";
import { isFetchingMoreRecordsFamilyState } from "/src/modules/object-record/states/isFetchingMoreRecordsFamilyState.ts";
import { capitalize, isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useFetchMoreRecordsWithPagination = ({ objectNameSingular, filter, orderBy, limit, data, error, fetchMore, objectMetadataItem, onCompleted })=>{
    const queryIdentifier = getQueryIdentifier({
        objectNameSingular,
        filter,
        limit,
        orderBy
    });
    const [hasNextPage] = useRecoilState(hasNextPageFamilyState(queryIdentifier));
    const setIsFetchingMoreObjects = useSetRecoilState(isFetchingMoreRecordsFamilyState(queryIdentifier));
    const { handleFindManyRecordsError } = useHandleFindManyRecordsError({
        objectMetadataItem
    });
    // TODO: put this into a util inspired from https://github.com/apollographql/apollo-client/blob/master/src/utilities/policies/pagination.ts
    // This function is equivalent to merge function + read function in field policy
    const fetchMoreRecords = useRecoilCallback(({ snapshot, set })=>async ()=>{
            const hasNextPageLocal = snapshot.getLoadable(hasNextPageFamilyState(queryIdentifier)).getValue();
            const lastCursorLocal = snapshot.getLoadable(cursorFamilyState(queryIdentifier)).getValue();
            // Remote objects does not support hasNextPage. We cannot rely on it to fetch more records.
            if (hasNextPageLocal || !isAggregationEnabled(objectMetadataItem) && !error) {
                setIsFetchingMoreObjects(true);
                try {
                    const { data: fetchMoreDataResult } = await fetchMore({
                        variables: {
                            filter,
                            orderBy,
                            lastCursor: isNonEmptyString(lastCursorLocal) ? lastCursorLocal : undefined
                        },
                        updateQuery: (prev, { fetchMoreResult })=>{
                            const previousEdges = prev?.[objectMetadataItem.namePlural]?.edges;
                            const nextEdges = fetchMoreResult?.[objectMetadataItem.namePlural]?.edges;
                            let newEdges = previousEdges ?? [];
                            if (isNonEmptyArray(nextEdges)) {
                                newEdges = filterUniqueRecordEdgesByCursor([
                                    ...newEdges,
                                    ...fetchMoreResult?.[objectMetadataItem.namePlural]?.edges ?? []
                                ]);
                            }
                            const pageInfo = fetchMoreResult?.[objectMetadataItem.namePlural]?.pageInfo;
                            if (isDefined(pageInfo)) {
                                set(cursorFamilyState(queryIdentifier), pageInfo.endCursor ?? '');
                                set(hasNextPageFamilyState(queryIdentifier), pageInfo.hasNextPage ?? false);
                            }
                            const records = getRecordsFromRecordConnection({
                                recordConnection: {
                                    edges: newEdges,
                                    pageInfo
                                }
                            });
                            onCompleted?.(records, {
                                pageInfo,
                                totalCount: fetchMoreResult?.[objectMetadataItem.namePlural]?.totalCount
                            });
                            return Object.assign({}, prev, {
                                [objectMetadataItem.namePlural]: {
                                    __typename: `${capitalize(objectMetadataItem.nameSingular)}Connection`,
                                    edges: newEdges,
                                    pageInfo: fetchMoreResult?.[objectMetadataItem.namePlural].pageInfo,
                                    totalCount: fetchMoreResult?.[objectMetadataItem.namePlural].totalCount
                                }
                            });
                        }
                    });
                    return {
                        data: fetchMoreDataResult?.[objectMetadataItem.namePlural]
                    };
                } catch (error) {
                    handleFindManyRecordsError(error);
                    return {
                        error: error
                    };
                } finally{
                    setIsFetchingMoreObjects(false);
                }
            }
        }, [
        objectMetadataItem,
        error,
        setIsFetchingMoreObjects,
        fetchMore,
        filter,
        orderBy,
        onCompleted,
        handleFindManyRecordsError,
        queryIdentifier
    ]);
    const totalCount = data?.[objectMetadataItem.namePlural]?.totalCount;
    const recordConnection = data?.[objectMetadataItem.namePlural];
    const records = useMemo(()=>isDefined(recordConnection) ? getRecordsFromRecordConnection({
            recordConnection
        }) : [], [
        recordConnection
    ]);
    return {
        fetchMoreRecords,
        totalCount,
        records,
        hasNextPage
    };
};

//# sourceMappingURL=data:application/json;base64,