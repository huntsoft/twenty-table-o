import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport1_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport1_react["useCallback"];
import { triggerCreateRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerCreateRecordsOptimisticEffect.ts";
import { triggerDestroyRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerDestroyRecordsOptimisticEffect.ts";
import { triggerUpdateRecordOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffect.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { CoreObjectNameSingular } from "/src/modules/object-metadata/types/CoreObjectNameSingular.ts";
import { useGetRecordFromCache } from "/src/modules/object-record/cache/hooks/useGetRecordFromCache.ts";
import { useCreateOneRecordMutation } from "/src/modules/object-record/hooks/useCreateOneRecordMutation.ts";
import { useDestroyOneRecordMutation } from "/src/modules/object-record/hooks/useDestroyOneRecordMutation.ts";
import { useUpdateOneRecordMutation } from "/src/modules/object-record/hooks/useUpdateOneRecordMutation.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const usePersistViewFilterGroupRecords = ()=>{
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular: CoreObjectNameSingular.ViewFilterGroup
    });
    const getRecordFromCache = useGetRecordFromCache({
        objectNameSingular: CoreObjectNameSingular.ViewFilterGroup
    });
    const { destroyOneRecordMutation } = useDestroyOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewFilterGroup
    });
    const { createOneRecordMutation } = useCreateOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewFilterGroup
    });
    const { updateOneRecordMutation } = useUpdateOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewFilterGroup
    });
    const { objectMetadataItems } = useObjectMetadataItems();
    const apolloClient = useApolloClient();
    const createViewFilterGroupRecord = useCallback(async (viewFilterGroup, view)=>{
        const result = await apolloClient.mutate({
            mutation: createOneRecordMutation,
            variables: {
                input: {
                    id: viewFilterGroup.id,
                    viewId: view.id,
                    parentViewFilterGroupId: viewFilterGroup.parentViewFilterGroupId,
                    logicalOperator: viewFilterGroup.logicalOperator,
                    positionInViewFilterGroup: viewFilterGroup.positionInViewFilterGroup
                }
            },
            update: (cache, { data })=>{
                const record = data?.createViewFilterGroup;
                if (!isDefined(record)) return;
                triggerCreateRecordsOptimisticEffect({
                    cache,
                    objectMetadataItem,
                    recordsToCreate: [
                        record
                    ],
                    objectMetadataItems
                });
            }
        });
        if (!result.data) {
            throw new Error('Failed to create view filter group');
        }
        return {
            newRecordId: result.data.createViewFilterGroup.id
        };
    }, [
        apolloClient,
        createOneRecordMutation,
        objectMetadataItem,
        objectMetadataItems
    ]);
    const createViewFilterGroupRecords = useCallback(async (viewFilterGroupsToCreate, view)=>{
        if (!viewFilterGroupsToCreate.length) return [];
        const oldToNewId = new Map();
        for (const viewFilterGroupToCreate of viewFilterGroupsToCreate){
            const newParentViewFilterGroupId = isDefined(viewFilterGroupToCreate.parentViewFilterGroupId) ? oldToNewId.get(viewFilterGroupToCreate.parentViewFilterGroupId) ?? viewFilterGroupToCreate.parentViewFilterGroupId : undefined;
            const { newRecordId } = await createViewFilterGroupRecord({
                ...viewFilterGroupToCreate,
                parentViewFilterGroupId: newParentViewFilterGroupId
            }, view);
            oldToNewId.set(viewFilterGroupToCreate.id, newRecordId);
        }
        const newRecordIds = viewFilterGroupsToCreate.map((viewFilterGroup)=>{
            const newId = oldToNewId.get(viewFilterGroup.id);
            if (!newId) {
                throw new Error('Failed to create view filter group');
            }
            return newId;
        });
        return newRecordIds;
    }, [
        createViewFilterGroupRecord
    ]);
    const updateViewFilterGroupRecords = useCallback((viewFilterGroupsToUpdate)=>{
        if (!viewFilterGroupsToUpdate.length) return;
        return Promise.all(viewFilterGroupsToUpdate.map((viewFilterGroup)=>apolloClient.mutate({
                mutation: updateOneRecordMutation,
                variables: {
                    idToUpdate: viewFilterGroup.id,
                    input: {
                        parentViewFilterGroupId: viewFilterGroup.parentViewFilterGroupId,
                        logicalOperator: viewFilterGroup.logicalOperator,
                        positionInViewFilterGroup: viewFilterGroup.positionInViewFilterGroup
                    }
                },
                update: (cache, { data })=>{
                    const record = data?.updateViewFilterGroup;
                    if (!isDefined(record)) return;
                    const cachedRecord = getRecordFromCache(record.id, cache);
                    if (!isDefined(cachedRecord)) return;
                    triggerUpdateRecordOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        currentRecord: cachedRecord,
                        updatedRecord: record,
                        objectMetadataItems
                    });
                }
            })));
    }, [
        apolloClient,
        getRecordFromCache,
        objectMetadataItem,
        objectMetadataItems,
        updateOneRecordMutation
    ]);
    const deleteViewFilterGroupRecords = useCallback((viewFilterGroupIdsToDelete)=>{
        if (!viewFilterGroupIdsToDelete.length) return;
        return Promise.all(viewFilterGroupIdsToDelete.map((viewFilterGroupId)=>apolloClient.mutate({
                mutation: destroyOneRecordMutation,
                variables: {
                    idToDestroy: viewFilterGroupId
                },
                update: (cache, { data })=>{
                    const record = data?.destroyViewFilterGroup;
                    if (!isDefined(record)) return;
                    const cachedRecord = getRecordFromCache(record.id, cache);
                    if (!isDefined(cachedRecord)) return;
                    triggerDestroyRecordsOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        recordsToDestroy: [
                            cachedRecord
                        ],
                        objectMetadataItems
                    });
                }
            })));
    }, [
        apolloClient,
        destroyOneRecordMutation,
        getRecordFromCache,
        objectMetadataItem,
        objectMetadataItems
    ]);
    return {
        createViewFilterGroupRecords,
        updateViewFilterGroupRecords,
        deleteViewFilterGroupRecords
    };
};

//# sourceMappingURL=data:application/json;base64,