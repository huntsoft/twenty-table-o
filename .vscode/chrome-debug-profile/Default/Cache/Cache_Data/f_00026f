import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/ui/field/input/components/DoubleTextInput.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/DoubleTextInput.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import __vite__cjsImport3_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport3_react["useEffect"]; const useRef = __vite__cjsImport3_react["useRef"]; const useState = __vite__cjsImport3_react["useState"];
import __vite__cjsImport4_tsKeyEnum from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/ts-key-enum.js?v=226f7286"; const Key = __vite__cjsImport4_tsKeyEnum["Key"];
import { useScopedHotkeys } from "/src/modules/ui/utilities/hotkey/hooks/useScopedHotkeys.ts";
import { FieldInputContainer } from "/src/modules/ui/field/input/components/FieldInputContainer.tsx";
import { useListenClickOutside } from "/src/modules/ui/utilities/pointer-event/hooks/useListenClickOutside.ts";
import { splitFullName } from "/src/utils/format/spiltFullName.ts";
import { turnIntoEmptyStringIfWhitespacesOnly } from "/src/utils/string/turnIntoEmptyStringIfWhitespacesOnly.ts";
import { StyledTextInput } from "/src/modules/ui/field/input/components/TextInput.tsx";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
const StyledContainer = styled.div`
  display: flex;
  justify-content: space-between;

  & > input:last-child {
    border-left: 1px solid ${({ theme })=>theme.border.color.strong};
    padding-left: ${({ theme })=>theme.spacing(2)};
  }
`;
_c = StyledContainer;
export const DoubleTextInput = ({ firstValue, secondValue, firstValuePlaceholder, secondValuePlaceholder, hotkeyScope, onClickOutside, onEnter, onEscape, onShiftTab, onTab, onChange, onPaste })=>{
    _s();
    const [firstInternalValue, setFirstInternalValue] = useState(firstValue);
    const [secondInternalValue, setSecondInternalValue] = useState(secondValue);
    const firstValueInputRef = useRef(null);
    const secondValueInputRef = useRef(null);
    const containerRef = useRef(null);
    useEffect(()=>{
        setFirstInternalValue(firstValue);
        setSecondInternalValue(secondValue);
    }, [
        firstValue,
        secondValue
    ]);
    const handleChange = (newFirstValue, newSecondValue)=>{
        setFirstInternalValue(newFirstValue);
        setSecondInternalValue(newSecondValue);
        onChange?.({
            firstValue: newFirstValue,
            secondValue: newSecondValue
        });
    };
    const [focusPosition, setFocusPosition] = useState('left');
    useScopedHotkeys(Key.Enter, ()=>{
        onEnter({
            firstValue: firstInternalValue,
            secondValue: secondInternalValue
        });
    }, hotkeyScope, [
        onEnter,
        firstInternalValue,
        secondInternalValue
    ]);
    useScopedHotkeys([
        Key.Escape
    ], ()=>{
        onEscape({
            firstValue: firstInternalValue,
            secondValue: secondInternalValue
        });
    }, hotkeyScope, [
        onEscape,
        firstInternalValue,
        secondInternalValue
    ]);
    useScopedHotkeys('tab', ()=>{
        if (focusPosition === 'left') {
            setFocusPosition('right');
            secondValueInputRef.current?.focus();
        } else {
            onTab?.({
                firstValue: firstInternalValue,
                secondValue: secondInternalValue
            });
        }
    }, hotkeyScope, [
        onTab,
        firstInternalValue,
        secondInternalValue,
        focusPosition
    ]);
    useScopedHotkeys('shift+tab', ()=>{
        if (focusPosition === 'right') {
            setFocusPosition('left');
            firstValueInputRef.current?.focus();
        } else {
            onShiftTab?.({
                firstValue: firstInternalValue,
                secondValue: secondInternalValue
            });
        }
    }, hotkeyScope, [
        onShiftTab,
        firstInternalValue,
        secondInternalValue,
        focusPosition
    ]);
    useListenClickOutside({
        refs: [
            containerRef
        ],
        callback: (event)=>{
            onClickOutside?.(event, {
                firstValue: firstInternalValue,
                secondValue: secondInternalValue
            });
        },
        enabled: isDefined(onClickOutside),
        listenerId: 'double-text-input'
    });
    const handleOnPaste = (event)=>{
        if (firstInternalValue.length > 0 || secondInternalValue.length > 0) {
            return;
        }
        event.preventDefault();
        const name = event.clipboardData.getData('Text');
        const splittedName = splitFullName(name);
        onPaste?.({
            firstValue: splittedName[0],
            secondValue: splittedName[1]
        });
    };
    const handleClickToPreventParentClickEvents = (event)=>{
        event.stopPropagation();
        event.preventDefault();
    };
    return /*#__PURE__*/ _jsxDEV(FieldInputContainer, {
        children: /*#__PURE__*/ _jsxDEV(StyledContainer, {
            ref: containerRef,
            children: [
                /*#__PURE__*/ _jsxDEV(StyledTextInput, {
                    autoComplete: "off",
                    autoFocus: true,
                    onFocus: ()=>setFocusPosition('left'),
                    ref: firstValueInputRef,
                    placeholder: firstValuePlaceholder,
                    value: firstInternalValue,
                    onChange: (event)=>{
                        handleChange(turnIntoEmptyStringIfWhitespacesOnly(event.target.value), secondInternalValue);
                    },
                    onPaste: (event)=>handleOnPaste(event),
                    onClick: handleClickToPreventParentClickEvents
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/DoubleTextInput.tsx",
                    lineNumber: 187,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDEV(StyledTextInput, {
                    autoComplete: "off",
                    onFocus: ()=>setFocusPosition('right'),
                    ref: secondValueInputRef,
                    placeholder: secondValuePlaceholder,
                    value: secondInternalValue,
                    onChange: (event)=>{
                        handleChange(firstInternalValue, turnIntoEmptyStringIfWhitespacesOnly(event.target.value));
                    },
                    onClick: handleClickToPreventParentClickEvents
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/DoubleTextInput.tsx",
                    lineNumber: 205,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/DoubleTextInput.tsx",
            lineNumber: 186,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/DoubleTextInput.tsx",
        lineNumber: 185,
        columnNumber: 5
    }, this);
};
_s(DoubleTextInput, "HLLgO7CnVr6qzkU09crCjEyQSfk=", false, function() {
    return [
        useScopedHotkeys,
        useScopedHotkeys,
        useScopedHotkeys,
        useScopedHotkeys,
        useListenClickOutside
    ];
});
_c1 = DoubleTextInput;
var _c, _c1;
$RefreshReg$(_c, "StyledContainer");
$RefreshReg$(_c1, "DoubleTextInput");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/DoubleTextInput.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/DoubleTextInput.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,