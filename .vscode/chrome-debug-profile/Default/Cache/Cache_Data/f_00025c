import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownFilterSelectMenuItem.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownFilterSelectMenuItem.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { OBJECT_FILTER_DROPDOWN_ID } from "/src/modules/object-record/object-filter-dropdown/constants/ObjectFilterDropdownId.ts";
import { fieldMetadataItemIdUsedInDropdownComponentState } from "/src/modules/object-record/object-filter-dropdown/states/fieldMetadataItemIdUsedInDropdownComponentState.ts";
import { objectFilterDropdownFilterIsSelectedComponentState } from "/src/modules/object-record/object-filter-dropdown/states/objectFilterDropdownFilterIsSelectedComponentState.ts";
import { objectFilterDropdownIsSelectingCompositeFieldComponentState } from "/src/modules/object-record/object-filter-dropdown/states/objectFilterDropdownIsSelectingCompositeFieldComponentState.ts";
import { objectFilterDropdownSubMenuFieldTypeComponentState } from "/src/modules/object-record/object-filter-dropdown/states/objectFilterDropdownSubMenuFieldTypeComponentState.ts";
import { selectedOperandInDropdownComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedOperandInDropdownComponentState.ts";
import { getFilterTypeFromFieldType } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { selectedFilterComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedFilterComponentState.ts";
import { isCompositeField } from "/src/modules/object-record/object-filter-dropdown/utils/isCompositeField.ts";
import { currentRecordFiltersComponentState } from "/src/modules/object-record/record-filter/states/currentRecordFiltersComponentState.ts";
import { findDuplicateRecordFilterInNonAdvancedRecordFilters } from "/src/modules/object-record/record-filter/utils/findDuplicateRecordFilterInNonAdvancedRecordFilters.ts";
import { getRecordFilterOperands } from "/src/modules/object-record/record-filter/utils/getRecordFilterOperands.ts";
import { SingleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/single-record-picker/types/SingleRecordPickerHotkeyScope.ts";
import { useSelectableList } from "/src/modules/ui/layout/selectable-list/hooks/useSelectableList.ts";
import { useSetHotkeyScope } from "/src/modules/ui/utilities/hotkey/hooks/useSetHotkeyScope.ts";
import { useRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentStateV2.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { MenuItemSelect, useIcons } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const ObjectFilterDropdownFilterSelectMenuItem = ({ fieldMetadataItemToSelect })=>{
    _s();
    const setFieldMetadataItemIdUsedInDropdown = useSetRecoilComponentStateV2(fieldMetadataItemIdUsedInDropdownComponentState);
    const [, setObjectFilterDropdownSubMenuFieldType] = useRecoilComponentStateV2(objectFilterDropdownSubMenuFieldTypeComponentState);
    const [, setObjectFilterDropdownIsSelectingCompositeField] = useRecoilComponentStateV2(objectFilterDropdownIsSelectingCompositeFieldComponentState);
    const [, setObjectFilterDropdownFilterIsSelected] = useRecoilComponentStateV2(objectFilterDropdownFilterIsSelectedComponentState);
    const { isSelectedItemIdSelector, resetSelectedItem } = useSelectableList(OBJECT_FILTER_DROPDOWN_ID);
    const isSelectedItem = useRecoilValue(isSelectedItemIdSelector(fieldMetadataItemToSelect.id));
    const setSelectedOperandInDropdown = useSetRecoilComponentStateV2(selectedOperandInDropdownComponentState);
    const setHotkeyScope = useSetHotkeyScope();
    const currentRecordFilters = useRecoilComponentValueV2(currentRecordFiltersComponentState);
    const setSelectedFilter = useSetRecoilComponentStateV2(selectedFilterComponentState);
    const handleSelectFilter = (fieldMetadataItem)=>{
        setFieldMetadataItemIdUsedInDropdown(fieldMetadataItem.id);
        const filterType = getFilterTypeFromFieldType(fieldMetadataItem.type);
        if (filterType === 'RELATION' || filterType === 'SELECT') {
            setHotkeyScope(SingleRecordPickerHotkeyScope.SingleRecordPicker);
        }
        const defaultOperand = getRecordFilterOperands({
            filterType
        })[0];
        setObjectFilterDropdownFilterIsSelected(true);
        const duplicateFilterInCurrentRecordFilters = findDuplicateRecordFilterInNonAdvancedRecordFilters({
            recordFilters: currentRecordFilters,
            fieldMetadataItemId: fieldMetadataItem.id
        });
        const filterIsAlreadyInCurrentRecordFilters = isDefined(duplicateFilterInCurrentRecordFilters);
        if (filterIsAlreadyInCurrentRecordFilters) {
            setSelectedFilter({
                ...duplicateFilterInCurrentRecordFilters
            });
            setSelectedOperandInDropdown(duplicateFilterInCurrentRecordFilters.operand);
        } else {
            setSelectedOperandInDropdown(defaultOperand);
        }
    };
    const { getIcon } = useIcons();
    const Icon = getIcon(fieldMetadataItemToSelect.icon);
    const shouldShowSubMenu = isCompositeField(fieldMetadataItemToSelect.type);
    const handleClick = ()=>{
        resetSelectedItem();
        const filterType = getFilterTypeFromFieldType(fieldMetadataItemToSelect.type);
        if (isCompositeField(filterType)) {
            setObjectFilterDropdownSubMenuFieldType(filterType);
            setFieldMetadataItemIdUsedInDropdown(fieldMetadataItemToSelect.id);
            setObjectFilterDropdownIsSelectingCompositeField(true);
        } else {
            handleSelectFilter(fieldMetadataItemToSelect);
        }
    };
    return /*#__PURE__*/ _jsxDEV(MenuItemSelect, {
        selected: false,
        hovered: isSelectedItem,
        onClick: handleClick,
        LeftIcon: Icon,
        text: fieldMetadataItemToSelect.label,
        hasSubMenu: shouldShowSubMenu
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownFilterSelectMenuItem.tsx",
        lineNumber: 134,
        columnNumber: 5
    }, this);
};
_s(ObjectFilterDropdownFilterSelectMenuItem, "tyJE/QKuSYUvuvt1+zGBSL/g+Rc=", false, function() {
    return [
        useSetRecoilComponentStateV2,
        useRecoilComponentStateV2,
        useRecoilComponentStateV2,
        useRecoilComponentStateV2,
        useSelectableList,
        useRecoilValue,
        useSetRecoilComponentStateV2,
        useSetHotkeyScope,
        useRecoilComponentValueV2,
        useSetRecoilComponentStateV2,
        useIcons
    ];
});
_c = ObjectFilterDropdownFilterSelectMenuItem;
var _c;
$RefreshReg$(_c, "ObjectFilterDropdownFilterSelectMenuItem");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownFilterSelectMenuItem.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownFilterSelectMenuItem.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,