import __vite__cjsImport0__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNonEmptyString = __vite__cjsImport0__sniptt_guards["isNonEmptyString"];
import { triggerUpdateRelationsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerUpdateRelationsOptimisticEffect.ts";
import { getEdgeTypename } from "/src/modules/object-record/cache/utils/getEdgeTypename.ts";
import { isObjectRecordConnectionWithRefs } from "/src/modules/object-record/cache/utils/isObjectRecordConnectionWithRefs.ts";
import { isRecordMatchingFilter } from "/src/modules/object-record/record-filter/utils/isRecordMatchingFilter.ts";
import { encodeCursor } from "/src/modules/apollo/utils/encodeCursor.ts";
import { getRecordFromCache } from "/src/modules/object-record/cache/utils/getRecordFromCache.ts";
import { getRecordNodeFromRecord } from "/src/modules/object-record/cache/utils/getRecordNodeFromRecord.ts";
import { parseApolloStoreFieldName } from "/src/utils/parseApolloStoreFieldName.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const triggerCreateRecordsOptimisticEffect = ({ cache, objectMetadataItem, recordsToCreate, objectMetadataItems, shouldMatchRootQueryFilter, checkForRecordInCache = false })=>{
    const getRecordNodeFromCache = (recordId)=>{
        const cachedRecord = getRecordFromCache({
            cache,
            objectMetadataItem,
            objectMetadataItems,
            recordId
        });
        return getRecordNodeFromRecord({
            objectMetadataItem,
            objectMetadataItems,
            record: cachedRecord,
            computeReferences: false
        });
    };
    recordsToCreate.forEach((record)=>{
        const currentSourceRecord = checkForRecordInCache ? getRecordNodeFromCache(record.id) : null;
        triggerUpdateRelationsOptimisticEffect({
            cache,
            sourceObjectMetadataItem: objectMetadataItem,
            currentSourceRecord,
            updatedSourceRecord: record,
            objectMetadataItems
        });
    });
    cache.modify({
        broadcast: false,
        fields: {
            [objectMetadataItem.namePlural]: (rootQueryCachedResponse, { DELETE: _DELETE, readField, storeFieldName, toReference })=>{
                const shouldSkip = !isObjectRecordConnectionWithRefs(objectMetadataItem.nameSingular, rootQueryCachedResponse);
                if (shouldSkip) {
                    return rootQueryCachedResponse;
                }
                const { fieldVariables: rootQueryVariables } = parseApolloStoreFieldName(storeFieldName);
                const rootQueryFilter = rootQueryVariables?.filter;
                const rootQueryCachedObjectRecordConnection = rootQueryCachedResponse;
                const rootQueryCachedRecordEdges = readField('edges', rootQueryCachedObjectRecordConnection);
                const rootQueryCachedRecordTotalCount = readField('totalCount', rootQueryCachedObjectRecordConnection);
                const rootQueryCachedPageInfo = readField('pageInfo', rootQueryCachedObjectRecordConnection);
                const nextRootQueryCachedRecordEdges = rootQueryCachedRecordEdges ? [
                    ...rootQueryCachedRecordEdges
                ] : [];
                const nextQueryCachedPageInfo = isDefined(rootQueryCachedPageInfo) ? {
                    ...rootQueryCachedPageInfo
                } : {};
                const hasAddedRecords = recordsToCreate.map((recordToCreate)=>{
                    if (isNonEmptyString(recordToCreate.id)) {
                        if (isDefined(rootQueryFilter) && shouldMatchRootQueryFilter === true) {
                            const recordToCreateMatchesThisRootQueryFilter = isRecordMatchingFilter({
                                record: recordToCreate,
                                filter: rootQueryFilter,
                                objectMetadataItem
                            });
                            if (!recordToCreateMatchesThisRootQueryFilter) {
                                return false;
                            }
                        }
                        const recordToCreateReference = toReference(recordToCreate);
                        if (!recordToCreateReference) {
                            throw new Error(`Failed to create reference for record with id: ${recordToCreate.id}`);
                        }
                        const recordAlreadyInCache = rootQueryCachedRecordEdges?.some((cachedEdge)=>{
                            return cache.identify(recordToCreateReference) === cache.identify(cachedEdge.node);
                        });
                        if (recordToCreateReference && !recordAlreadyInCache) {
                            const cursor = encodeCursor(recordToCreate);
                            const edge = {
                                __typename: getEdgeTypename(objectMetadataItem.nameSingular),
                                node: recordToCreateReference,
                                cursor
                            };
                            if (!isDefined(recordToCreate.position) || recordToCreate.position === 'first') {
                                nextRootQueryCachedRecordEdges.unshift(edge);
                                nextQueryCachedPageInfo.startCursor = cursor;
                            } else if (recordToCreate.position === 'last') {
                                nextRootQueryCachedRecordEdges.push(edge);
                                nextQueryCachedPageInfo.endCursor = cursor;
                            } else if (typeof recordToCreate.position === 'number') {
                                let index = Math.round(nextRootQueryCachedRecordEdges.length * recordToCreate.position);
                                if (recordToCreate.position < 0) {
                                    index = Math.max(0, nextRootQueryCachedRecordEdges.length + Math.round(recordToCreate.position));
                                } else if (recordToCreate.position > 1) {
                                    index = nextRootQueryCachedRecordEdges.length;
                                }
                                index = Math.max(0, Math.min(index, nextRootQueryCachedRecordEdges.length));
                                nextRootQueryCachedRecordEdges.splice(index, 0, edge);
                                if (index === 0) {
                                    nextQueryCachedPageInfo.startCursor = cursor;
                                } else if (index === nextRootQueryCachedRecordEdges.length - 1) {
                                    nextQueryCachedPageInfo.endCursor = cursor;
                                }
                            }
                            return true;
                        }
                    }
                    return false;
                }).some((hasAddedRecord)=>hasAddedRecord);
                if (!hasAddedRecords) {
                    return rootQueryCachedObjectRecordConnection;
                }
                return {
                    ...rootQueryCachedObjectRecordConnection,
                    edges: nextRootQueryCachedRecordEdges,
                    totalCount: isDefined(rootQueryCachedRecordTotalCount) ? rootQueryCachedRecordTotalCount + 1 : undefined,
                    pageInfo: nextQueryCachedPageInfo
                };
            }
        }
    });
};

//# sourceMappingURL=data:application/json;base64,