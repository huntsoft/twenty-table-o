import __vite__cjsImport0_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport0_react["useCallback"]; const useEffect = __vite__cjsImport0_react["useEffect"]; const useState = __vite__cjsImport0_react["useState"];
import { fetchAllThreadMessagesOperationSignatureFactory } from "/src/modules/activities/emails/graphql/operation-signatures/factories/fetchAllThreadMessagesOperationSignatureFactory.ts";
import { viewableRecordIdComponentState } from "/src/modules/command-menu/pages/record-page/states/viewableRecordIdComponentState.ts";
import { CoreObjectNameSingular } from "/src/modules/object-metadata/types/CoreObjectNameSingular.ts";
import { useFindManyRecords } from "/src/modules/object-record/hooks/useFindManyRecords.ts";
import { useFindOneRecord } from "/src/modules/object-record/hooks/useFindOneRecord.ts";
import { useUpsertRecordsInStore } from "/src/modules/object-record/record-store/hooks/useUpsertRecordsInStore.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useEmailThreadInCommandMenu = ()=>{
    const viewableRecordId = useRecoilComponentValueV2(viewableRecordIdComponentState);
    const { upsertRecords } = useUpsertRecordsInStore();
    const [lastMessageId, setLastMessageId] = useState(null);
    const [lastMessageChannelId, setLastMessageChannelId] = useState(null);
    const [isMessagesFetchComplete, setIsMessagesFetchComplete] = useState(false);
    const { record: thread } = useFindOneRecord({
        objectNameSingular: CoreObjectNameSingular.MessageThread,
        objectRecordId: viewableRecordId ?? '',
        recordGqlFields: {
            id: true
        },
        onCompleted: (record)=>{
            upsertRecords([
                record
            ]);
        }
    });
    const FETCH_ALL_MESSAGES_OPERATION_SIGNATURE = fetchAllThreadMessagesOperationSignatureFactory({
        messageThreadId: viewableRecordId
    });
    const { records: messages, loading: messagesLoading, fetchMoreRecords, hasNextPage } = useFindManyRecords({
        limit: FETCH_ALL_MESSAGES_OPERATION_SIGNATURE.variables.limit,
        filter: FETCH_ALL_MESSAGES_OPERATION_SIGNATURE.variables.filter,
        objectNameSingular: FETCH_ALL_MESSAGES_OPERATION_SIGNATURE.objectNameSingular,
        orderBy: FETCH_ALL_MESSAGES_OPERATION_SIGNATURE.variables.orderBy,
        recordGqlFields: FETCH_ALL_MESSAGES_OPERATION_SIGNATURE.fields,
        skip: !viewableRecordId
    });
    const fetchMoreMessages = useCallback(()=>{
        if (!messagesLoading && hasNextPage) {
            fetchMoreRecords();
        } else if (!hasNextPage) {
            setIsMessagesFetchComplete(true);
        }
    }, [
        fetchMoreRecords,
        messagesLoading,
        hasNextPage
    ]);
    useEffect(()=>{
        if (messages.length > 0 && isMessagesFetchComplete) {
            const lastMessage = messages[messages.length - 1];
            setLastMessageId(lastMessage.id);
        }
    }, [
        messages,
        isMessagesFetchComplete
    ]);
    // TODO: introduce nested filters so we can retrieve the message sender directly from the message query
    const { records: messageSenders } = useFindManyRecords({
        filter: {
            messageId: {
                in: messages.map(({ id })=>id)
            },
            role: {
                eq: 'from'
            }
        },
        objectNameSingular: CoreObjectNameSingular.MessageParticipant,
        recordGqlFields: {
            id: true,
            role: true,
            displayName: true,
            messageId: true,
            handle: true,
            person: true,
            workspaceMember: true
        },
        skip: messages.length === 0
    });
    const { records: messageChannelMessageAssociationData } = useFindManyRecords({
        filter: {
            messageId: {
                eq: lastMessageId ?? ''
            }
        },
        objectNameSingular: CoreObjectNameSingular.MessageChannelMessageAssociation,
        recordGqlFields: {
            id: true,
            messageId: true,
            messageChannelId: true,
            messageThreadExternalId: true,
            messageExternalId: true
        },
        skip: !lastMessageId || !isMessagesFetchComplete
    });
    useEffect(()=>{
        if (messageChannelMessageAssociationData.length > 0) {
            setLastMessageChannelId(messageChannelMessageAssociationData[0].messageChannelId);
        }
    }, [
        messageChannelMessageAssociationData
    ]);
    const { records: messageChannelData, loading: messageChannelLoading } = useFindManyRecords({
        filter: {
            id: {
                eq: lastMessageChannelId ?? ''
            }
        },
        objectNameSingular: CoreObjectNameSingular.MessageChannel,
        recordGqlFields: {
            id: true,
            handle: true,
            connectedAccount: {
                id: true,
                provider: true
            }
        },
        skip: !lastMessageChannelId
    });
    const messageThreadExternalId = messageChannelMessageAssociationData.length > 0 ? messageChannelMessageAssociationData[0].messageThreadExternalId : null;
    const lastMessageExternalId = messageChannelMessageAssociationData.length > 0 ? messageChannelMessageAssociationData[0].messageExternalId : null;
    const connectedAccountHandle = messageChannelData.length > 0 ? messageChannelData[0].handle : null;
    const messagesWithSender = messages.map((message)=>{
        const sender = messageSenders.find((messageSender)=>messageSender.messageId === message.id);
        if (!sender) {
            return null;
        }
        return {
            ...message,
            sender
        };
    }).filter(isDefined);
    const connectedAccount = messageChannelData.length > 0 ? messageChannelData[0]?.connectedAccount : null;
    const connectedAccountProvider = connectedAccount?.provider ?? null;
    return {
        thread,
        messages: messagesWithSender,
        messageThreadExternalId,
        connectedAccountHandle,
        connectedAccountProvider,
        threadLoading: messagesLoading,
        messageChannelLoading,
        lastMessageExternalId,
        fetchMoreMessages
    };
};

//# sourceMappingURL=data:application/json;base64,