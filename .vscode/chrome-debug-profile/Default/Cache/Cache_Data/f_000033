import { AppPath } from "/src/modules/types/AppPath.ts";
import { ApolloError, useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport2_react["useCallback"];
import { snapshot_UNSTABLE, useGotoRecoilSnapshot, useRecoilCallback, useRecoilValue, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { iconsState } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { currentWorkspaceMemberState } from "/src/modules/auth/states/currentWorkspaceMemberState.ts";
import { currentWorkspaceState } from "/src/modules/auth/states/currentWorkspaceState.ts";
import { isCurrentUserLoadedState } from "/src/modules/auth/states/isCurrentUserLoadingState.ts";
import { isVerifyPendingState } from "/src/modules/auth/states/isVerifyPendingState.ts";
import { workspacesState } from "/src/modules/auth/states/workspaces.ts";
import { billingState } from "/src/modules/client-config/states/billingState.ts";
import { clientConfigApiStatusState } from "/src/modules/client-config/states/clientConfigApiStatusState.ts";
import { isDebugModeState } from "/src/modules/client-config/states/isDebugModeState.ts";
import { supportChatState } from "/src/modules/client-config/states/supportChatState.ts";
import { REACT_APP_SERVER_BASE_URL } from "/src/config/index.ts";
import { useCheckUserExistsLazyQuery, useGetAuthTokensFromLoginTokenMutation, useGetCurrentUserLazyQuery, useGetLoginTokenFromCredentialsMutation, useGetLoginTokenFromEmailVerificationTokenMutation, useSignUpMutation } from "/src/generated/graphql.tsx";
import { currentWorkspaceMembersState } from "/src/modules/auth/states/currentWorkspaceMembersStates.ts";
import { isDeveloperDefaultSignInPrefilledState } from "/src/modules/client-config/states/isDeveloperDefaultSignInPrefilledState.ts";
import { DateFormat } from "/src/modules/localization/constants/DateFormat.ts";
import { TimeFormat } from "/src/modules/localization/constants/TimeFormat.ts";
import { dateTimeFormatState } from "/src/modules/localization/states/dateTimeFormatState.ts";
import { detectDateFormat } from "/src/modules/localization/utils/detectDateFormat.ts";
import { detectTimeFormat } from "/src/modules/localization/utils/detectTimeFormat.ts";
import { detectTimeZone } from "/src/modules/localization/utils/detectTimeZone.ts";
import { getDateFormatFromWorkspaceDateFormat } from "/src/modules/localization/utils/getDateFormatFromWorkspaceDateFormat.ts";
import { getTimeFormatFromWorkspaceTimeFormat } from "/src/modules/localization/utils/getTimeFormatFromWorkspaceTimeFormat.ts";
import { currentUserState } from "/src/modules/auth/states/currentUserState.ts";
import { tokenPairState } from "/src/modules/auth/states/tokenPairState.ts";
import { currentUserWorkspaceState } from "/src/modules/auth/states/currentUserWorkspaceState.ts";
import { SignInUpStep, signInUpStepState } from "/src/modules/auth/states/signInUpStepState.ts";
import { workspacePublicDataState } from "/src/modules/auth/states/workspacePublicDataState.ts";
import { captchaState } from "/src/modules/client-config/states/captchaState.ts";
import { isEmailVerificationRequiredState } from "/src/modules/client-config/states/isEmailVerificationRequiredState.ts";
import { isMultiWorkspaceEnabledState } from "/src/modules/client-config/states/isMultiWorkspaceEnabledState.ts";
import { useIsCurrentLocationOnAWorkspace } from "/src/modules/domain-manager/hooks/useIsCurrentLocationOnAWorkspace.ts";
import { useLastAuthenticatedWorkspaceDomain } from "/src/modules/domain-manager/hooks/useLastAuthenticatedWorkspaceDomain.ts";
import { useRedirect } from "/src/modules/domain-manager/hooks/useRedirect.ts";
import { useRedirectToWorkspaceDomain } from "/src/modules/domain-manager/hooks/useRedirectToWorkspaceDomain.ts";
import { domainConfigurationState } from "/src/modules/domain-manager/states/domainConfigurationState.ts";
import { isAppWaitingForFreshObjectMetadataState } from "/src/modules/object-metadata/states/isAppWaitingForFreshObjectMetadataState.ts";
import { workspaceAuthProvidersState } from "/src/modules/workspace/states/workspaceAuthProvidersState.ts";
import { i18n } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_core.js?v=226f7286";
import { useSearchParams } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react-router-dom.js?v=226f7286";
import { getWorkspaceUrl } from "/src/utils/getWorkspaceUrl.ts";
import { dynamicActivate } from "/src/utils/i18n/dynamicActivate.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useAuth = ()=>{
    const setTokenPair = useSetRecoilState(tokenPairState);
    const setCurrentUser = useSetRecoilState(currentUserState);
    const setCurrentWorkspaceMember = useSetRecoilState(currentWorkspaceMemberState);
    const setCurrentUserWorkspace = useSetRecoilState(currentUserWorkspaceState);
    const setIsAppWaitingForFreshObjectMetadataState = useSetRecoilState(isAppWaitingForFreshObjectMetadataState);
    const setCurrentWorkspaceMembers = useSetRecoilState(currentWorkspaceMembersState);
    const isMultiWorkspaceEnabled = useRecoilValue(isMultiWorkspaceEnabledState);
    const isEmailVerificationRequired = useRecoilValue(isEmailVerificationRequiredState);
    const setSignInUpStep = useSetRecoilState(signInUpStepState);
    const setCurrentWorkspace = useSetRecoilState(currentWorkspaceState);
    const setIsVerifyPendingState = useSetRecoilState(isVerifyPendingState);
    const setWorkspaces = useSetRecoilState(workspacesState);
    const { redirect } = useRedirect();
    const { redirectToWorkspaceDomain } = useRedirectToWorkspaceDomain();
    const [getLoginTokenFromCredentials] = useGetLoginTokenFromCredentialsMutation();
    const [signUp] = useSignUpMutation();
    const [getAuthTokensFromLoginToken] = useGetAuthTokensFromLoginTokenMutation();
    const [getLoginTokenFromEmailVerificationToken] = useGetLoginTokenFromEmailVerificationTokenMutation();
    const [getCurrentUser] = useGetCurrentUserLazyQuery();
    const { isOnAWorkspace } = useIsCurrentLocationOnAWorkspace();
    const workspacePublicData = useRecoilValue(workspacePublicDataState);
    const { setLastAuthenticateWorkspaceDomain } = useLastAuthenticatedWorkspaceDomain();
    const [checkUserExistsQuery, { data: checkUserExistsData }] = useCheckUserExistsLazyQuery();
    const client = useApolloClient();
    const goToRecoilSnapshot = useGotoRecoilSnapshot();
    const setDateTimeFormat = useSetRecoilState(dateTimeFormatState);
    const [, setSearchParams] = useSearchParams();
    const clearSession = useRecoilCallback(({ snapshot })=>async ()=>{
            const emptySnapshot = snapshot_UNSTABLE();
            const iconsValue = snapshot.getLoadable(iconsState).getValue();
            const authProvidersValue = snapshot.getLoadable(workspaceAuthProvidersState).getValue();
            const billing = snapshot.getLoadable(billingState).getValue();
            const isDeveloperDefaultSignInPrefilled = snapshot.getLoadable(isDeveloperDefaultSignInPrefilledState).getValue();
            const supportChat = snapshot.getLoadable(supportChatState).getValue();
            const isDebugMode = snapshot.getLoadable(isDebugModeState).getValue();
            const captcha = snapshot.getLoadable(captchaState).getValue();
            const clientConfigApiStatus = snapshot.getLoadable(clientConfigApiStatusState).getValue();
            const isCurrentUserLoaded = snapshot.getLoadable(isCurrentUserLoadedState).getValue();
            const isMultiWorkspaceEnabled = snapshot.getLoadable(isMultiWorkspaceEnabledState).getValue();
            const domainConfiguration = snapshot.getLoadable(domainConfigurationState).getValue();
            const initialSnapshot = emptySnapshot.map(({ set })=>{
                set(iconsState, iconsValue);
                set(workspaceAuthProvidersState, authProvidersValue);
                set(billingState, billing);
                set(isDeveloperDefaultSignInPrefilledState, isDeveloperDefaultSignInPrefilled);
                set(supportChatState, supportChat);
                set(isDebugModeState, isDebugMode);
                set(captchaState, captcha);
                set(clientConfigApiStatusState, clientConfigApiStatus);
                set(isCurrentUserLoadedState, isCurrentUserLoaded);
                set(isMultiWorkspaceEnabledState, isMultiWorkspaceEnabled);
                set(domainConfigurationState, domainConfiguration);
                return undefined;
            });
            goToRecoilSnapshot(initialSnapshot);
            await client.clearStore();
            sessionStorage.clear();
            localStorage.clear();
            // We need to explicitly clear the state to trigger the cookie deletion which include the parent domain
            setLastAuthenticateWorkspaceDomain(null);
        }, [
        client,
        goToRecoilSnapshot,
        setLastAuthenticateWorkspaceDomain
    ]);
    const handleGetLoginTokenFromCredentials = useCallback(async (email, password, captchaToken)=>{
        try {
            const getLoginTokenResult = await getLoginTokenFromCredentials({
                variables: {
                    email,
                    password,
                    captchaToken
                }
            });
            if (isDefined(getLoginTokenResult.errors)) {
                throw getLoginTokenResult.errors;
            }
            if (!getLoginTokenResult.data?.getLoginTokenFromCredentials) {
                throw new Error('No login token');
            }
            return getLoginTokenResult.data.getLoginTokenFromCredentials;
        } catch (error) {
            // TODO: Get intellisense for graphql error extensions code (codegen?)
            if (error instanceof ApolloError && error.graphQLErrors[0]?.extensions?.code === 'EMAIL_NOT_VERIFIED') {
                setSearchParams({
                    email
                });
                setSignInUpStep(SignInUpStep.EmailVerification);
                throw error;
            }
            throw error;
        }
    }, [
        getLoginTokenFromCredentials,
        setSearchParams,
        setSignInUpStep
    ]);
    const handleGetLoginTokenFromEmailVerificationToken = useCallback(async (emailVerificationToken, captchaToken)=>{
        const loginTokenResult = await getLoginTokenFromEmailVerificationToken({
            variables: {
                emailVerificationToken,
                captchaToken
            }
        });
        if (isDefined(loginTokenResult.errors)) {
            throw loginTokenResult.errors;
        }
        if (!loginTokenResult.data?.getLoginTokenFromEmailVerificationToken) {
            throw new Error('No login token');
        }
        return loginTokenResult.data.getLoginTokenFromEmailVerificationToken;
    }, [
        getLoginTokenFromEmailVerificationToken
    ]);
    const loadCurrentUser = useCallback(async ()=>{
        const currentUserResult = await getCurrentUser({
            fetchPolicy: 'network-only'
        });
        if (isDefined(currentUserResult.error)) {
            throw new Error(currentUserResult.error.message);
        }
        const user = currentUserResult.data?.currentUser;
        if (!user) {
            throw new Error('No current user result');
        }
        let workspaceMember = null;
        setCurrentUser(user);
        if (isDefined(user.workspaceMembers)) {
            const workspaceMembers = user.workspaceMembers.map((workspaceMember)=>({
                    ...workspaceMember,
                    colorScheme: workspaceMember.colorScheme,
                    locale: workspaceMember.locale ?? 'en'
                }));
            setCurrentWorkspaceMembers(workspaceMembers);
        }
        if (isDefined(user.currentUserWorkspace)) {
            setCurrentUserWorkspace(user.currentUserWorkspace);
        }
        if (isDefined(user.workspaceMember)) {
            workspaceMember = {
                ...user.workspaceMember,
                colorScheme: user.workspaceMember?.colorScheme,
                locale: user.workspaceMember?.locale ?? 'en'
            };
            setCurrentWorkspaceMember(workspaceMember);
            // TODO: factorize with UserProviderEffect
            setDateTimeFormat({
                timeZone: workspaceMember.timeZone && workspaceMember.timeZone !== 'system' ? workspaceMember.timeZone : detectTimeZone(),
                dateFormat: isDefined(user.workspaceMember.dateFormat) ? getDateFormatFromWorkspaceDateFormat(user.workspaceMember.dateFormat) : DateFormat[detectDateFormat()],
                timeFormat: isDefined(user.workspaceMember.timeFormat) ? getTimeFormatFromWorkspaceTimeFormat(user.workspaceMember.timeFormat) : TimeFormat[detectTimeFormat()]
            });
            dynamicActivate(workspaceMember.locale ?? 'en');
        }
        const workspace = user.currentWorkspace ?? null;
        setCurrentWorkspace(workspace);
        if (isDefined(workspace) && isOnAWorkspace) {
            setLastAuthenticateWorkspaceDomain({
                workspaceId: workspace.id,
                workspaceUrl: getWorkspaceUrl(workspace.workspaceUrls)
            });
        }
        if (isDefined(user.workspaces)) {
            const validWorkspaces = user.workspaces.filter(({ workspace })=>workspace !== null && workspace !== undefined).map((validWorkspace)=>validWorkspace.workspace).filter(isDefined);
            setWorkspaces(validWorkspaces);
        }
        setIsAppWaitingForFreshObjectMetadataState(true);
        return {
            user,
            workspaceMember,
            workspace
        };
    }, [
        getCurrentUser,
        isOnAWorkspace,
        setCurrentUser,
        setCurrentUserWorkspace,
        setCurrentWorkspace,
        setCurrentWorkspaceMember,
        setCurrentWorkspaceMembers,
        setDateTimeFormat,
        setIsAppWaitingForFreshObjectMetadataState,
        setLastAuthenticateWorkspaceDomain,
        setWorkspaces
    ]);
    const handleGetAuthTokensFromLoginToken = useCallback(async (loginToken)=>{
        setIsVerifyPendingState(true);
        const getAuthTokensResult = await getAuthTokensFromLoginToken({
            variables: {
                loginToken
            }
        });
        if (isDefined(getAuthTokensResult.errors)) {
            throw getAuthTokensResult.errors;
        }
        if (!getAuthTokensResult.data?.getAuthTokensFromLoginToken) {
            throw new Error('No getAuthTokensFromLoginToken result');
        }
        setTokenPair(getAuthTokensResult.data?.getAuthTokensFromLoginToken.tokens);
        await loadCurrentUser();
        setIsVerifyPendingState(false);
    }, [
        setIsVerifyPendingState,
        getAuthTokensFromLoginToken,
        setTokenPair,
        loadCurrentUser
    ]);
    const handleCredentialsSignIn = useCallback(async (email, password, captchaToken)=>{
        const { loginToken } = await handleGetLoginTokenFromCredentials(email, password, captchaToken);
        await handleGetAuthTokensFromLoginToken(loginToken.token);
    }, [
        handleGetLoginTokenFromCredentials,
        handleGetAuthTokensFromLoginToken
    ]);
    const handleSignOut = useCallback(async ()=>{
        await clearSession();
    }, [
        clearSession
    ]);
    const handleCredentialsSignUp = useCallback(async (email, password, workspaceInviteHash, workspacePersonalInviteToken, captchaToken)=>{
        setIsVerifyPendingState(true);
        const signUpResult = await signUp({
            variables: {
                email,
                password,
                workspaceInviteHash,
                workspacePersonalInviteToken,
                captchaToken,
                locale: i18n.locale ?? 'en',
                ...workspacePublicData?.id ? {
                    workspaceId: workspacePublicData.id
                } : {}
            }
        });
        if (isDefined(signUpResult.errors)) {
            throw signUpResult.errors;
        }
        if (!signUpResult.data?.signUp) {
            throw new Error('No login token');
        }
        if (isEmailVerificationRequired) {
            setSearchParams({
                email
            });
            setSignInUpStep(SignInUpStep.EmailVerification);
            return null;
        }
        if (isMultiWorkspaceEnabled) {
            return redirectToWorkspaceDomain(getWorkspaceUrl(signUpResult.data.signUp.workspace.workspaceUrls), isEmailVerificationRequired ? AppPath.SignInUp : AppPath.Verify, {
                ...!isEmailVerificationRequired && {
                    loginToken: signUpResult.data.signUp.loginToken.token
                },
                email
            });
        }
        await handleGetAuthTokensFromLoginToken(signUpResult.data?.signUp.loginToken.token);
    }, [
        setIsVerifyPendingState,
        signUp,
        workspacePublicData,
        isMultiWorkspaceEnabled,
        handleGetAuthTokensFromLoginToken,
        setSignInUpStep,
        setSearchParams,
        isEmailVerificationRequired,
        redirectToWorkspaceDomain
    ]);
    const buildRedirectUrl = useCallback((path, params)=>{
        const url = new URL(`${REACT_APP_SERVER_BASE_URL}${path}`);
        if (isDefined(params.workspaceInviteHash)) {
            url.searchParams.set('workspaceInviteHash', params.workspaceInviteHash);
        }
        if (isDefined(params.workspacePersonalInviteToken)) {
            url.searchParams.set('inviteToken', params.workspacePersonalInviteToken);
        }
        if (isDefined(params.billingCheckoutSession)) {
            url.searchParams.set('billingCheckoutSessionState', JSON.stringify(params.billingCheckoutSession));
        }
        if (isDefined(workspacePublicData)) {
            url.searchParams.set('workspaceId', workspacePublicData.id);
        }
        return url.toString();
    }, [
        workspacePublicData
    ]);
    const handleGoogleLogin = useCallback((params)=>{
        redirect(buildRedirectUrl('/auth/google', params));
    }, [
        buildRedirectUrl,
        redirect
    ]);
    const handleMicrosoftLogin = useCallback((params)=>{
        redirect(buildRedirectUrl('/auth/microsoft', params));
    }, [
        buildRedirectUrl,
        redirect
    ]);
    return {
        getLoginTokenFromCredentials: handleGetLoginTokenFromCredentials,
        getLoginTokenFromEmailVerificationToken: handleGetLoginTokenFromEmailVerificationToken,
        getAuthTokensFromLoginToken: handleGetAuthTokensFromLoginToken,
        loadCurrentUser,
        checkUserExists: {
            checkUserExistsData,
            checkUserExistsQuery
        },
        clearSession,
        signOut: handleSignOut,
        signUpWithCredentials: handleCredentialsSignUp,
        signInWithCredentials: handleCredentialsSignIn,
        signInWithGoogle: handleGoogleLogin,
        signInWithMicrosoft: handleMicrosoftLogin
    };
};

//# sourceMappingURL=data:application/json;base64,