import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useRestoreMultipleRecordsAction.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useRestoreMultipleRecordsAction.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport2_react["useCallback"]; const useState = __vite__cjsImport2_react["useState"];
import { contextStoreCurrentViewIdComponentState } from "/src/modules/context-store/states/contextStoreCurrentViewIdComponentState.ts";
import { contextStoreFiltersComponentState } from "/src/modules/context-store/states/contextStoreFiltersComponentState.ts";
import { contextStoreNumberOfSelectedRecordsComponentState } from "/src/modules/context-store/states/contextStoreNumberOfSelectedRecordsComponentState.ts";
import { contextStoreTargetedRecordsRuleComponentState } from "/src/modules/context-store/states/contextStoreTargetedRecordsRuleComponentState.ts";
import { computeContextStoreFilters } from "/src/modules/context-store/utils/computeContextStoreFilters.ts";
import { BACKEND_BATCH_REQUEST_MAX_COUNT } from "/src/modules/object-record/constants/BackendBatchRequestMaxCount.ts";
import { DEFAULT_QUERY_PAGE_SIZE } from "/src/modules/object-record/constants/DefaultQueryPageSize.ts";
import { useLazyFetchAllRecords } from "/src/modules/object-record/hooks/useLazyFetchAllRecords.ts";
import { useRestoreManyRecords } from "/src/modules/object-record/hooks/useRestoreManyRecords.ts";
import { useCheckIsSoftDeleteFilter } from "/src/modules/object-record/record-filter/hooks/useCheckIsSoftDeleteFilter.ts";
import { useFilterValueDependencies } from "/src/modules/object-record/record-filter/hooks/useFilterValueDependencies.ts";
import { useRecordTable } from "/src/modules/object-record/record-table/hooks/useRecordTable.ts";
import { getRecordIndexIdFromObjectNamePluralAndViewId } from "/src/modules/object-record/utils/getRecordIndexIdFromObjectNamePluralAndViewId.ts";
import { useHasObjectReadOnlyPermission } from "/src/modules/settings/roles/hooks/useHasObjectReadOnlyPermission.ts";
import { ConfirmationModal } from "/src/modules/ui/layout/modal/components/ConfirmationModal.tsx";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useRestoreMultipleRecordsAction = ({ objectMetadataItem })=>{
    _s();
    const [isRestoreRecordsModalOpen, setIsRestoreRecordsModalOpen] = useState(false);
    const contextStoreCurrentViewId = useRecoilComponentValueV2(contextStoreCurrentViewIdComponentState);
    if (!contextStoreCurrentViewId) {
        throw new Error('Current view ID is not defined');
    }
    const hasObjectReadOnlyPermission = useHasObjectReadOnlyPermission();
    const { resetTableRowSelection } = useRecordTable({
        recordTableId: getRecordIndexIdFromObjectNamePluralAndViewId(objectMetadataItem.namePlural, contextStoreCurrentViewId)
    });
    const { restoreManyRecords } = useRestoreManyRecords({
        objectNameSingular: objectMetadataItem.nameSingular
    });
    const contextStoreNumberOfSelectedRecords = useRecoilComponentValueV2(contextStoreNumberOfSelectedRecordsComponentState);
    const contextStoreTargetedRecordsRule = useRecoilComponentValueV2(contextStoreTargetedRecordsRuleComponentState);
    const contextStoreFilters = useRecoilComponentValueV2(contextStoreFiltersComponentState);
    const { filterValueDependencies } = useFilterValueDependencies();
    const deletedAtFilter = {
        deletedAt: {
            is: 'NOT_NULL'
        }
    };
    const graphqlFilter = {
        ...computeContextStoreFilters(contextStoreTargetedRecordsRule, contextStoreFilters, objectMetadataItem, filterValueDependencies),
        ...deletedAtFilter
    };
    const { checkIsSoftDeleteFilter } = useCheckIsSoftDeleteFilter();
    const isDeletedFilterActive = contextStoreFilters.some(checkIsSoftDeleteFilter);
    const { fetchAllRecords: fetchAllRecordIds } = useLazyFetchAllRecords({
        objectNameSingular: objectMetadataItem.nameSingular,
        filter: graphqlFilter,
        limit: DEFAULT_QUERY_PAGE_SIZE,
        recordGqlFields: {
            id: true
        }
    });
    const handleRestoreClick = useCallback(async ()=>{
        const recordsToRestore = await fetchAllRecordIds();
        const recordIdsToRestore = recordsToRestore.map((record)=>record.id);
        resetTableRowSelection();
        await restoreManyRecords({
            idsToRestore: recordIdsToRestore
        });
    }, [
        restoreManyRecords,
        fetchAllRecordIds,
        resetTableRowSelection
    ]);
    const isRemoteObject = objectMetadataItem.isRemote;
    const shouldBeRegistered = !hasObjectReadOnlyPermission && !isRemoteObject && isDeletedFilterActive && isDefined(contextStoreNumberOfSelectedRecords) && contextStoreNumberOfSelectedRecords < BACKEND_BATCH_REQUEST_MAX_COUNT && contextStoreNumberOfSelectedRecords > 0;
    const onClick = ()=>{
        if (!shouldBeRegistered) {
            return;
        }
        setIsRestoreRecordsModalOpen(true);
    };
    const confirmationModal = /*#__PURE__*/ _jsxDEV(ConfirmationModal, {
        isOpen: isRestoreRecordsModalOpen,
        setIsOpen: setIsRestoreRecordsModalOpen,
        title: 'Restore Records',
        subtitle: `Are you sure you want to restore these records?`,
        onConfirmClick: handleRestoreClick,
        confirmButtonText: 'Restore Records'
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useRestoreMultipleRecordsAction.tsx",
        lineNumber: 120,
        columnNumber: 7
    }, this);
    return {
        shouldBeRegistered,
        onClick,
        ConfirmationModal: confirmationModal
    };
};
_s(useRestoreMultipleRecordsAction, "B5CiNqw0u02a3wHzUOkjFH3g0Rk=", false, function() {
    return [
        useRecoilComponentValueV2,
        useHasObjectReadOnlyPermission,
        useRecordTable,
        useRestoreManyRecords,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useFilterValueDependencies,
        useCheckIsSoftDeleteFilter,
        useLazyFetchAllRecords
    ];
});


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useRestoreMultipleRecordsAction.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/action-menu/actions/record-actions/multiple-records/hooks/useRestoreMultipleRecordsAction.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,