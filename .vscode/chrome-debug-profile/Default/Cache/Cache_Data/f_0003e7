import { gql, useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport1__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isUndefined = __vite__cjsImport1__sniptt_guards["isUndefined"];
import { objectMetadataItemsState } from "/src/modules/object-metadata/states/objectMetadataItemsState.ts";
import { mapObjectMetadataToGraphQLQuery } from "/src/modules/object-metadata/utils/mapObjectMetadataToGraphQLQuery.ts";
import { getRecordsFromRecordConnection } from "/src/modules/object-record/cache/utils/getRecordsFromRecordConnection.ts";
import { EMPTY_QUERY } from "/src/modules/object-record/constants/EmptyQuery.ts";
import { generateDepthOneRecordGqlFields } from "/src/modules/object-record/graphql/utils/generateDepthOneRecordGqlFields.ts";
import { generateCombinedFindManyRecordsQueryVariables } from "/src/modules/object-record/multiple-objects/utils/generateCombinedFindManyRecordsQueryVariables.ts";
import { getCombinedFindManyRecordsQueryFilteringPart } from "/src/modules/object-record/multiple-objects/utils/getCombinedFindManyRecordsQueryFilteringPart.ts";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { capitalize } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const usePerformCombinedFindManyRecords = ()=>{
    const client = useApolloClient();
    const objectMetadataItems = useRecoilValue(objectMetadataItemsState);
    const generateCombinedFindManyRecordsQuery = (operationSignatures, objectMetadataItemsValue)=>{
        const filterPerMetadataItemArray = operationSignatures.map(({ objectNameSingular })=>`$filter${capitalize(objectNameSingular)}: ${capitalize(objectNameSingular)}FilterInput`).join(', ');
        const orderByPerMetadataItemArray = operationSignatures.map(({ objectNameSingular })=>`$orderBy${capitalize(objectNameSingular)}: [${capitalize(objectNameSingular)}OrderByInput]`).join(', ');
        const cursorFilteringPerMetadataItemArray = operationSignatures.map(({ objectNameSingular })=>`$after${capitalize(objectNameSingular)}: String, $before${capitalize(objectNameSingular)}: String, $first${capitalize(objectNameSingular)}: Int, $last${capitalize(objectNameSingular)}: Int`).join(', ');
        const limitPerMetadataItemArray = operationSignatures.map(({ objectNameSingular })=>`$limit${capitalize(objectNameSingular)}: Int`).join(', ');
        const queryOperationSignatureWithObjectMetadataItemArray = operationSignatures.map((operationSignature)=>{
            const objectMetadataItem = objectMetadataItemsValue.find((objectMetadataItem)=>objectMetadataItem.nameSingular === operationSignature.objectNameSingular);
            if (isUndefined(objectMetadataItem)) {
                throw new Error(`Object metadata item not found for object name singular: ${operationSignature.objectNameSingular}`);
            }
            return {
                operationSignature,
                objectMetadataItem
            };
        });
        return gql`
    query CombinedFindManyRecords(
      ${filterPerMetadataItemArray}, 
      ${orderByPerMetadataItemArray}, 
      ${cursorFilteringPerMetadataItemArray}, 
      ${limitPerMetadataItemArray}
    ) {
      ${queryOperationSignatureWithObjectMetadataItemArray.map(({ objectMetadataItem, operationSignature })=>`${getCombinedFindManyRecordsQueryFilteringPart(objectMetadataItem)} {
          edges {
            node ${mapObjectMetadataToGraphQLQuery({
                objectMetadataItems: objectMetadataItemsValue,
                objectMetadataItem,
                recordGqlFields: operationSignature.fields ?? generateDepthOneRecordGqlFields({
                    objectMetadataItem
                })
            })}
            cursor
          }
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          totalCount
        }`).join('\n')}
    }
  `;
    };
    const performCombinedFindManyRecords = async ({ operationSignatures, client: customClient })=>{
        const apolloClient = customClient || client;
        const findManyQuery = generateCombinedFindManyRecordsQuery(operationSignatures, objectMetadataItems);
        const queryVariables = generateCombinedFindManyRecordsQueryVariables({
            operationSignatures
        });
        const { data, loading } = await apolloClient.query({
            query: findManyQuery ?? EMPTY_QUERY,
            variables: queryVariables
        });
        const resultWithoutConnection = Object.fromEntries(Object.entries(data ?? {}).map(([namePlural, objectRecordConnection])=>[
                namePlural,
                getRecordsFromRecordConnection({
                    recordConnection: objectRecordConnection
                })
            ]));
        return {
            result: resultWithoutConnection,
            loading
        };
    };
    return {
        performCombinedFindManyRecords
    };
};

//# sourceMappingURL=data:application/json;base64,