import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/generated/graphql.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/generated/graphql.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

var _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$(), _s28 = $RefreshSig$(), _s29 = $RefreshSig$(), _s30 = $RefreshSig$(), _s31 = $RefreshSig$(), _s32 = $RefreshSig$(), _s33 = $RefreshSig$(), _s34 = $RefreshSig$(), _s35 = $RefreshSig$(), _s36 = $RefreshSig$(), _s37 = $RefreshSig$(), _s38 = $RefreshSig$(), _s39 = $RefreshSig$(), _s40 = $RefreshSig$(), _s41 = $RefreshSig$(), _s42 = $RefreshSig$(), _s43 = $RefreshSig$(), _s44 = $RefreshSig$(), _s45 = $RefreshSig$(), _s46 = $RefreshSig$(), _s47 = $RefreshSig$(), _s48 = $RefreshSig$(), _s49 = $RefreshSig$(), _s50 = $RefreshSig$(), _s51 = $RefreshSig$(), _s52 = $RefreshSig$(), _s53 = $RefreshSig$(), _s54 = $RefreshSig$(), _s55 = $RefreshSig$(), _s56 = $RefreshSig$(), _s57 = $RefreshSig$(), _s58 = $RefreshSig$(), _s59 = $RefreshSig$(), _s60 = $RefreshSig$(), _s61 = $RefreshSig$(), _s62 = $RefreshSig$(), _s63 = $RefreshSig$(), _s64 = $RefreshSig$(), _s65 = $RefreshSig$(), _s66 = $RefreshSig$(), _s67 = $RefreshSig$(), _s68 = $RefreshSig$(), _s69 = $RefreshSig$(), _s70 = $RefreshSig$(), _s71 = $RefreshSig$(), _s72 = $RefreshSig$(), _s73 = $RefreshSig$(), _s74 = $RefreshSig$(), _s75 = $RefreshSig$(), _s76 = $RefreshSig$(), _s77 = $RefreshSig$(), _s78 = $RefreshSig$(), _s79 = $RefreshSig$(), _s80 = $RefreshSig$(), _s81 = $RefreshSig$(), _s82 = $RefreshSig$(), _s83 = $RefreshSig$(), _s84 = $RefreshSig$(), _s85 = $RefreshSig$(), _s86 = $RefreshSig$(), _s87 = $RefreshSig$(), _s88 = $RefreshSig$(), _s89 = $RefreshSig$(), _s90 = $RefreshSig$(), _s91 = $RefreshSig$(), _s92 = $RefreshSig$();
import * as Apollo from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import { gql } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
const defaultOptions = {};
export var AdminPanelHealthServiceStatus;
(function(AdminPanelHealthServiceStatus) {
    AdminPanelHealthServiceStatus["OPERATIONAL"] = "OPERATIONAL";
    AdminPanelHealthServiceStatus["OUTAGE"] = "OUTAGE";
})(AdminPanelHealthServiceStatus || (AdminPanelHealthServiceStatus = {}));
export var BillingPlanKey;
(function(BillingPlanKey) {
    BillingPlanKey["ENTERPRISE"] = "ENTERPRISE";
    BillingPlanKey["PRO"] = "PRO";
})(BillingPlanKey || (BillingPlanKey = {}));
export var BillingPriceTiersMode;
(function(BillingPriceTiersMode) {
    BillingPriceTiersMode["GRADUATED"] = "GRADUATED";
    BillingPriceTiersMode["VOLUME"] = "VOLUME";
})(BillingPriceTiersMode || (BillingPriceTiersMode = {}));
export var BillingUsageType;
(function(BillingUsageType) {
    BillingUsageType["LICENSED"] = "LICENSED";
    BillingUsageType["METERED"] = "METERED";
})(BillingUsageType || (BillingUsageType = {}));
export var CalendarChannelVisibility;
(function(CalendarChannelVisibility) {
    CalendarChannelVisibility["METADATA"] = "METADATA";
    CalendarChannelVisibility["SHARE_EVERYTHING"] = "SHARE_EVERYTHING";
})(CalendarChannelVisibility || (CalendarChannelVisibility = {}));
export var CaptchaDriverType;
(function(CaptchaDriverType) {
    CaptchaDriverType["GoogleRecaptcha"] = "GoogleRecaptcha";
    CaptchaDriverType["Turnstile"] = "Turnstile";
})(CaptchaDriverType || (CaptchaDriverType = {}));
export var DistantTableUpdate;
(function(DistantTableUpdate) {
    DistantTableUpdate["COLUMNS_ADDED"] = "COLUMNS_ADDED";
    DistantTableUpdate["COLUMNS_DELETED"] = "COLUMNS_DELETED";
    DistantTableUpdate["COLUMNS_TYPE_CHANGED"] = "COLUMNS_TYPE_CHANGED";
    DistantTableUpdate["TABLE_DELETED"] = "TABLE_DELETED";
})(DistantTableUpdate || (DistantTableUpdate = {}));
export var EnvironmentVariablesGroup;
(function(EnvironmentVariablesGroup) {
    EnvironmentVariablesGroup["AnalyticsConfig"] = "AnalyticsConfig";
    EnvironmentVariablesGroup["BillingConfig"] = "BillingConfig";
    EnvironmentVariablesGroup["CaptchaConfig"] = "CaptchaConfig";
    EnvironmentVariablesGroup["CloudflareConfig"] = "CloudflareConfig";
    EnvironmentVariablesGroup["EmailSettings"] = "EmailSettings";
    EnvironmentVariablesGroup["ExceptionHandler"] = "ExceptionHandler";
    EnvironmentVariablesGroup["GoogleAuth"] = "GoogleAuth";
    EnvironmentVariablesGroup["LLM"] = "LLM";
    EnvironmentVariablesGroup["Logging"] = "Logging";
    EnvironmentVariablesGroup["MicrosoftAuth"] = "MicrosoftAuth";
    EnvironmentVariablesGroup["Other"] = "Other";
    EnvironmentVariablesGroup["RateLimiting"] = "RateLimiting";
    EnvironmentVariablesGroup["SSL"] = "SSL";
    EnvironmentVariablesGroup["ServerConfig"] = "ServerConfig";
    EnvironmentVariablesGroup["ServerlessConfig"] = "ServerlessConfig";
    EnvironmentVariablesGroup["StorageConfig"] = "StorageConfig";
    EnvironmentVariablesGroup["SupportChatConfig"] = "SupportChatConfig";
    EnvironmentVariablesGroup["TokensDuration"] = "TokensDuration";
})(EnvironmentVariablesGroup || (EnvironmentVariablesGroup = {}));
export var FeatureFlagKey;
(function(FeatureFlagKey) {
    FeatureFlagKey["IsAdvancedFiltersEnabled"] = "IsAdvancedFiltersEnabled";
    FeatureFlagKey["IsAirtableIntegrationEnabled"] = "IsAirtableIntegrationEnabled";
    FeatureFlagKey["IsAnalyticsV2Enabled"] = "IsAnalyticsV2Enabled";
    FeatureFlagKey["IsApprovedAccessDomainsEnabled"] = "IsApprovedAccessDomainsEnabled";
    FeatureFlagKey["IsCopilotEnabled"] = "IsCopilotEnabled";
    FeatureFlagKey["IsCustomDomainEnabled"] = "IsCustomDomainEnabled";
    FeatureFlagKey["IsEventObjectEnabled"] = "IsEventObjectEnabled";
    FeatureFlagKey["IsJsonFilterEnabled"] = "IsJsonFilterEnabled";
    FeatureFlagKey["IsNewRelationEnabled"] = "IsNewRelationEnabled";
    FeatureFlagKey["IsPermissionsV2Enabled"] = "IsPermissionsV2Enabled";
    FeatureFlagKey["IsPostgreSQLIntegrationEnabled"] = "IsPostgreSQLIntegrationEnabled";
    FeatureFlagKey["IsStripeIntegrationEnabled"] = "IsStripeIntegrationEnabled";
    FeatureFlagKey["IsUniqueIndexesEnabled"] = "IsUniqueIndexesEnabled";
    FeatureFlagKey["IsWorkflowEnabled"] = "IsWorkflowEnabled";
    FeatureFlagKey["IsWorkflowFormActionEnabled"] = "IsWorkflowFormActionEnabled";
})(FeatureFlagKey || (FeatureFlagKey = {}));
export var FieldMetadataType;
(function(FieldMetadataType) {
    FieldMetadataType["ACTOR"] = "ACTOR";
    FieldMetadataType["ADDRESS"] = "ADDRESS";
    FieldMetadataType["ARRAY"] = "ARRAY";
    FieldMetadataType["BOOLEAN"] = "BOOLEAN";
    FieldMetadataType["CURRENCY"] = "CURRENCY";
    FieldMetadataType["DATE"] = "DATE";
    FieldMetadataType["DATE_TIME"] = "DATE_TIME";
    FieldMetadataType["EMAILS"] = "EMAILS";
    FieldMetadataType["FULL_NAME"] = "FULL_NAME";
    FieldMetadataType["LINKS"] = "LINKS";
    FieldMetadataType["MULTI_SELECT"] = "MULTI_SELECT";
    FieldMetadataType["NUMBER"] = "NUMBER";
    FieldMetadataType["NUMERIC"] = "NUMERIC";
    FieldMetadataType["OPINIONS"] = "OPINIONS";
    FieldMetadataType["PHONES"] = "PHONES";
    FieldMetadataType["POSITION"] = "POSITION";
    FieldMetadataType["RATING"] = "RATING";
    FieldMetadataType["RAW_JSON"] = "RAW_JSON";
    FieldMetadataType["RELATION"] = "RELATION";
    FieldMetadataType["RICH_TEXT"] = "RICH_TEXT";
    FieldMetadataType["RICH_TEXT_V2"] = "RICH_TEXT_V2";
    FieldMetadataType["SELECT"] = "SELECT";
    FieldMetadataType["TEXT"] = "TEXT";
    FieldMetadataType["TS_VECTOR"] = "TS_VECTOR";
    FieldMetadataType["UUID"] = "UUID";
})(FieldMetadataType || (FieldMetadataType = {}));
export var FileFolder;
(function(FileFolder) {
    FileFolder["Attachment"] = "Attachment";
    FileFolder["PersonPicture"] = "PersonPicture";
    FileFolder["ProfilePicture"] = "ProfilePicture";
    FileFolder["ServerlessFunction"] = "ServerlessFunction";
    FileFolder["WorkspaceLogo"] = "WorkspaceLogo";
})(FileFolder || (FileFolder = {}));
export var FilterIs;
(function(FilterIs) {
    FilterIs["NotNull"] = "NotNull";
    FilterIs["Null"] = "Null";
})(FilterIs || (FilterIs = {}));
export var HealthIndicatorId;
(function(HealthIndicatorId) {
    HealthIndicatorId["app"] = "app";
    HealthIndicatorId["connectedAccount"] = "connectedAccount";
    HealthIndicatorId["database"] = "database";
    HealthIndicatorId["redis"] = "redis";
    HealthIndicatorId["worker"] = "worker";
})(HealthIndicatorId || (HealthIndicatorId = {}));
export var IdentityProviderType;
(function(IdentityProviderType) {
    IdentityProviderType["OIDC"] = "OIDC";
    IdentityProviderType["SAML"] = "SAML";
})(IdentityProviderType || (IdentityProviderType = {}));
export var IndexType;
(function(IndexType) {
    IndexType["BTREE"] = "BTREE";
    IndexType["GIN"] = "GIN";
})(IndexType || (IndexType = {}));
export var MessageChannelVisibility;
(function(MessageChannelVisibility) {
    MessageChannelVisibility["METADATA"] = "METADATA";
    MessageChannelVisibility["SHARE_EVERYTHING"] = "SHARE_EVERYTHING";
    MessageChannelVisibility["SUBJECT"] = "SUBJECT";
})(MessageChannelVisibility || (MessageChannelVisibility = {}));
export var OnboardingStatus;
(function(OnboardingStatus) {
    OnboardingStatus["COMPLETED"] = "COMPLETED";
    OnboardingStatus["INVITE_TEAM"] = "INVITE_TEAM";
    OnboardingStatus["PLAN_REQUIRED"] = "PLAN_REQUIRED";
    OnboardingStatus["PROFILE_CREATION"] = "PROFILE_CREATION";
    OnboardingStatus["SYNC_EMAIL"] = "SYNC_EMAIL";
    OnboardingStatus["WORKSPACE_ACTIVATION"] = "WORKSPACE_ACTIVATION";
})(OnboardingStatus || (OnboardingStatus = {}));
export var PermissionsOnAllObjectRecords;
(function(PermissionsOnAllObjectRecords) {
    PermissionsOnAllObjectRecords["DESTROY_ALL_OBJECT_RECORDS"] = "DESTROY_ALL_OBJECT_RECORDS";
    PermissionsOnAllObjectRecords["READ_ALL_OBJECT_RECORDS"] = "READ_ALL_OBJECT_RECORDS";
    PermissionsOnAllObjectRecords["SOFT_DELETE_ALL_OBJECT_RECORDS"] = "SOFT_DELETE_ALL_OBJECT_RECORDS";
    PermissionsOnAllObjectRecords["UPDATE_ALL_OBJECT_RECORDS"] = "UPDATE_ALL_OBJECT_RECORDS";
})(PermissionsOnAllObjectRecords || (PermissionsOnAllObjectRecords = {}));
export var QueueMetricsTimeRange;
(function(QueueMetricsTimeRange) {
    QueueMetricsTimeRange["FourHours"] = "FourHours";
    QueueMetricsTimeRange["OneDay"] = "OneDay";
    QueueMetricsTimeRange["OneHour"] = "OneHour";
    QueueMetricsTimeRange["SevenDays"] = "SevenDays";
    QueueMetricsTimeRange["TwelveHours"] = "TwelveHours";
})(QueueMetricsTimeRange || (QueueMetricsTimeRange = {}));
export var RelationDefinitionType;
(function(RelationDefinitionType) {
    RelationDefinitionType["MANY_TO_MANY"] = "MANY_TO_MANY";
    RelationDefinitionType["MANY_TO_ONE"] = "MANY_TO_ONE";
    RelationDefinitionType["ONE_TO_MANY"] = "ONE_TO_MANY";
    RelationDefinitionType["ONE_TO_ONE"] = "ONE_TO_ONE";
})(RelationDefinitionType || (RelationDefinitionType = {}));
export var RelationMetadataType;
(function(RelationMetadataType) {
    RelationMetadataType["MANY_TO_MANY"] = "MANY_TO_MANY";
    RelationMetadataType["MANY_TO_ONE"] = "MANY_TO_ONE";
    RelationMetadataType["ONE_TO_MANY"] = "ONE_TO_MANY";
    RelationMetadataType["ONE_TO_ONE"] = "ONE_TO_ONE";
})(RelationMetadataType || (RelationMetadataType = {}));
export var RelationType;
(function(RelationType) {
    RelationType["MANY_TO_ONE"] = "MANY_TO_ONE";
    RelationType["ONE_TO_MANY"] = "ONE_TO_MANY";
    RelationType["ONE_TO_ONE"] = "ONE_TO_ONE";
})(RelationType || (RelationType = {}));
export var RemoteTableStatus;
(function(RemoteTableStatus) {
    RemoteTableStatus["NOT_SYNCED"] = "NOT_SYNCED";
    RemoteTableStatus["SYNCED"] = "SYNCED";
})(RemoteTableStatus || (RemoteTableStatus = {}));
export var SsoIdentityProviderStatus;
(function(SsoIdentityProviderStatus) {
    SsoIdentityProviderStatus["Active"] = "Active";
    SsoIdentityProviderStatus["Error"] = "Error";
    SsoIdentityProviderStatus["Inactive"] = "Inactive";
})(SsoIdentityProviderStatus || (SsoIdentityProviderStatus = {}));
export var ServerlessFunctionExecutionStatus;
(function(ServerlessFunctionExecutionStatus) {
    ServerlessFunctionExecutionStatus["ERROR"] = "ERROR";
    ServerlessFunctionExecutionStatus["IDLE"] = "IDLE";
    ServerlessFunctionExecutionStatus["SUCCESS"] = "SUCCESS";
})(ServerlessFunctionExecutionStatus || (ServerlessFunctionExecutionStatus = {}));
export var ServerlessFunctionSyncStatus;
(function(ServerlessFunctionSyncStatus) {
    ServerlessFunctionSyncStatus["BUILDING"] = "BUILDING";
    ServerlessFunctionSyncStatus["NOT_READY"] = "NOT_READY";
    ServerlessFunctionSyncStatus["READY"] = "READY";
})(ServerlessFunctionSyncStatus || (ServerlessFunctionSyncStatus = {}));
export var SettingPermissionType;
(function(SettingPermissionType) {
    SettingPermissionType["ADMIN_PANEL"] = "ADMIN_PANEL";
    SettingPermissionType["API_KEYS_AND_WEBHOOKS"] = "API_KEYS_AND_WEBHOOKS";
    SettingPermissionType["DATA_MODEL"] = "DATA_MODEL";
    SettingPermissionType["ROLES"] = "ROLES";
    SettingPermissionType["SECURITY"] = "SECURITY";
    SettingPermissionType["WORKSPACE"] = "WORKSPACE";
    SettingPermissionType["WORKSPACE_MEMBERS"] = "WORKSPACE_MEMBERS";
})(SettingPermissionType || (SettingPermissionType = {}));
export var SubscriptionInterval;
(function(SubscriptionInterval) {
    SubscriptionInterval["Day"] = "Day";
    SubscriptionInterval["Month"] = "Month";
    SubscriptionInterval["Week"] = "Week";
    SubscriptionInterval["Year"] = "Year";
})(SubscriptionInterval || (SubscriptionInterval = {}));
export var SubscriptionStatus;
(function(SubscriptionStatus) {
    SubscriptionStatus["Active"] = "Active";
    SubscriptionStatus["Canceled"] = "Canceled";
    SubscriptionStatus["Incomplete"] = "Incomplete";
    SubscriptionStatus["IncompleteExpired"] = "IncompleteExpired";
    SubscriptionStatus["PastDue"] = "PastDue";
    SubscriptionStatus["Paused"] = "Paused";
    SubscriptionStatus["Trialing"] = "Trialing";
    SubscriptionStatus["Unpaid"] = "Unpaid";
})(SubscriptionStatus || (SubscriptionStatus = {}));
export var WorkspaceActivationStatus;
(function(WorkspaceActivationStatus) {
    WorkspaceActivationStatus["ACTIVE"] = "ACTIVE";
    WorkspaceActivationStatus["INACTIVE"] = "INACTIVE";
    WorkspaceActivationStatus["ONGOING_CREATION"] = "ONGOING_CREATION";
    WorkspaceActivationStatus["PENDING_CREATION"] = "PENDING_CREATION";
    WorkspaceActivationStatus["SUSPENDED"] = "SUSPENDED";
})(WorkspaceActivationStatus || (WorkspaceActivationStatus = {}));
export var WorkspaceMemberDateFormatEnum;
(function(WorkspaceMemberDateFormatEnum) {
    WorkspaceMemberDateFormatEnum["DAY_FIRST"] = "DAY_FIRST";
    WorkspaceMemberDateFormatEnum["MONTH_FIRST"] = "MONTH_FIRST";
    WorkspaceMemberDateFormatEnum["SYSTEM"] = "SYSTEM";
    WorkspaceMemberDateFormatEnum["YEAR_FIRST"] = "YEAR_FIRST";
})(WorkspaceMemberDateFormatEnum || (WorkspaceMemberDateFormatEnum = {}));
export var WorkspaceMemberTimeFormatEnum;
(function(WorkspaceMemberTimeFormatEnum) {
    WorkspaceMemberTimeFormatEnum["HOUR_12"] = "HOUR_12";
    WorkspaceMemberTimeFormatEnum["HOUR_24"] = "HOUR_24";
    WorkspaceMemberTimeFormatEnum["SYSTEM"] = "SYSTEM";
})(WorkspaceMemberTimeFormatEnum || (WorkspaceMemberTimeFormatEnum = {}));
export const TimelineCalendarEventParticipantFragmentFragmentDoc = gql`
    fragment TimelineCalendarEventParticipantFragment on TimelineCalendarEventParticipant {
  personId
  workspaceMemberId
  firstName
  lastName
  displayName
  avatarUrl
  handle
}
    `;
export const TimelineCalendarEventFragmentFragmentDoc = gql`
    fragment TimelineCalendarEventFragment on TimelineCalendarEvent {
  id
  title
  description
  location
  startsAt
  endsAt
  isFullDay
  visibility
  participants {
    ...TimelineCalendarEventParticipantFragment
  }
}
    ${TimelineCalendarEventParticipantFragmentFragmentDoc}`;
export const TimelineCalendarEventsWithTotalFragmentFragmentDoc = gql`
    fragment TimelineCalendarEventsWithTotalFragment on TimelineCalendarEventsWithTotal {
  totalNumberOfCalendarEvents
  timelineCalendarEvents {
    ...TimelineCalendarEventFragment
  }
}
    ${TimelineCalendarEventFragmentFragmentDoc}`;
export const ParticipantFragmentFragmentDoc = gql`
    fragment ParticipantFragment on TimelineThreadParticipant {
  personId
  workspaceMemberId
  firstName
  lastName
  displayName
  avatarUrl
  handle
}
    `;
export const TimelineThreadFragmentFragmentDoc = gql`
    fragment TimelineThreadFragment on TimelineThread {
  id
  read
  visibility
  firstParticipant {
    ...ParticipantFragment
  }
  lastTwoParticipants {
    ...ParticipantFragment
  }
  lastMessageReceivedAt
  lastMessageBody
  subject
  numberOfMessagesInThread
  participantCount
}
    ${ParticipantFragmentFragmentDoc}`;
export const TimelineThreadsWithTotalFragmentFragmentDoc = gql`
    fragment TimelineThreadsWithTotalFragment on TimelineThreadsWithTotal {
  totalNumberOfThreads
  timelineThreads {
    ...TimelineThreadFragment
  }
}
    ${TimelineThreadFragmentFragmentDoc}`;
export const AuthTokenFragmentFragmentDoc = gql`
    fragment AuthTokenFragment on AuthToken {
  token
  expiresAt
}
    `;
export const AuthTokensFragmentFragmentDoc = gql`
    fragment AuthTokensFragment on AuthTokenPair {
  accessToken {
    ...AuthTokenFragment
  }
  refreshToken {
    ...AuthTokenFragment
  }
}
    ${AuthTokenFragmentFragmentDoc}`;
export const AvailableSsoIdentityProvidersFragmentFragmentDoc = gql`
    fragment AvailableSSOIdentityProvidersFragment on FindAvailableSSOIDPOutput {
  id
  issuer
  name
  status
  workspace {
    id
    displayName
  }
}
    `;
export const WorkspaceMemberQueryFragmentFragmentDoc = gql`
    fragment WorkspaceMemberQueryFragment on WorkspaceMember {
  id
  name {
    firstName
    lastName
  }
  colorScheme
  avatarUrl
  locale
  userEmail
  timeZone
  dateFormat
  timeFormat
}
    `;
export const RoleFragmentFragmentDoc = gql`
    fragment RoleFragment on Role {
  id
  label
  description
  icon
  canUpdateAllSettings
  isEditable
  canReadAllObjectRecords
  canUpdateAllObjectRecords
  canSoftDeleteAllObjectRecords
  canDestroyAllObjectRecords
}
    `;
export const UserQueryFragmentFragmentDoc = gql`
    fragment UserQueryFragment on User {
  id
  firstName
  lastName
  email
  canAccessFullAdminPanel
  canImpersonate
  supportUserHash
  onboardingStatus
  workspaceMember {
    ...WorkspaceMemberQueryFragment
  }
  workspaceMembers {
    ...WorkspaceMemberQueryFragment
  }
  currentUserWorkspace {
    settingsPermissions
    objectRecordsPermissions
  }
  currentWorkspace {
    id
    displayName
    logo
    inviteHash
    allowImpersonation
    activationStatus
    isPublicInviteLinkEnabled
    isGoogleAuthEnabled
    isMicrosoftAuthEnabled
    isPasswordAuthEnabled
    subdomain
    hasValidEnterpriseKey
    customDomain
    isCustomDomainEnabled
    workspaceUrls {
      subdomainUrl
      customUrl
    }
    featureFlags {
      id
      key
      value
      workspaceId
    }
    metadataVersion
    currentBillingSubscription {
      id
      status
      interval
    }
    billingSubscriptions {
      id
      status
    }
    workspaceMembersCount
    defaultRole {
      ...RoleFragment
    }
  }
  workspaces {
    workspace {
      id
      logo
      displayName
      subdomain
      customDomain
      workspaceUrls {
        subdomainUrl
        customUrl
      }
    }
  }
  userVars
}
    ${WorkspaceMemberQueryFragmentFragmentDoc}
${RoleFragmentFragmentDoc}`;
export const GetTimelineCalendarEventsFromCompanyIdDocument = gql`
    query GetTimelineCalendarEventsFromCompanyId($companyId: UUID!, $page: Int!, $pageSize: Int!) {
  getTimelineCalendarEventsFromCompanyId(
    companyId: $companyId
    page: $page
    pageSize: $pageSize
  ) {
    ...TimelineCalendarEventsWithTotalFragment
  }
}
    ${TimelineCalendarEventsWithTotalFragmentFragmentDoc}`;
/**
 * __useGetTimelineCalendarEventsFromCompanyIdQuery__
 *
 * To run a query within a React component, call `useGetTimelineCalendarEventsFromCompanyIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTimelineCalendarEventsFromCompanyIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTimelineCalendarEventsFromCompanyIdQuery({
 *   variables: {
 *      companyId: // value for 'companyId'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */ export function useGetTimelineCalendarEventsFromCompanyIdQuery(baseOptions) {
    _s();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetTimelineCalendarEventsFromCompanyIdDocument, options);
}
_s(useGetTimelineCalendarEventsFromCompanyIdQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetTimelineCalendarEventsFromCompanyIdLazyQuery(baseOptions) {
    _s1();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetTimelineCalendarEventsFromCompanyIdDocument, options);
}
_s1(useGetTimelineCalendarEventsFromCompanyIdLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const GetTimelineCalendarEventsFromPersonIdDocument = gql`
    query GetTimelineCalendarEventsFromPersonId($personId: UUID!, $page: Int!, $pageSize: Int!) {
  getTimelineCalendarEventsFromPersonId(
    personId: $personId
    page: $page
    pageSize: $pageSize
  ) {
    ...TimelineCalendarEventsWithTotalFragment
  }
}
    ${TimelineCalendarEventsWithTotalFragmentFragmentDoc}`;
/**
 * __useGetTimelineCalendarEventsFromPersonIdQuery__
 *
 * To run a query within a React component, call `useGetTimelineCalendarEventsFromPersonIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTimelineCalendarEventsFromPersonIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTimelineCalendarEventsFromPersonIdQuery({
 *   variables: {
 *      personId: // value for 'personId'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */ export function useGetTimelineCalendarEventsFromPersonIdQuery(baseOptions) {
    _s2();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetTimelineCalendarEventsFromPersonIdDocument, options);
}
_s2(useGetTimelineCalendarEventsFromPersonIdQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetTimelineCalendarEventsFromPersonIdLazyQuery(baseOptions) {
    _s3();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetTimelineCalendarEventsFromPersonIdDocument, options);
}
_s3(useGetTimelineCalendarEventsFromPersonIdLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const GetTimelineThreadsFromCompanyIdDocument = gql`
    query GetTimelineThreadsFromCompanyId($companyId: UUID!, $page: Int!, $pageSize: Int!) {
  getTimelineThreadsFromCompanyId(
    companyId: $companyId
    page: $page
    pageSize: $pageSize
  ) {
    ...TimelineThreadsWithTotalFragment
  }
}
    ${TimelineThreadsWithTotalFragmentFragmentDoc}`;
/**
 * __useGetTimelineThreadsFromCompanyIdQuery__
 *
 * To run a query within a React component, call `useGetTimelineThreadsFromCompanyIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTimelineThreadsFromCompanyIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTimelineThreadsFromCompanyIdQuery({
 *   variables: {
 *      companyId: // value for 'companyId'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */ export function useGetTimelineThreadsFromCompanyIdQuery(baseOptions) {
    _s4();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetTimelineThreadsFromCompanyIdDocument, options);
}
_s4(useGetTimelineThreadsFromCompanyIdQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetTimelineThreadsFromCompanyIdLazyQuery(baseOptions) {
    _s5();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetTimelineThreadsFromCompanyIdDocument, options);
}
_s5(useGetTimelineThreadsFromCompanyIdLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const GetTimelineThreadsFromPersonIdDocument = gql`
    query GetTimelineThreadsFromPersonId($personId: UUID!, $page: Int!, $pageSize: Int!) {
  getTimelineThreadsFromPersonId(
    personId: $personId
    page: $page
    pageSize: $pageSize
  ) {
    ...TimelineThreadsWithTotalFragment
  }
}
    ${TimelineThreadsWithTotalFragmentFragmentDoc}`;
/**
 * __useGetTimelineThreadsFromPersonIdQuery__
 *
 * To run a query within a React component, call `useGetTimelineThreadsFromPersonIdQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetTimelineThreadsFromPersonIdQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetTimelineThreadsFromPersonIdQuery({
 *   variables: {
 *      personId: // value for 'personId'
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */ export function useGetTimelineThreadsFromPersonIdQuery(baseOptions) {
    _s6();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetTimelineThreadsFromPersonIdDocument, options);
}
_s6(useGetTimelineThreadsFromPersonIdQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetTimelineThreadsFromPersonIdLazyQuery(baseOptions) {
    _s7();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetTimelineThreadsFromPersonIdDocument, options);
}
_s7(useGetTimelineThreadsFromPersonIdLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const TrackDocument = gql`
    mutation Track($action: String!, $payload: JSON!) {
  track(action: $action, payload: $payload) {
    success
  }
}
    `;
/**
 * __useTrackMutation__
 *
 * To run a mutation, you first call `useTrackMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useTrackMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [trackMutation, { data, loading, error }] = useTrackMutation({
 *   variables: {
 *      action: // value for 'action'
 *      payload: // value for 'payload'
 *   },
 * });
 */ export function useTrackMutation(baseOptions) {
    _s8();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(TrackDocument, options);
}
_s8(useTrackMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UploadFileDocument = gql`
    mutation uploadFile($file: Upload!, $fileFolder: FileFolder) {
  uploadFile(file: $file, fileFolder: $fileFolder)
}
    `;
/**
 * __useUploadFileMutation__
 *
 * To run a mutation, you first call `useUploadFileMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadFileMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadFileMutation, { data, loading, error }] = useUploadFileMutation({
 *   variables: {
 *      file: // value for 'file'
 *      fileFolder: // value for 'fileFolder'
 *   },
 * });
 */ export function useUploadFileMutation(baseOptions) {
    _s9();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UploadFileDocument, options);
}
_s9(useUploadFileMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UploadImageDocument = gql`
    mutation uploadImage($file: Upload!, $fileFolder: FileFolder) {
  uploadImage(file: $file, fileFolder: $fileFolder)
}
    `;
/**
 * __useUploadImageMutation__
 *
 * To run a mutation, you first call `useUploadImageMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadImageMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadImageMutation, { data, loading, error }] = useUploadImageMutation({
 *   variables: {
 *      file: // value for 'file'
 *      fileFolder: // value for 'fileFolder'
 *   },
 * });
 */ export function useUploadImageMutation(baseOptions) {
    _s10();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UploadImageDocument, options);
}
_s10(useUploadImageMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const AuthorizeAppDocument = gql`
    mutation authorizeApp($clientId: String!, $codeChallenge: String!, $redirectUrl: String!) {
  authorizeApp(
    clientId: $clientId
    codeChallenge: $codeChallenge
    redirectUrl: $redirectUrl
  ) {
    redirectUrl
  }
}
    `;
/**
 * __useAuthorizeAppMutation__
 *
 * To run a mutation, you first call `useAuthorizeAppMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useAuthorizeAppMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [authorizeAppMutation, { data, loading, error }] = useAuthorizeAppMutation({
 *   variables: {
 *      clientId: // value for 'clientId'
 *      codeChallenge: // value for 'codeChallenge'
 *      redirectUrl: // value for 'redirectUrl'
 *   },
 * });
 */ export function useAuthorizeAppMutation(baseOptions) {
    _s11();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(AuthorizeAppDocument, options);
}
_s11(useAuthorizeAppMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const EmailPasswordResetLinkDocument = gql`
    mutation EmailPasswordResetLink($email: String!, $workspaceId: String!) {
  emailPasswordResetLink(email: $email, workspaceId: $workspaceId) {
    success
  }
}
    `;
/**
 * __useEmailPasswordResetLinkMutation__
 *
 * To run a mutation, you first call `useEmailPasswordResetLinkMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEmailPasswordResetLinkMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [emailPasswordResetLinkMutation, { data, loading, error }] = useEmailPasswordResetLinkMutation({
 *   variables: {
 *      email: // value for 'email'
 *      workspaceId: // value for 'workspaceId'
 *   },
 * });
 */ export function useEmailPasswordResetLinkMutation(baseOptions) {
    _s12();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(EmailPasswordResetLinkDocument, options);
}
_s12(useEmailPasswordResetLinkMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GenerateApiKeyTokenDocument = gql`
    mutation GenerateApiKeyToken($apiKeyId: String!, $expiresAt: String!) {
  generateApiKeyToken(apiKeyId: $apiKeyId, expiresAt: $expiresAt) {
    token
  }
}
    `;
/**
 * __useGenerateApiKeyTokenMutation__
 *
 * To run a mutation, you first call `useGenerateApiKeyTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGenerateApiKeyTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [generateApiKeyTokenMutation, { data, loading, error }] = useGenerateApiKeyTokenMutation({
 *   variables: {
 *      apiKeyId: // value for 'apiKeyId'
 *      expiresAt: // value for 'expiresAt'
 *   },
 * });
 */ export function useGenerateApiKeyTokenMutation(baseOptions) {
    _s13();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(GenerateApiKeyTokenDocument, options);
}
_s13(useGenerateApiKeyTokenMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GenerateTransientTokenDocument = gql`
    mutation generateTransientToken {
  generateTransientToken {
    transientToken {
      token
    }
  }
}
    `;
/**
 * __useGenerateTransientTokenMutation__
 *
 * To run a mutation, you first call `useGenerateTransientTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGenerateTransientTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [generateTransientTokenMutation, { data, loading, error }] = useGenerateTransientTokenMutation({
 *   variables: {
 *   },
 * });
 */ export function useGenerateTransientTokenMutation(baseOptions) {
    _s14();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(GenerateTransientTokenDocument, options);
}
_s14(useGenerateTransientTokenMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetAuthTokensFromLoginTokenDocument = gql`
    mutation GetAuthTokensFromLoginToken($loginToken: String!) {
  getAuthTokensFromLoginToken(loginToken: $loginToken) {
    tokens {
      ...AuthTokensFragment
    }
  }
}
    ${AuthTokensFragmentFragmentDoc}`;
/**
 * __useGetAuthTokensFromLoginTokenMutation__
 *
 * To run a mutation, you first call `useGetAuthTokensFromLoginTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGetAuthTokensFromLoginTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [getAuthTokensFromLoginTokenMutation, { data, loading, error }] = useGetAuthTokensFromLoginTokenMutation({
 *   variables: {
 *      loginToken: // value for 'loginToken'
 *   },
 * });
 */ export function useGetAuthTokensFromLoginTokenMutation(baseOptions) {
    _s15();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(GetAuthTokensFromLoginTokenDocument, options);
}
_s15(useGetAuthTokensFromLoginTokenMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetAuthorizationUrlForSsoDocument = gql`
    mutation GetAuthorizationUrlForSSO($input: GetAuthorizationUrlForSSOInput!) {
  getAuthorizationUrlForSSO(input: $input) {
    id
    type
    authorizationURL
  }
}
    `;
/**
 * __useGetAuthorizationUrlForSsoMutation__
 *
 * To run a mutation, you first call `useGetAuthorizationUrlForSsoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGetAuthorizationUrlForSsoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [getAuthorizationUrlForSsoMutation, { data, loading, error }] = useGetAuthorizationUrlForSsoMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useGetAuthorizationUrlForSsoMutation(baseOptions) {
    _s16();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(GetAuthorizationUrlForSsoDocument, options);
}
_s16(useGetAuthorizationUrlForSsoMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetLoginTokenFromCredentialsDocument = gql`
    mutation GetLoginTokenFromCredentials($email: String!, $password: String!, $captchaToken: String) {
  getLoginTokenFromCredentials(
    email: $email
    password: $password
    captchaToken: $captchaToken
  ) {
    loginToken {
      ...AuthTokenFragment
    }
  }
}
    ${AuthTokenFragmentFragmentDoc}`;
/**
 * __useGetLoginTokenFromCredentialsMutation__
 *
 * To run a mutation, you first call `useGetLoginTokenFromCredentialsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGetLoginTokenFromCredentialsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [getLoginTokenFromCredentialsMutation, { data, loading, error }] = useGetLoginTokenFromCredentialsMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *      captchaToken: // value for 'captchaToken'
 *   },
 * });
 */ export function useGetLoginTokenFromCredentialsMutation(baseOptions) {
    _s17();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(GetLoginTokenFromCredentialsDocument, options);
}
_s17(useGetLoginTokenFromCredentialsMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetLoginTokenFromEmailVerificationTokenDocument = gql`
    mutation GetLoginTokenFromEmailVerificationToken($emailVerificationToken: String!, $captchaToken: String) {
  getLoginTokenFromEmailVerificationToken(
    emailVerificationToken: $emailVerificationToken
    captchaToken: $captchaToken
  ) {
    loginToken {
      ...AuthTokenFragment
    }
  }
}
    ${AuthTokenFragmentFragmentDoc}`;
/**
 * __useGetLoginTokenFromEmailVerificationTokenMutation__
 *
 * To run a mutation, you first call `useGetLoginTokenFromEmailVerificationTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useGetLoginTokenFromEmailVerificationTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [getLoginTokenFromEmailVerificationTokenMutation, { data, loading, error }] = useGetLoginTokenFromEmailVerificationTokenMutation({
 *   variables: {
 *      emailVerificationToken: // value for 'emailVerificationToken'
 *      captchaToken: // value for 'captchaToken'
 *   },
 * });
 */ export function useGetLoginTokenFromEmailVerificationTokenMutation(baseOptions) {
    _s18();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(GetLoginTokenFromEmailVerificationTokenDocument, options);
}
_s18(useGetLoginTokenFromEmailVerificationTokenMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const ImpersonateDocument = gql`
    mutation Impersonate($userId: String!, $workspaceId: String!) {
  impersonate(userId: $userId, workspaceId: $workspaceId) {
    workspace {
      workspaceUrls {
        subdomainUrl
        customUrl
      }
      id
    }
    loginToken {
      ...AuthTokenFragment
    }
  }
}
    ${AuthTokenFragmentFragmentDoc}`;
/**
 * __useImpersonateMutation__
 *
 * To run a mutation, you first call `useImpersonateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useImpersonateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [impersonateMutation, { data, loading, error }] = useImpersonateMutation({
 *   variables: {
 *      userId: // value for 'userId'
 *      workspaceId: // value for 'workspaceId'
 *   },
 * });
 */ export function useImpersonateMutation(baseOptions) {
    _s19();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(ImpersonateDocument, options);
}
_s19(useImpersonateMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const RenewTokenDocument = gql`
    mutation RenewToken($appToken: String!) {
  renewToken(appToken: $appToken) {
    tokens {
      ...AuthTokensFragment
    }
  }
}
    ${AuthTokensFragmentFragmentDoc}`;
/**
 * __useRenewTokenMutation__
 *
 * To run a mutation, you first call `useRenewTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRenewTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [renewTokenMutation, { data, loading, error }] = useRenewTokenMutation({
 *   variables: {
 *      appToken: // value for 'appToken'
 *   },
 * });
 */ export function useRenewTokenMutation(baseOptions) {
    _s20();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(RenewTokenDocument, options);
}
_s20(useRenewTokenMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const ResendEmailVerificationTokenDocument = gql`
    mutation ResendEmailVerificationToken($email: String!) {
  resendEmailVerificationToken(email: $email) {
    success
  }
}
    `;
/**
 * __useResendEmailVerificationTokenMutation__
 *
 * To run a mutation, you first call `useResendEmailVerificationTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResendEmailVerificationTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resendEmailVerificationTokenMutation, { data, loading, error }] = useResendEmailVerificationTokenMutation({
 *   variables: {
 *      email: // value for 'email'
 *   },
 * });
 */ export function useResendEmailVerificationTokenMutation(baseOptions) {
    _s21();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(ResendEmailVerificationTokenDocument, options);
}
_s21(useResendEmailVerificationTokenMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const SignUpDocument = gql`
    mutation SignUp($email: String!, $password: String!, $workspaceInviteHash: String, $workspacePersonalInviteToken: String = null, $captchaToken: String, $workspaceId: String, $locale: String) {
  signUp(
    email: $email
    password: $password
    workspaceInviteHash: $workspaceInviteHash
    workspacePersonalInviteToken: $workspacePersonalInviteToken
    captchaToken: $captchaToken
    workspaceId: $workspaceId
    locale: $locale
  ) {
    loginToken {
      ...AuthTokenFragment
    }
    workspace {
      id
      workspaceUrls {
        subdomainUrl
        customUrl
      }
    }
  }
}
    ${AuthTokenFragmentFragmentDoc}`;
/**
 * __useSignUpMutation__
 *
 * To run a mutation, you first call `useSignUpMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignUpMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signUpMutation, { data, loading, error }] = useSignUpMutation({
 *   variables: {
 *      email: // value for 'email'
 *      password: // value for 'password'
 *      workspaceInviteHash: // value for 'workspaceInviteHash'
 *      workspacePersonalInviteToken: // value for 'workspacePersonalInviteToken'
 *      captchaToken: // value for 'captchaToken'
 *      workspaceId: // value for 'workspaceId'
 *      locale: // value for 'locale'
 *   },
 * });
 */ export function useSignUpMutation(baseOptions) {
    _s22();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(SignUpDocument, options);
}
_s22(useSignUpMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const SignUpInNewWorkspaceDocument = gql`
    mutation SignUpInNewWorkspace {
  signUpInNewWorkspace {
    loginToken {
      ...AuthTokenFragment
    }
    workspace {
      id
      workspaceUrls {
        subdomainUrl
        customUrl
      }
    }
  }
}
    ${AuthTokenFragmentFragmentDoc}`;
/**
 * __useSignUpInNewWorkspaceMutation__
 *
 * To run a mutation, you first call `useSignUpInNewWorkspaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSignUpInNewWorkspaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signUpInNewWorkspaceMutation, { data, loading, error }] = useSignUpInNewWorkspaceMutation({
 *   variables: {
 *   },
 * });
 */ export function useSignUpInNewWorkspaceMutation(baseOptions) {
    _s23();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(SignUpInNewWorkspaceDocument, options);
}
_s23(useSignUpInNewWorkspaceMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UpdatePasswordViaResetTokenDocument = gql`
    mutation UpdatePasswordViaResetToken($token: String!, $newPassword: String!) {
  updatePasswordViaResetToken(
    passwordResetToken: $token
    newPassword: $newPassword
  ) {
    success
  }
}
    `;
/**
 * __useUpdatePasswordViaResetTokenMutation__
 *
 * To run a mutation, you first call `useUpdatePasswordViaResetTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePasswordViaResetTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePasswordViaResetTokenMutation, { data, loading, error }] = useUpdatePasswordViaResetTokenMutation({
 *   variables: {
 *      token: // value for 'token'
 *      newPassword: // value for 'newPassword'
 *   },
 * });
 */ export function useUpdatePasswordViaResetTokenMutation(baseOptions) {
    _s24();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UpdatePasswordViaResetTokenDocument, options);
}
_s24(useUpdatePasswordViaResetTokenMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const CheckUserExistsDocument = gql`
    query CheckUserExists($email: String!, $captchaToken: String) {
  checkUserExists(email: $email, captchaToken: $captchaToken) {
    __typename
    ... on UserExists {
      exists
      availableWorkspaces {
        id
        displayName
        workspaceUrls {
          subdomainUrl
          customUrl
        }
        logo
        sso {
          type
          id
          issuer
          name
          status
        }
      }
      isEmailVerified
    }
    ... on UserNotExists {
      exists
    }
  }
}
    `;
/**
 * __useCheckUserExistsQuery__
 *
 * To run a query within a React component, call `useCheckUserExistsQuery` and pass it any options that fit your needs.
 * When your component renders, `useCheckUserExistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useCheckUserExistsQuery({
 *   variables: {
 *      email: // value for 'email'
 *      captchaToken: // value for 'captchaToken'
 *   },
 * });
 */ export function useCheckUserExistsQuery(baseOptions) {
    _s25();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(CheckUserExistsDocument, options);
}
_s25(useCheckUserExistsQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useCheckUserExistsLazyQuery(baseOptions) {
    _s26();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(CheckUserExistsDocument, options);
}
_s26(useCheckUserExistsLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const GetPublicWorkspaceDataByDomainDocument = gql`
    query GetPublicWorkspaceDataByDomain {
  getPublicWorkspaceDataByDomain {
    id
    logo
    displayName
    workspaceUrls {
      subdomainUrl
      customUrl
    }
    authProviders {
      sso {
        id
        name
        type
        status
        issuer
      }
      google
      magicLink
      password
      microsoft
    }
  }
}
    `;
/**
 * __useGetPublicWorkspaceDataByDomainQuery__
 *
 * To run a query within a React component, call `useGetPublicWorkspaceDataByDomainQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPublicWorkspaceDataByDomainQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPublicWorkspaceDataByDomainQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetPublicWorkspaceDataByDomainQuery(baseOptions) {
    _s27();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetPublicWorkspaceDataByDomainDocument, options);
}
_s27(useGetPublicWorkspaceDataByDomainQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetPublicWorkspaceDataByDomainLazyQuery(baseOptions) {
    _s28();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetPublicWorkspaceDataByDomainDocument, options);
}
_s28(useGetPublicWorkspaceDataByDomainLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const ValidatePasswordResetTokenDocument = gql`
    query ValidatePasswordResetToken($token: String!) {
  validatePasswordResetToken(passwordResetToken: $token) {
    id
    email
  }
}
    `;
/**
 * __useValidatePasswordResetTokenQuery__
 *
 * To run a query within a React component, call `useValidatePasswordResetTokenQuery` and pass it any options that fit your needs.
 * When your component renders, `useValidatePasswordResetTokenQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useValidatePasswordResetTokenQuery({
 *   variables: {
 *      token: // value for 'token'
 *   },
 * });
 */ export function useValidatePasswordResetTokenQuery(baseOptions) {
    _s29();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(ValidatePasswordResetTokenDocument, options);
}
_s29(useValidatePasswordResetTokenQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useValidatePasswordResetTokenLazyQuery(baseOptions) {
    _s30();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(ValidatePasswordResetTokenDocument, options);
}
_s30(useValidatePasswordResetTokenLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const BillingBaseProductPricesDocument = gql`
    query billingBaseProductPrices {
  plans {
    planKey
    baseProduct {
      name
      prices {
        ... on BillingPriceLicensedDTO {
          unitAmount
          stripePriceId
          recurringInterval
        }
      }
    }
  }
}
    `;
/**
 * __useBillingBaseProductPricesQuery__
 *
 * To run a query within a React component, call `useBillingBaseProductPricesQuery` and pass it any options that fit your needs.
 * When your component renders, `useBillingBaseProductPricesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBillingBaseProductPricesQuery({
 *   variables: {
 *   },
 * });
 */ export function useBillingBaseProductPricesQuery(baseOptions) {
    _s31();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(BillingBaseProductPricesDocument, options);
}
_s31(useBillingBaseProductPricesQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useBillingBaseProductPricesLazyQuery(baseOptions) {
    _s32();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(BillingBaseProductPricesDocument, options);
}
_s32(useBillingBaseProductPricesLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const BillingPortalSessionDocument = gql`
    query BillingPortalSession($returnUrlPath: String) {
  billingPortalSession(returnUrlPath: $returnUrlPath) {
    url
  }
}
    `;
/**
 * __useBillingPortalSessionQuery__
 *
 * To run a query within a React component, call `useBillingPortalSessionQuery` and pass it any options that fit your needs.
 * When your component renders, `useBillingPortalSessionQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useBillingPortalSessionQuery({
 *   variables: {
 *      returnUrlPath: // value for 'returnUrlPath'
 *   },
 * });
 */ export function useBillingPortalSessionQuery(baseOptions) {
    _s33();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(BillingPortalSessionDocument, options);
}
_s33(useBillingPortalSessionQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useBillingPortalSessionLazyQuery(baseOptions) {
    _s34();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(BillingPortalSessionDocument, options);
}
_s34(useBillingPortalSessionLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const CheckoutSessionDocument = gql`
    mutation CheckoutSession($recurringInterval: SubscriptionInterval!, $successUrlPath: String, $plan: BillingPlanKey!, $requirePaymentMethod: Boolean!) {
  checkoutSession(
    recurringInterval: $recurringInterval
    successUrlPath: $successUrlPath
    plan: $plan
    requirePaymentMethod: $requirePaymentMethod
  ) {
    url
  }
}
    `;
/**
 * __useCheckoutSessionMutation__
 *
 * To run a mutation, you first call `useCheckoutSessionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCheckoutSessionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [checkoutSessionMutation, { data, loading, error }] = useCheckoutSessionMutation({
 *   variables: {
 *      recurringInterval: // value for 'recurringInterval'
 *      successUrlPath: // value for 'successUrlPath'
 *      plan: // value for 'plan'
 *      requirePaymentMethod: // value for 'requirePaymentMethod'
 *   },
 * });
 */ export function useCheckoutSessionMutation(baseOptions) {
    _s35();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(CheckoutSessionDocument, options);
}
_s35(useCheckoutSessionMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UpdateBillingSubscriptionDocument = gql`
    mutation UpdateBillingSubscription {
  updateBillingSubscription {
    success
  }
}
    `;
/**
 * __useUpdateBillingSubscriptionMutation__
 *
 * To run a mutation, you first call `useUpdateBillingSubscriptionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateBillingSubscriptionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateBillingSubscriptionMutation, { data, loading, error }] = useUpdateBillingSubscriptionMutation({
 *   variables: {
 *   },
 * });
 */ export function useUpdateBillingSubscriptionMutation(baseOptions) {
    _s36();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UpdateBillingSubscriptionDocument, options);
}
_s36(useUpdateBillingSubscriptionMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetClientConfigDocument = gql`
    query GetClientConfig {
  clientConfig {
    billing {
      isBillingEnabled
      billingUrl
      trialPeriods {
        duration
        isCreditCardRequired
      }
    }
    authProviders {
      google
      password
      microsoft
      sso {
        id
        name
        type
        status
        issuer
      }
    }
    signInPrefilled
    isMultiWorkspaceEnabled
    isEmailVerificationRequired
    defaultSubdomain
    frontDomain
    debugMode
    analyticsEnabled
    isAttachmentPreviewEnabled
    support {
      supportDriver
      supportFrontChatId
    }
    sentry {
      dsn
      environment
      release
    }
    captcha {
      provider
      siteKey
    }
    api {
      mutationMaximumAffectedRecords
    }
    chromeExtensionId
    canManageFeatureFlags
    publicFeatureFlags {
      key
      metadata {
        label
        description
        imagePath
      }
    }
    isMicrosoftMessagingEnabled
    isMicrosoftCalendarEnabled
    isGoogleMessagingEnabled
    isGoogleCalendarEnabled
  }
}
    `;
/**
 * __useGetClientConfigQuery__
 *
 * To run a query within a React component, call `useGetClientConfigQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetClientConfigQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetClientConfigQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetClientConfigQuery(baseOptions) {
    _s37();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetClientConfigDocument, options);
}
_s37(useGetClientConfigQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetClientConfigLazyQuery(baseOptions) {
    _s38();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetClientConfigDocument, options);
}
_s38(useGetClientConfigLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const SearchDocument = gql`
    query Search($searchInput: String!, $limit: Int!, $excludedObjectNameSingulars: [String!], $includedObjectNameSingulars: [String!], $filter: ObjectRecordFilterInput) {
  search(
    searchInput: $searchInput
    limit: $limit
    excludedObjectNameSingulars: $excludedObjectNameSingulars
    includedObjectNameSingulars: $includedObjectNameSingulars
    filter: $filter
  ) {
    recordId
    objectNameSingular
    label
    imageUrl
    tsRankCD
    tsRank
  }
}
    `;
/**
 * __useSearchQuery__
 *
 * To run a query within a React component, call `useSearchQuery` and pass it any options that fit your needs.
 * When your component renders, `useSearchQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useSearchQuery({
 *   variables: {
 *      searchInput: // value for 'searchInput'
 *      limit: // value for 'limit'
 *      excludedObjectNameSingulars: // value for 'excludedObjectNameSingulars'
 *      includedObjectNameSingulars: // value for 'includedObjectNameSingulars'
 *      filter: // value for 'filter'
 *   },
 * });
 */ export function useSearchQuery(baseOptions) {
    _s39();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(SearchDocument, options);
}
_s39(useSearchQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useSearchLazyQuery(baseOptions) {
    _s40();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(SearchDocument, options);
}
_s40(useSearchLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const SkipSyncEmailOnboardingStepDocument = gql`
    mutation SkipSyncEmailOnboardingStep {
  skipSyncEmailOnboardingStep {
    success
  }
}
    `;
/**
 * __useSkipSyncEmailOnboardingStepMutation__
 *
 * To run a mutation, you first call `useSkipSyncEmailOnboardingStepMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSkipSyncEmailOnboardingStepMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [skipSyncEmailOnboardingStepMutation, { data, loading, error }] = useSkipSyncEmailOnboardingStepMutation({
 *   variables: {
 *   },
 * });
 */ export function useSkipSyncEmailOnboardingStepMutation(baseOptions) {
    _s41();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(SkipSyncEmailOnboardingStepDocument, options);
}
_s41(useSkipSyncEmailOnboardingStepMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UpdateWorkspaceFeatureFlagDocument = gql`
    mutation UpdateWorkspaceFeatureFlag($workspaceId: String!, $featureFlag: String!, $value: Boolean!) {
  updateWorkspaceFeatureFlag(
    workspaceId: $workspaceId
    featureFlag: $featureFlag
    value: $value
  )
}
    `;
/**
 * __useUpdateWorkspaceFeatureFlagMutation__
 *
 * To run a mutation, you first call `useUpdateWorkspaceFeatureFlagMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWorkspaceFeatureFlagMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWorkspaceFeatureFlagMutation, { data, loading, error }] = useUpdateWorkspaceFeatureFlagMutation({
 *   variables: {
 *      workspaceId: // value for 'workspaceId'
 *      featureFlag: // value for 'featureFlag'
 *      value: // value for 'value'
 *   },
 * });
 */ export function useUpdateWorkspaceFeatureFlagMutation(baseOptions) {
    _s42();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UpdateWorkspaceFeatureFlagDocument, options);
}
_s42(useUpdateWorkspaceFeatureFlagMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UserLookupAdminPanelDocument = gql`
    mutation UserLookupAdminPanel($userIdentifier: String!) {
  userLookupAdminPanel(userIdentifier: $userIdentifier) {
    user {
      id
      email
      firstName
      lastName
    }
    workspaces {
      id
      name
      logo
      totalUsers
      allowImpersonation
      users {
        id
        email
        firstName
        lastName
      }
      featureFlags {
        key
        value
      }
    }
  }
}
    `;
/**
 * __useUserLookupAdminPanelMutation__
 *
 * To run a mutation, you first call `useUserLookupAdminPanelMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUserLookupAdminPanelMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [userLookupAdminPanelMutation, { data, loading, error }] = useUserLookupAdminPanelMutation({
 *   variables: {
 *      userIdentifier: // value for 'userIdentifier'
 *   },
 * });
 */ export function useUserLookupAdminPanelMutation(baseOptions) {
    _s43();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UserLookupAdminPanelDocument, options);
}
_s43(useUserLookupAdminPanelMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetEnvironmentVariablesGroupedDocument = gql`
    query GetEnvironmentVariablesGrouped {
  getEnvironmentVariablesGrouped {
    groups {
      name
      description
      isHiddenOnLoad
      variables {
        name
        description
        value
        sensitive
      }
    }
  }
}
    `;
/**
 * __useGetEnvironmentVariablesGroupedQuery__
 *
 * To run a query within a React component, call `useGetEnvironmentVariablesGroupedQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetEnvironmentVariablesGroupedQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetEnvironmentVariablesGroupedQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetEnvironmentVariablesGroupedQuery(baseOptions) {
    _s44();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetEnvironmentVariablesGroupedDocument, options);
}
_s44(useGetEnvironmentVariablesGroupedQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetEnvironmentVariablesGroupedLazyQuery(baseOptions) {
    _s45();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetEnvironmentVariablesGroupedDocument, options);
}
_s45(useGetEnvironmentVariablesGroupedLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const GetIndicatorHealthStatusDocument = gql`
    query GetIndicatorHealthStatus($indicatorId: HealthIndicatorId!) {
  getIndicatorHealthStatus(indicatorId: $indicatorId) {
    id
    label
    description
    status
    errorMessage
    details
    queues {
      id
      queueName
      status
    }
  }
}
    `;
/**
 * __useGetIndicatorHealthStatusQuery__
 *
 * To run a query within a React component, call `useGetIndicatorHealthStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetIndicatorHealthStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetIndicatorHealthStatusQuery({
 *   variables: {
 *      indicatorId: // value for 'indicatorId'
 *   },
 * });
 */ export function useGetIndicatorHealthStatusQuery(baseOptions) {
    _s46();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetIndicatorHealthStatusDocument, options);
}
_s46(useGetIndicatorHealthStatusQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetIndicatorHealthStatusLazyQuery(baseOptions) {
    _s47();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetIndicatorHealthStatusDocument, options);
}
_s47(useGetIndicatorHealthStatusLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const GetQueueMetricsDocument = gql`
    query GetQueueMetrics($queueName: String!, $timeRange: QueueMetricsTimeRange) {
  getQueueMetrics(queueName: $queueName, timeRange: $timeRange) {
    queueName
    timeRange
    workers
    details {
      failed
      completed
      waiting
      active
      delayed
      failureRate
    }
    data {
      id
      data {
        x
        y
      }
    }
  }
}
    `;
/**
 * __useGetQueueMetricsQuery__
 *
 * To run a query within a React component, call `useGetQueueMetricsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetQueueMetricsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetQueueMetricsQuery({
 *   variables: {
 *      queueName: // value for 'queueName'
 *      timeRange: // value for 'timeRange'
 *   },
 * });
 */ export function useGetQueueMetricsQuery(baseOptions) {
    _s48();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetQueueMetricsDocument, options);
}
_s48(useGetQueueMetricsQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetQueueMetricsLazyQuery(baseOptions) {
    _s49();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetQueueMetricsDocument, options);
}
_s49(useGetQueueMetricsLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const GetSystemHealthStatusDocument = gql`
    query GetSystemHealthStatus {
  getSystemHealthStatus {
    services {
      id
      label
      status
    }
  }
}
    `;
/**
 * __useGetSystemHealthStatusQuery__
 *
 * To run a query within a React component, call `useGetSystemHealthStatusQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSystemHealthStatusQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSystemHealthStatusQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetSystemHealthStatusQuery(baseOptions) {
    _s50();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetSystemHealthStatusDocument, options);
}
_s50(useGetSystemHealthStatusQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetSystemHealthStatusLazyQuery(baseOptions) {
    _s51();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetSystemHealthStatusDocument, options);
}
_s51(useGetSystemHealthStatusLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const UpdateLabPublicFeatureFlagDocument = gql`
    mutation UpdateLabPublicFeatureFlag($input: UpdateLabPublicFeatureFlagInput!) {
  updateLabPublicFeatureFlag(input: $input) {
    id
    key
    value
  }
}
    `;
/**
 * __useUpdateLabPublicFeatureFlagMutation__
 *
 * To run a mutation, you first call `useUpdateLabPublicFeatureFlagMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateLabPublicFeatureFlagMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateLabPublicFeatureFlagMutation, { data, loading, error }] = useUpdateLabPublicFeatureFlagMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useUpdateLabPublicFeatureFlagMutation(baseOptions) {
    _s52();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UpdateLabPublicFeatureFlagDocument, options);
}
_s52(useUpdateLabPublicFeatureFlagMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UpdateWorkspaceMemberRoleDocument = gql`
    mutation UpdateWorkspaceMemberRole($workspaceMemberId: String!, $roleId: String!) {
  updateWorkspaceMemberRole(
    workspaceMemberId: $workspaceMemberId
    roleId: $roleId
  ) {
    ...WorkspaceMemberQueryFragment
    roles {
      ...RoleFragment
    }
  }
}
    ${WorkspaceMemberQueryFragmentFragmentDoc}
${RoleFragmentFragmentDoc}`;
/**
 * __useUpdateWorkspaceMemberRoleMutation__
 *
 * To run a mutation, you first call `useUpdateWorkspaceMemberRoleMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWorkspaceMemberRoleMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWorkspaceMemberRoleMutation, { data, loading, error }] = useUpdateWorkspaceMemberRoleMutation({
 *   variables: {
 *      workspaceMemberId: // value for 'workspaceMemberId'
 *      roleId: // value for 'roleId'
 *   },
 * });
 */ export function useUpdateWorkspaceMemberRoleMutation(baseOptions) {
    _s53();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UpdateWorkspaceMemberRoleDocument, options);
}
_s53(useUpdateWorkspaceMemberRoleMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetRolesDocument = gql`
    query GetRoles {
  getRoles {
    ...RoleFragment
    workspaceMembers {
      ...WorkspaceMemberQueryFragment
    }
  }
}
    ${RoleFragmentFragmentDoc}
${WorkspaceMemberQueryFragmentFragmentDoc}`;
/**
 * __useGetRolesQuery__
 *
 * To run a query within a React component, call `useGetRolesQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRolesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRolesQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetRolesQuery(baseOptions) {
    _s54();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetRolesDocument, options);
}
_s54(useGetRolesQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetRolesLazyQuery(baseOptions) {
    _s55();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetRolesDocument, options);
}
_s55(useGetRolesLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const CreateApprovedAccessDomainDocument = gql`
    mutation CreateApprovedAccessDomain($input: CreateApprovedAccessDomainInput!) {
  createApprovedAccessDomain(input: $input) {
    id
    domain
    isValidated
    createdAt
  }
}
    `;
/**
 * __useCreateApprovedAccessDomainMutation__
 *
 * To run a mutation, you first call `useCreateApprovedAccessDomainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateApprovedAccessDomainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createApprovedAccessDomainMutation, { data, loading, error }] = useCreateApprovedAccessDomainMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useCreateApprovedAccessDomainMutation(baseOptions) {
    _s56();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(CreateApprovedAccessDomainDocument, options);
}
_s56(useCreateApprovedAccessDomainMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const CreateOidcIdentityProviderDocument = gql`
    mutation CreateOIDCIdentityProvider($input: SetupOIDCSsoInput!) {
  createOIDCIdentityProvider(input: $input) {
    id
    type
    issuer
    name
    status
  }
}
    `;
/**
 * __useCreateOidcIdentityProviderMutation__
 *
 * To run a mutation, you first call `useCreateOidcIdentityProviderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOidcIdentityProviderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOidcIdentityProviderMutation, { data, loading, error }] = useCreateOidcIdentityProviderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useCreateOidcIdentityProviderMutation(baseOptions) {
    _s57();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(CreateOidcIdentityProviderDocument, options);
}
_s57(useCreateOidcIdentityProviderMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const CreateSamlIdentityProviderDocument = gql`
    mutation CreateSAMLIdentityProvider($input: SetupSAMLSsoInput!) {
  createSAMLIdentityProvider(input: $input) {
    id
    type
    issuer
    name
    status
  }
}
    `;
/**
 * __useCreateSamlIdentityProviderMutation__
 *
 * To run a mutation, you first call `useCreateSamlIdentityProviderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSamlIdentityProviderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSamlIdentityProviderMutation, { data, loading, error }] = useCreateSamlIdentityProviderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useCreateSamlIdentityProviderMutation(baseOptions) {
    _s58();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(CreateSamlIdentityProviderDocument, options);
}
_s58(useCreateSamlIdentityProviderMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const DeleteApprovedAccessDomainDocument = gql`
    mutation DeleteApprovedAccessDomain($input: DeleteApprovedAccessDomainInput!) {
  deleteApprovedAccessDomain(input: $input)
}
    `;
/**
 * __useDeleteApprovedAccessDomainMutation__
 *
 * To run a mutation, you first call `useDeleteApprovedAccessDomainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteApprovedAccessDomainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteApprovedAccessDomainMutation, { data, loading, error }] = useDeleteApprovedAccessDomainMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useDeleteApprovedAccessDomainMutation(baseOptions) {
    _s59();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(DeleteApprovedAccessDomainDocument, options);
}
_s59(useDeleteApprovedAccessDomainMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const DeleteSsoIdentityProviderDocument = gql`
    mutation DeleteSSOIdentityProvider($input: DeleteSsoInput!) {
  deleteSSOIdentityProvider(input: $input) {
    identityProviderId
  }
}
    `;
/**
 * __useDeleteSsoIdentityProviderMutation__
 *
 * To run a mutation, you first call `useDeleteSsoIdentityProviderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSsoIdentityProviderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSsoIdentityProviderMutation, { data, loading, error }] = useDeleteSsoIdentityProviderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useDeleteSsoIdentityProviderMutation(baseOptions) {
    _s60();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(DeleteSsoIdentityProviderDocument, options);
}
_s60(useDeleteSsoIdentityProviderMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const EditSsoIdentityProviderDocument = gql`
    mutation EditSSOIdentityProvider($input: EditSsoInput!) {
  editSSOIdentityProvider(input: $input) {
    id
    type
    issuer
    name
    status
  }
}
    `;
/**
 * __useEditSsoIdentityProviderMutation__
 *
 * To run a mutation, you first call `useEditSsoIdentityProviderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useEditSsoIdentityProviderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [editSsoIdentityProviderMutation, { data, loading, error }] = useEditSsoIdentityProviderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useEditSsoIdentityProviderMutation(baseOptions) {
    _s61();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(EditSsoIdentityProviderDocument, options);
}
_s61(useEditSsoIdentityProviderMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const ValidateApprovedAccessDomainDocument = gql`
    mutation ValidateApprovedAccessDomain($input: ValidateApprovedAccessDomainInput!) {
  validateApprovedAccessDomain(input: $input) {
    id
    isValidated
    domain
    createdAt
  }
}
    `;
/**
 * __useValidateApprovedAccessDomainMutation__
 *
 * To run a mutation, you first call `useValidateApprovedAccessDomainMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useValidateApprovedAccessDomainMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [validateApprovedAccessDomainMutation, { data, loading, error }] = useValidateApprovedAccessDomainMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useValidateApprovedAccessDomainMutation(baseOptions) {
    _s62();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(ValidateApprovedAccessDomainDocument, options);
}
_s62(useValidateApprovedAccessDomainMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetApprovedAccessDomainsDocument = gql`
    query GetApprovedAccessDomains {
  getApprovedAccessDomains {
    id
    createdAt
    domain
    isValidated
  }
}
    `;
/**
 * __useGetApprovedAccessDomainsQuery__
 *
 * To run a query within a React component, call `useGetApprovedAccessDomainsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetApprovedAccessDomainsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetApprovedAccessDomainsQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetApprovedAccessDomainsQuery(baseOptions) {
    _s63();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetApprovedAccessDomainsDocument, options);
}
_s63(useGetApprovedAccessDomainsQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetApprovedAccessDomainsLazyQuery(baseOptions) {
    _s64();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetApprovedAccessDomainsDocument, options);
}
_s64(useGetApprovedAccessDomainsLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const GetSsoIdentityProvidersDocument = gql`
    query GetSSOIdentityProviders {
  getSSOIdentityProviders {
    type
    id
    name
    issuer
    status
  }
}
    `;
/**
 * __useGetSsoIdentityProvidersQuery__
 *
 * To run a query within a React component, call `useGetSsoIdentityProvidersQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSsoIdentityProvidersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSsoIdentityProvidersQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetSsoIdentityProvidersQuery(baseOptions) {
    _s65();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetSsoIdentityProvidersDocument, options);
}
_s65(useGetSsoIdentityProvidersQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetSsoIdentityProvidersLazyQuery(baseOptions) {
    _s66();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetSsoIdentityProvidersDocument, options);
}
_s66(useGetSsoIdentityProvidersLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const DeleteUserAccountDocument = gql`
    mutation DeleteUserAccount {
  deleteUser {
    id
  }
}
    `;
/**
 * __useDeleteUserAccountMutation__
 *
 * To run a mutation, you first call `useDeleteUserAccountMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteUserAccountMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteUserAccountMutation, { data, loading, error }] = useDeleteUserAccountMutation({
 *   variables: {
 *   },
 * });
 */ export function useDeleteUserAccountMutation(baseOptions) {
    _s67();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(DeleteUserAccountDocument, options);
}
_s67(useDeleteUserAccountMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UploadProfilePictureDocument = gql`
    mutation UploadProfilePicture($file: Upload!) {
  uploadProfilePicture(file: $file)
}
    `;
/**
 * __useUploadProfilePictureMutation__
 *
 * To run a mutation, you first call `useUploadProfilePictureMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadProfilePictureMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadProfilePictureMutation, { data, loading, error }] = useUploadProfilePictureMutation({
 *   variables: {
 *      file: // value for 'file'
 *   },
 * });
 */ export function useUploadProfilePictureMutation(baseOptions) {
    _s68();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UploadProfilePictureDocument, options);
}
_s68(useUploadProfilePictureMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetCurrentUserDocument = gql`
    query GetCurrentUser {
  currentUser {
    ...UserQueryFragment
  }
}
    ${UserQueryFragmentFragmentDoc}`;
/**
 * __useGetCurrentUserQuery__
 *
 * To run a query within a React component, call `useGetCurrentUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetCurrentUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetCurrentUserQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetCurrentUserQuery(baseOptions) {
    _s69();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetCurrentUserDocument, options);
}
_s69(useGetCurrentUserQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetCurrentUserLazyQuery(baseOptions) {
    _s70();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetCurrentUserDocument, options);
}
_s70(useGetCurrentUserLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const ActivateWorkflowVersionDocument = gql`
    mutation ActivateWorkflowVersion($workflowVersionId: String!) {
  activateWorkflowVersion(workflowVersionId: $workflowVersionId)
}
    `;
/**
 * __useActivateWorkflowVersionMutation__
 *
 * To run a mutation, you first call `useActivateWorkflowVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useActivateWorkflowVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [activateWorkflowVersionMutation, { data, loading, error }] = useActivateWorkflowVersionMutation({
 *   variables: {
 *      workflowVersionId: // value for 'workflowVersionId'
 *   },
 * });
 */ export function useActivateWorkflowVersionMutation(baseOptions) {
    _s71();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(ActivateWorkflowVersionDocument, options);
}
_s71(useActivateWorkflowVersionMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const ComputeStepOutputSchemaDocument = gql`
    mutation ComputeStepOutputSchema($input: ComputeStepOutputSchemaInput!) {
  computeStepOutputSchema(input: $input)
}
    `;
/**
 * __useComputeStepOutputSchemaMutation__
 *
 * To run a mutation, you first call `useComputeStepOutputSchemaMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useComputeStepOutputSchemaMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [computeStepOutputSchemaMutation, { data, loading, error }] = useComputeStepOutputSchemaMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useComputeStepOutputSchemaMutation(baseOptions) {
    _s72();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(ComputeStepOutputSchemaDocument, options);
}
_s72(useComputeStepOutputSchemaMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const CreateDraftFromWorkflowVersionDocument = gql`
    mutation CreateDraftFromWorkflowVersion($input: CreateDraftFromWorkflowVersionInput!) {
  createDraftFromWorkflowVersion(input: $input) {
    id
  }
}
    `;
/**
 * __useCreateDraftFromWorkflowVersionMutation__
 *
 * To run a mutation, you first call `useCreateDraftFromWorkflowVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDraftFromWorkflowVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDraftFromWorkflowVersionMutation, { data, loading, error }] = useCreateDraftFromWorkflowVersionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useCreateDraftFromWorkflowVersionMutation(baseOptions) {
    _s73();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(CreateDraftFromWorkflowVersionDocument, options);
}
_s73(useCreateDraftFromWorkflowVersionMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const CreateWorkflowVersionStepDocument = gql`
    mutation CreateWorkflowVersionStep($input: CreateWorkflowVersionStepInput!) {
  createWorkflowVersionStep(input: $input) {
    id
    name
    type
    settings
    valid
  }
}
    `;
/**
 * __useCreateWorkflowVersionStepMutation__
 *
 * To run a mutation, you first call `useCreateWorkflowVersionStepMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateWorkflowVersionStepMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createWorkflowVersionStepMutation, { data, loading, error }] = useCreateWorkflowVersionStepMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useCreateWorkflowVersionStepMutation(baseOptions) {
    _s74();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(CreateWorkflowVersionStepDocument, options);
}
_s74(useCreateWorkflowVersionStepMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const DeactivateWorkflowVersionDocument = gql`
    mutation DeactivateWorkflowVersion($workflowVersionId: String!) {
  deactivateWorkflowVersion(workflowVersionId: $workflowVersionId)
}
    `;
/**
 * __useDeactivateWorkflowVersionMutation__
 *
 * To run a mutation, you first call `useDeactivateWorkflowVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeactivateWorkflowVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deactivateWorkflowVersionMutation, { data, loading, error }] = useDeactivateWorkflowVersionMutation({
 *   variables: {
 *      workflowVersionId: // value for 'workflowVersionId'
 *   },
 * });
 */ export function useDeactivateWorkflowVersionMutation(baseOptions) {
    _s75();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(DeactivateWorkflowVersionDocument, options);
}
_s75(useDeactivateWorkflowVersionMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const DeleteWorkflowVersionStepDocument = gql`
    mutation DeleteWorkflowVersionStep($input: DeleteWorkflowVersionStepInput!) {
  deleteWorkflowVersionStep(input: $input) {
    id
    name
    type
    settings
    valid
  }
}
    `;
/**
 * __useDeleteWorkflowVersionStepMutation__
 *
 * To run a mutation, you first call `useDeleteWorkflowVersionStepMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteWorkflowVersionStepMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteWorkflowVersionStepMutation, { data, loading, error }] = useDeleteWorkflowVersionStepMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useDeleteWorkflowVersionStepMutation(baseOptions) {
    _s76();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(DeleteWorkflowVersionStepDocument, options);
}
_s76(useDeleteWorkflowVersionStepMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const RunWorkflowVersionDocument = gql`
    mutation RunWorkflowVersion($input: RunWorkflowVersionInput!) {
  runWorkflowVersion(input: $input) {
    workflowRunId
  }
}
    `;
/**
 * __useRunWorkflowVersionMutation__
 *
 * To run a mutation, you first call `useRunWorkflowVersionMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useRunWorkflowVersionMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [runWorkflowVersionMutation, { data, loading, error }] = useRunWorkflowVersionMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useRunWorkflowVersionMutation(baseOptions) {
    _s77();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(RunWorkflowVersionDocument, options);
}
_s77(useRunWorkflowVersionMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UpdateWorkflowRunStepDocument = gql`
    mutation UpdateWorkflowRunStep($input: UpdateWorkflowRunStepInput!) {
  updateWorkflowRunStep(input: $input) {
    id
    name
    type
    settings
    valid
  }
}
    `;
/**
 * __useUpdateWorkflowRunStepMutation__
 *
 * To run a mutation, you first call `useUpdateWorkflowRunStepMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWorkflowRunStepMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWorkflowRunStepMutation, { data, loading, error }] = useUpdateWorkflowRunStepMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useUpdateWorkflowRunStepMutation(baseOptions) {
    _s78();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UpdateWorkflowRunStepDocument, options);
}
_s78(useUpdateWorkflowRunStepMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UpdateWorkflowVersionStepDocument = gql`
    mutation UpdateWorkflowVersionStep($input: UpdateWorkflowVersionStepInput!) {
  updateWorkflowVersionStep(input: $input) {
    id
    name
    type
    settings
    valid
  }
}
    `;
/**
 * __useUpdateWorkflowVersionStepMutation__
 *
 * To run a mutation, you first call `useUpdateWorkflowVersionStepMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWorkflowVersionStepMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWorkflowVersionStepMutation, { data, loading, error }] = useUpdateWorkflowVersionStepMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useUpdateWorkflowVersionStepMutation(baseOptions) {
    _s79();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UpdateWorkflowVersionStepDocument, options);
}
_s79(useUpdateWorkflowVersionStepMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const SubmitFormStepDocument = gql`
    mutation SubmitFormStep($input: SubmitFormStepInput!) {
  submitFormStep(input: $input)
}
    `;
/**
 * __useSubmitFormStepMutation__
 *
 * To run a mutation, you first call `useSubmitFormStepMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSubmitFormStepMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [submitFormStepMutation, { data, loading, error }] = useSubmitFormStepMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useSubmitFormStepMutation(baseOptions) {
    _s80();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(SubmitFormStepDocument, options);
}
_s80(useSubmitFormStepMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const DeleteWorkspaceInvitationDocument = gql`
    mutation DeleteWorkspaceInvitation($appTokenId: String!) {
  deleteWorkspaceInvitation(appTokenId: $appTokenId)
}
    `;
/**
 * __useDeleteWorkspaceInvitationMutation__
 *
 * To run a mutation, you first call `useDeleteWorkspaceInvitationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteWorkspaceInvitationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteWorkspaceInvitationMutation, { data, loading, error }] = useDeleteWorkspaceInvitationMutation({
 *   variables: {
 *      appTokenId: // value for 'appTokenId'
 *   },
 * });
 */ export function useDeleteWorkspaceInvitationMutation(baseOptions) {
    _s81();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(DeleteWorkspaceInvitationDocument, options);
}
_s81(useDeleteWorkspaceInvitationMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const ResendWorkspaceInvitationDocument = gql`
    mutation ResendWorkspaceInvitation($appTokenId: String!) {
  resendWorkspaceInvitation(appTokenId: $appTokenId) {
    success
    errors
    result {
      ... on WorkspaceInvitation {
        id
        email
        expiresAt
      }
    }
  }
}
    `;
/**
 * __useResendWorkspaceInvitationMutation__
 *
 * To run a mutation, you first call `useResendWorkspaceInvitationMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResendWorkspaceInvitationMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resendWorkspaceInvitationMutation, { data, loading, error }] = useResendWorkspaceInvitationMutation({
 *   variables: {
 *      appTokenId: // value for 'appTokenId'
 *   },
 * });
 */ export function useResendWorkspaceInvitationMutation(baseOptions) {
    _s82();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(ResendWorkspaceInvitationDocument, options);
}
_s82(useResendWorkspaceInvitationMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const SendInvitationsDocument = gql`
    mutation SendInvitations($emails: [String!]!) {
  sendInvitations(emails: $emails) {
    success
    errors
    result {
      ... on WorkspaceInvitation {
        id
        email
        expiresAt
      }
    }
  }
}
    `;
/**
 * __useSendInvitationsMutation__
 *
 * To run a mutation, you first call `useSendInvitationsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendInvitationsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendInvitationsMutation, { data, loading, error }] = useSendInvitationsMutation({
 *   variables: {
 *      emails: // value for 'emails'
 *   },
 * });
 */ export function useSendInvitationsMutation(baseOptions) {
    _s83();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(SendInvitationsDocument, options);
}
_s83(useSendInvitationsMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetWorkspaceInvitationsDocument = gql`
    query GetWorkspaceInvitations {
  findWorkspaceInvitations {
    id
    email
    expiresAt
  }
}
    `;
/**
 * __useGetWorkspaceInvitationsQuery__
 *
 * To run a query within a React component, call `useGetWorkspaceInvitationsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkspaceInvitationsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkspaceInvitationsQuery({
 *   variables: {
 *   },
 * });
 */ export function useGetWorkspaceInvitationsQuery(baseOptions) {
    _s84();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetWorkspaceInvitationsDocument, options);
}
_s84(useGetWorkspaceInvitationsQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetWorkspaceInvitationsLazyQuery(baseOptions) {
    _s85();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetWorkspaceInvitationsDocument, options);
}
_s85(useGetWorkspaceInvitationsLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});
export const ActivateWorkspaceDocument = gql`
    mutation ActivateWorkspace($input: ActivateWorkspaceInput!) {
  activateWorkspace(data: $input) {
    id
  }
}
    `;
/**
 * __useActivateWorkspaceMutation__
 *
 * To run a mutation, you first call `useActivateWorkspaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useActivateWorkspaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [activateWorkspaceMutation, { data, loading, error }] = useActivateWorkspaceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useActivateWorkspaceMutation(baseOptions) {
    _s86();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(ActivateWorkspaceDocument, options);
}
_s86(useActivateWorkspaceMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const DeleteCurrentWorkspaceDocument = gql`
    mutation DeleteCurrentWorkspace {
  deleteCurrentWorkspace {
    id
  }
}
    `;
/**
 * __useDeleteCurrentWorkspaceMutation__
 *
 * To run a mutation, you first call `useDeleteCurrentWorkspaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteCurrentWorkspaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteCurrentWorkspaceMutation, { data, loading, error }] = useDeleteCurrentWorkspaceMutation({
 *   variables: {
 *   },
 * });
 */ export function useDeleteCurrentWorkspaceMutation(baseOptions) {
    _s87();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(DeleteCurrentWorkspaceDocument, options);
}
_s87(useDeleteCurrentWorkspaceMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UpdateWorkspaceDocument = gql`
    mutation UpdateWorkspace($input: UpdateWorkspaceInput!) {
  updateWorkspace(data: $input) {
    id
    customDomain
    subdomain
    displayName
    logo
    allowImpersonation
    isPublicInviteLinkEnabled
    isGoogleAuthEnabled
    isMicrosoftAuthEnabled
    isPasswordAuthEnabled
    defaultRole {
      ...RoleFragment
    }
  }
}
    ${RoleFragmentFragmentDoc}`;
/**
 * __useUpdateWorkspaceMutation__
 *
 * To run a mutation, you first call `useUpdateWorkspaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateWorkspaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateWorkspaceMutation, { data, loading, error }] = useUpdateWorkspaceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */ export function useUpdateWorkspaceMutation(baseOptions) {
    _s88();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UpdateWorkspaceDocument, options);
}
_s88(useUpdateWorkspaceMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const UploadWorkspaceLogoDocument = gql`
    mutation UploadWorkspaceLogo($file: Upload!) {
  uploadWorkspaceLogo(file: $file)
}
    `;
/**
 * __useUploadWorkspaceLogoMutation__
 *
 * To run a mutation, you first call `useUploadWorkspaceLogoMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUploadWorkspaceLogoMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [uploadWorkspaceLogoMutation, { data, loading, error }] = useUploadWorkspaceLogoMutation({
 *   variables: {
 *      file: // value for 'file'
 *   },
 * });
 */ export function useUploadWorkspaceLogoMutation(baseOptions) {
    _s89();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(UploadWorkspaceLogoDocument, options);
}
_s89(useUploadWorkspaceLogoMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const CheckCustomDomainValidRecordsDocument = gql`
    mutation CheckCustomDomainValidRecords {
  checkCustomDomainValidRecords {
    id
    customDomain
    records {
      type
      key
      value
      validationType
      status
    }
  }
}
    `;
/**
 * __useCheckCustomDomainValidRecordsMutation__
 *
 * To run a mutation, you first call `useCheckCustomDomainValidRecordsMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCheckCustomDomainValidRecordsMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [checkCustomDomainValidRecordsMutation, { data, loading, error }] = useCheckCustomDomainValidRecordsMutation({
 *   variables: {
 *   },
 * });
 */ export function useCheckCustomDomainValidRecordsMutation(baseOptions) {
    _s90();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useMutation(CheckCustomDomainValidRecordsDocument, options);
}
_s90(useCheckCustomDomainValidRecordsMutation, "wwwtpB20p0aLiHIvSy5P98MwIUg=", false, function() {
    return [
        Apollo.useMutation
    ];
});
export const GetWorkspaceFromInviteHashDocument = gql`
    query GetWorkspaceFromInviteHash($inviteHash: String!) {
  findWorkspaceFromInviteHash(inviteHash: $inviteHash) {
    id
    displayName
    logo
    allowImpersonation
  }
}
    `;
/**
 * __useGetWorkspaceFromInviteHashQuery__
 *
 * To run a query within a React component, call `useGetWorkspaceFromInviteHashQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetWorkspaceFromInviteHashQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetWorkspaceFromInviteHashQuery({
 *   variables: {
 *      inviteHash: // value for 'inviteHash'
 *   },
 * });
 */ export function useGetWorkspaceFromInviteHashQuery(baseOptions) {
    _s91();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useQuery(GetWorkspaceFromInviteHashDocument, options);
}
_s91(useGetWorkspaceFromInviteHashQuery, "4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=", false, function() {
    return [
        Apollo.useQuery
    ];
});
export function useGetWorkspaceFromInviteHashLazyQuery(baseOptions) {
    _s92();
    const options = {
        ...defaultOptions,
        ...baseOptions
    };
    return Apollo.useLazyQuery(GetWorkspaceFromInviteHashDocument, options);
}
_s92(useGetWorkspaceFromInviteHashLazyQuery, "On+3mFuZjiEOS3MQLgFXtHkppJ4=", false, function() {
    return [
        Apollo.useLazyQuery
    ];
});


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/generated/graphql.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/generated/graphql.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,