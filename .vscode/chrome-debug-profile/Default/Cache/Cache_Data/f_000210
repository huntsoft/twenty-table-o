import { getFilterTypeFromFieldType } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { ViewFilterOperand } from "/src/modules/views/types/ViewFilterOperand.ts";
import __vite__cjsImport2__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isNonEmptyString = __vite__cjsImport2__sniptt_guards["isNonEmptyString"];
import { generateILikeFiltersForCompositeFields } from "/src/utils/array/generateILikeFiltersForCompositeFields.ts";
export const getEmptyRecordGqlOperationFilter = ({ operand, correspondingField, recordFilter })=>{
    let emptyRecordFilter = {};
    const compositeFieldName = recordFilter.subFieldName;
    const isCompositeField = isNonEmptyString(compositeFieldName);
    const filterType = getFilterTypeFromFieldType(correspondingField.type);
    switch(filterType){
        case 'TEXT':
            emptyRecordFilter = {
                or: [
                    {
                        [correspondingField.name]: {
                            ilike: ''
                        }
                    },
                    {
                        [correspondingField.name]: {
                            is: 'NULL'
                        }
                    }
                ]
            };
            break;
        case 'PHONES':
            {
                if (!isCompositeField) {
                    const phonesFilter = generateILikeFiltersForCompositeFields('', correspondingField.name, [
                        'primaryPhoneNumber'
                    ], true);
                    emptyRecordFilter = {
                        and: phonesFilter
                    };
                    break;
                } else {
                    emptyRecordFilter = {
                        or: [
                            {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        ilike: ''
                                    }
                                }
                            },
                            {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        is: 'NULL'
                                    }
                                }
                            }
                        ]
                    };
                    break;
                }
            }
        case 'CURRENCY':
            emptyRecordFilter = {
                or: [
                    {
                        [correspondingField.name]: {
                            amountMicros: {
                                is: 'NULL'
                            }
                        }
                    }
                ]
            };
            break;
        case 'FULL_NAME':
            {
                if (!isCompositeField) {
                    const fullNameFilters = generateILikeFiltersForCompositeFields('', correspondingField.name, [
                        'firstName',
                        'lastName'
                    ], true);
                    emptyRecordFilter = {
                        and: fullNameFilters
                    };
                } else {
                    emptyRecordFilter = {
                        or: [
                            {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        ilike: ''
                                    }
                                }
                            },
                            {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        is: 'NULL'
                                    }
                                }
                            }
                        ]
                    };
                }
                break;
            }
        case 'LINKS':
            {
                if (!isCompositeField) {
                    const linksFilters = generateILikeFiltersForCompositeFields('', correspondingField.name, [
                        'primaryLinkLabel',
                        'primaryLinkUrl'
                    ], true);
                    emptyRecordFilter = {
                        and: linksFilters
                    };
                } else {
                    emptyRecordFilter = {
                        or: [
                            {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        ilike: ''
                                    }
                                }
                            },
                            {
                                [correspondingField.name]: {
                                    [compositeFieldName]: {
                                        is: 'NULL'
                                    }
                                }
                            }
                        ]
                    };
                }
                break;
            }
        case 'ADDRESS':
            if (!isCompositeField) {
                emptyRecordFilter = {
                    and: [
                        {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        addressStreet1: {
                                            ilike: ''
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressStreet1: {
                                            is: 'NULL'
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        addressStreet2: {
                                            ilike: ''
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressStreet2: {
                                            is: 'NULL'
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        addressCity: {
                                            ilike: ''
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressCity: {
                                            is: 'NULL'
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        addressState: {
                                            ilike: ''
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressState: {
                                            is: 'NULL'
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        addressCountry: {
                                            ilike: ''
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressCountry: {
                                            is: 'NULL'
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            or: [
                                {
                                    [correspondingField.name]: {
                                        addressPostcode: {
                                            ilike: ''
                                        }
                                    }
                                },
                                {
                                    [correspondingField.name]: {
                                        addressPostcode: {
                                            is: 'NULL'
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                };
            } else {
                emptyRecordFilter = {
                    or: [
                        {
                            [correspondingField.name]: {
                                [compositeFieldName]: {
                                    ilike: ''
                                }
                            }
                        },
                        {
                            [correspondingField.name]: {
                                [compositeFieldName]: {
                                    is: 'NULL'
                                }
                            }
                        }
                    ]
                };
            }
            break;
        case 'NUMBER':
            emptyRecordFilter = {
                [correspondingField.name]: {
                    is: 'NULL'
                }
            };
            break;
        case 'RATING':
            emptyRecordFilter = {
                [correspondingField.name]: {
                    is: 'NULL'
                }
            };
            break;
        case 'DATE':
        case 'DATE_TIME':
            emptyRecordFilter = {
                [correspondingField.name]: {
                    is: 'NULL'
                }
            };
            break;
        case 'SELECT':
            emptyRecordFilter = {
                [correspondingField.name]: {
                    is: 'NULL'
                }
            };
            break;
        case 'MULTI_SELECT':
            emptyRecordFilter = {
                or: [
                    {
                        [correspondingField.name]: {
                            is: 'NULL'
                        }
                    },
                    {
                        [correspondingField.name]: {
                            isEmptyArray: true
                        }
                    }
                ]
            };
            break;
        case 'RELATION':
            emptyRecordFilter = {
                [correspondingField.name + 'Id']: {
                    is: 'NULL'
                }
            };
            break;
        case 'ACTOR':
            emptyRecordFilter = {
                or: [
                    {
                        [correspondingField.name]: {
                            name: {
                                ilike: ''
                            }
                        }
                    },
                    {
                        [correspondingField.name]: {
                            name: {
                                is: 'NULL'
                            }
                        }
                    }
                ]
            };
            break;
        case 'ARRAY':
            emptyRecordFilter = {
                or: [
                    {
                        [correspondingField.name]: {
                            is: 'NULL'
                        }
                    },
                    {
                        [correspondingField.name]: {
                            isEmptyArray: true
                        }
                    }
                ]
            };
            break;
        case 'RAW_JSON':
            emptyRecordFilter = {
                or: [
                    {
                        [correspondingField.name]: {
                            is: 'NULL'
                        }
                    }
                ]
            };
            break;
        case 'EMAILS':
            emptyRecordFilter = {
                or: [
                    {
                        [correspondingField.name]: {
                            primaryEmail: {
                                ilike: ''
                            }
                        }
                    },
                    {
                        [correspondingField.name]: {
                            primaryEmail: {
                                is: 'NULL'
                            }
                        }
                    }
                ]
            };
            break;
        default:
            throw new Error(`Unsupported empty filter type ${filterType}`);
    }
    switch(operand){
        case ViewFilterOperand.IsEmpty:
            return emptyRecordFilter;
        case ViewFilterOperand.IsNotEmpty:
            return {
                not: emptyRecordFilter
            };
        default:
            throw new Error(`Unknown operand ${operand} for ${filterType} filter`);
    }
};

//# sourceMappingURL=data:application/json;base64,