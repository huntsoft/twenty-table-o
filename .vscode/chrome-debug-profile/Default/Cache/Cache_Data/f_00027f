import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownSourceSelect.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownSourceSelect.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { getFilterTypeFromFieldType } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { fieldMetadataItemUsedInDropdownComponentSelector } from "/src/modules/object-record/object-filter-dropdown/states/fieldMetadataItemUsedInDropdownComponentSelector.ts";
import { objectFilterDropdownSearchInputComponentState } from "/src/modules/object-record/object-filter-dropdown/states/objectFilterDropdownSearchInputComponentState.ts";
import { objectFilterDropdownSelectedRecordIdsComponentState } from "/src/modules/object-record/object-filter-dropdown/states/objectFilterDropdownSelectedRecordIdsComponentState.ts";
import { selectedFilterComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedFilterComponentState.ts";
import { selectedOperandInDropdownComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedOperandInDropdownComponentState.ts";
import { getActorSourceMultiSelectOptions } from "/src/modules/object-record/object-filter-dropdown/utils/getActorSourceMultiSelectOptions.ts";
import { useApplyRecordFilter } from "/src/modules/object-record/record-filter/hooks/useApplyRecordFilter.ts";
import { currentRecordFiltersComponentState } from "/src/modules/object-record/record-filter/states/currentRecordFiltersComponentState.ts";
import { findDuplicateRecordFilterInNonAdvancedRecordFilters } from "/src/modules/object-record/record-filter/utils/findDuplicateRecordFilterInNonAdvancedRecordFilters.ts";
import { SingleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/single-record-picker/types/SingleRecordPickerHotkeyScope.ts";
import { MultipleSelectDropdown } from "/src/modules/object-record/select/components/MultipleSelectDropdown.tsx";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import { ViewFilterOperand } from "/src/modules/views/types/ViewFilterOperand.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
export const EMPTY_FILTER_VALUE = '[]';
export const MAX_ITEMS_TO_DISPLAY = 3;
export const ObjectFilterDropdownSourceSelect = ({ viewComponentId })=>{
    _s();
    const objectFilterDropdownSearchInput = useRecoilComponentValueV2(objectFilterDropdownSearchInputComponentState);
    const setObjectFilterDropdownSelectedRecordIds = useSetRecoilComponentStateV2(objectFilterDropdownSelectedRecordIdsComponentState);
    const objectFilterDropdownSelectedRecordIds = useRecoilComponentValueV2(objectFilterDropdownSelectedRecordIdsComponentState);
    const selectedFilter = useRecoilComponentValueV2(selectedFilterComponentState);
    const selectedOperandInDropdown = useRecoilComponentValueV2(selectedOperandInDropdownComponentState);
    const fieldMetadataItemUsedInFilterDropdown = useRecoilComponentValueV2(fieldMetadataItemUsedInDropdownComponentSelector);
    const { applyRecordFilter } = useApplyRecordFilter(viewComponentId);
    const sourceTypes = getActorSourceMultiSelectOptions(objectFilterDropdownSelectedRecordIds);
    const filteredSelectedItems = sourceTypes.filter((option)=>objectFilterDropdownSelectedRecordIds.includes(option.id));
    const currentRecordFilters = useRecoilComponentValueV2(currentRecordFiltersComponentState);
    const handleMultipleItemSelectChange = (itemToSelect, newSelectedValue)=>{
        const newSelectedItemIds = newSelectedValue ? [
            ...objectFilterDropdownSelectedRecordIds,
            itemToSelect.id
        ] : objectFilterDropdownSelectedRecordIds.filter((id)=>id !== itemToSelect.id);
        if (!isDefined(fieldMetadataItemUsedInFilterDropdown)) {
            throw new Error('Field metadata item used in filter dropdown should be defined');
        }
        setObjectFilterDropdownSelectedRecordIds(newSelectedItemIds);
        const selectedItemNames = sourceTypes.filter((option)=>newSelectedItemIds.includes(option.id)).map((option)=>option.name);
        const filterDisplayValue = selectedItemNames.length > MAX_ITEMS_TO_DISPLAY ? `${selectedItemNames.length} source types` : selectedItemNames.join(', ');
        if (isDefined(fieldMetadataItemUsedInFilterDropdown) && isDefined(selectedOperandInDropdown)) {
            const newFilterValue = newSelectedItemIds.length > 0 ? JSON.stringify(newSelectedItemIds) : EMPTY_FILTER_VALUE;
            const duplicateFilterInCurrentRecordFilters = findDuplicateRecordFilterInNonAdvancedRecordFilters({
                recordFilters: currentRecordFilters,
                fieldMetadataItemId: fieldMetadataItemUsedInFilterDropdown.id,
                subFieldName: 'source'
            });
            const filterIsAlreadyInCurrentRecordFilters = isDefined(duplicateFilterInCurrentRecordFilters);
            const filterId = filterIsAlreadyInCurrentRecordFilters ? duplicateFilterInCurrentRecordFilters?.id : v4();
            applyRecordFilter({
                id: selectedFilter?.id ? selectedFilter.id : filterId,
                type: getFilterTypeFromFieldType(fieldMetadataItemUsedInFilterDropdown.type),
                label: fieldMetadataItemUsedInFilterDropdown.label,
                operand: selectedOperandInDropdown || ViewFilterOperand.Is,
                displayValue: filterDisplayValue,
                fieldMetadataId: fieldMetadataItemUsedInFilterDropdown.id,
                value: newFilterValue,
                recordFilterGroupId: selectedFilter?.recordFilterGroupId,
                subFieldName: 'source',
                positionInRecordFilterGroup: selectedFilter?.positionInRecordFilterGroup
            });
        }
    };
    return /*#__PURE__*/ _jsxDEV(MultipleSelectDropdown, {
        selectableListId: "object-filter-source-select-id",
        hotkeyScope: SingleRecordPickerHotkeyScope.SingleRecordPicker,
        itemsToSelect: sourceTypes.filter((item)=>!filteredSelectedItems.some((selected)=>selected.id === item.id)),
        filteredSelectedItems: filteredSelectedItems,
        selectedItems: filteredSelectedItems,
        onChange: handleMultipleItemSelectChange,
        searchFilter: objectFilterDropdownSearchInput,
        loadingItems: false
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownSourceSelect.tsx",
        lineNumber: 138,
        columnNumber: 5
    }, this);
};
_s(ObjectFilterDropdownSourceSelect, "zeyR2o6/qirkA3xSph2xu7i7Aq0=", false, function() {
    return [
        useRecoilComponentValueV2,
        useSetRecoilComponentStateV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useApplyRecordFilter,
        useRecoilComponentValueV2
    ];
});
_c = ObjectFilterDropdownSourceSelect;
var _c;
$RefreshReg$(_c, "ObjectFilterDropdownSourceSelect");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownSourceSelect.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownSourceSelect.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,