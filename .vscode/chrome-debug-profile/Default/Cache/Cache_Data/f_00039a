import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { useFilteredObjectMetadataItems } from "/src/modules/object-metadata/hooks/useFilteredObjectMetadataItems.ts";
import { Select } from "/src/modules/ui/input/components/Select.tsx";
import __vite__cjsImport4_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport4_react["useEffect"]; const useState = __vite__cjsImport4_react["useState"];
import { formatFieldMetadataItemAsFieldDefinition } from "/src/modules/object-metadata/utils/formatFieldMetadataItemAsFieldDefinition.ts";
import { FormFieldInput } from "/src/modules/object-record/record-field/components/FormFieldInput.tsx";
import { FormMultiSelectFieldInput } from "/src/modules/object-record/record-field/form-types/components/FormMultiSelectFieldInput.tsx";
import { WorkflowStepBody } from "/src/modules/workflow/workflow-steps/components/WorkflowStepBody.tsx";
import { WorkflowStepHeader } from "/src/modules/workflow/workflow-steps/components/WorkflowStepHeader.tsx";
import { WorkflowSingleRecordPicker } from "/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowSingleRecordPicker.tsx";
import { useActionHeaderTypeOrThrow } from "/src/modules/workflow/workflow-steps/workflow-actions/hooks/useActionHeaderTypeOrThrow.ts";
import { useActionIconColorOrThrow } from "/src/modules/workflow/workflow-steps/workflow-actions/hooks/useActionIconColorOrThrow.ts";
import { getActionIcon } from "/src/modules/workflow/workflow-steps/workflow-actions/utils/getActionIcon.ts";
import { WorkflowVariablePicker } from "/src/modules/workflow/workflow-variables/components/WorkflowVariablePicker.tsx";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { HorizontalSeparator, useIcons } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { useDebouncedCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/use-debounce.js?v=226f7286";
import { FieldMetadataType } from "/src/generated-metadata/graphql.ts";
const AVAILABLE_FIELD_METADATA_TYPES = [
    FieldMetadataType.TEXT,
    FieldMetadataType.NUMBER,
    FieldMetadataType.DATE,
    FieldMetadataType.BOOLEAN,
    FieldMetadataType.SELECT,
    FieldMetadataType.MULTI_SELECT,
    FieldMetadataType.EMAILS,
    FieldMetadataType.LINKS,
    FieldMetadataType.FULL_NAME,
    FieldMetadataType.ADDRESS,
    FieldMetadataType.PHONES,
    FieldMetadataType.CURRENCY,
    FieldMetadataType.DATE_TIME,
    FieldMetadataType.RAW_JSON,
    FieldMetadataType.UUID
];
export const WorkflowEditActionUpdateRecord = ({ action, actionOptions })=>{
    _s();
    const { getIcon } = useIcons();
    const { activeObjectMetadataItems } = useFilteredObjectMetadataItems();
    const availableMetadata = activeObjectMetadataItems.map((item)=>({
            Icon: getIcon(item.icon),
            label: item.labelPlural,
            value: item.nameSingular
        }));
    const [formData, setFormData] = useState({
        objectName: action.settings.input.objectName,
        objectRecordId: action.settings.input.objectRecordId,
        fieldsToUpdate: action.settings.input.fieldsToUpdate ?? [],
        ...action.settings.input.objectRecord
    });
    const isFormDisabled = actionOptions.readonly;
    const handleFieldChange = (fieldName, updatedValue)=>{
        const newFormData = {
            ...formData,
            [fieldName]: updatedValue
        };
        setFormData(newFormData);
        saveAction(newFormData);
    };
    const selectedObjectMetadataItemNameSingular = formData.objectName;
    const selectedObjectMetadataItem = activeObjectMetadataItems.find((item)=>item.nameSingular === selectedObjectMetadataItemNameSingular);
    if (!isDefined(selectedObjectMetadataItem)) {
        throw new Error('Should have found the metadata item');
    }
    const inlineFieldMetadataItems = selectedObjectMetadataItem.fields.filter((fieldMetadataItem)=>!fieldMetadataItem.isSystem && fieldMetadataItem.isActive && AVAILABLE_FIELD_METADATA_TYPES.includes(fieldMetadataItem.type)).sort((fieldMetadataItemA, fieldMetadataItemB)=>fieldMetadataItemA.name.localeCompare(fieldMetadataItemB.name));
    const inlineFieldDefinitions = inlineFieldMetadataItems.map((fieldMetadataItem)=>formatFieldMetadataItemAsFieldDefinition({
            field: fieldMetadataItem,
            objectMetadataItem: selectedObjectMetadataItem,
            showLabel: true,
            labelWidth: 90
        }));
    const saveAction = useDebouncedCallback(async (formData)=>{
        if (actionOptions.readonly === true) {
            return;
        }
        const { objectName: updatedObjectName, objectRecordId: updatedObjectRecordId, fieldsToUpdate: updatedFieldsToUpdate, ...updatedOtherFields } = formData;
        actionOptions.onActionUpdate({
            ...action,
            settings: {
                ...action.settings,
                input: {
                    objectName: updatedObjectName,
                    objectRecordId: updatedObjectRecordId ?? '',
                    objectRecord: updatedOtherFields,
                    fieldsToUpdate: updatedFieldsToUpdate ?? []
                }
            }
        });
    }, 1000);
    useEffect(()=>{
        return ()=>{
            saveAction.flush();
        };
    }, [
        saveAction
    ]);
    const headerTitle = isDefined(action.name) ? action.name : `Update Record`;
    const headerIcon = getActionIcon(action.type);
    const headerIconColor = useActionIconColorOrThrow(action.type);
    const headerType = useActionHeaderTypeOrThrow(action.type);
    return /*#__PURE__*/ _jsxDEV(_Fragment, {
        children: [
            /*#__PURE__*/ _jsxDEV(WorkflowStepHeader, {
                onTitleChange: (newName)=>{
                    if (actionOptions.readonly === true) {
                        return;
                    }
                    actionOptions.onActionUpdate({
                        ...action,
                        name: newName
                    });
                },
                Icon: getIcon(headerIcon),
                iconColor: headerIconColor,
                initialTitle: headerTitle,
                headerType: headerType,
                disabled: isFormDisabled
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx",
                lineNumber: 168,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(WorkflowStepBody, {
                children: [
                    /*#__PURE__*/ _jsxDEV(Select, {
                        dropdownId: "workflow-edit-action-record-update-object-name",
                        label: "Object",
                        fullWidth: true,
                        disabled: isFormDisabled,
                        value: formData.objectName,
                        emptyOption: {
                            label: 'Select an option',
                            value: ''
                        },
                        options: availableMetadata,
                        onChange: (updatedObjectName)=>{
                            const newFormData = {
                                objectName: updatedObjectName,
                                objectRecordId: '',
                                fieldsToUpdate: []
                            };
                            setFormData(newFormData);
                            saveAction(newFormData);
                        },
                        withSearchInput: true
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx",
                        lineNumber: 187,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDEV(HorizontalSeparator, {
                        noMargin: true
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx",
                        lineNumber: 209,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDEV(WorkflowSingleRecordPicker, {
                        testId: "workflow-edit-action-record-update-object-record-id",
                        label: "Record",
                        onChange: (objectRecordId)=>handleFieldChange('objectRecordId', objectRecordId),
                        objectNameSingular: formData.objectName,
                        defaultValue: formData.objectRecordId,
                        disabled: isFormDisabled
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx",
                        lineNumber: 211,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDEV(FormMultiSelectFieldInput, {
                        testId: "workflow-edit-action-record-update-fields-to-update",
                        label: "Fields to update",
                        defaultValue: formData.fieldsToUpdate,
                        options: inlineFieldDefinitions.map((field)=>({
                                label: field.label,
                                value: field.metadata.fieldName,
                                icon: getIcon(field.iconName),
                                color: 'gray'
                            })),
                        onChange: (fieldsToUpdate)=>handleFieldChange('fieldsToUpdate', fieldsToUpdate),
                        placeholder: "Select fields to update",
                        readonly: isFormDisabled
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx",
                        lineNumber: 222,
                        columnNumber: 9
                    }, this),
                    /*#__PURE__*/ _jsxDEV(HorizontalSeparator, {
                        noMargin: true
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx",
                        lineNumber: 239,
                        columnNumber: 9
                    }, this),
                    formData.fieldsToUpdate.map((fieldName)=>{
                        const fieldDefinition = inlineFieldDefinitions.find((definition)=>definition.metadata.fieldName === fieldName);
                        if (!isDefined(fieldDefinition)) {
                            return null;
                        }
                        const currentValue = formData[fieldDefinition.metadata.fieldName];
                        return /*#__PURE__*/ _jsxDEV(FormFieldInput, {
                            defaultValue: currentValue,
                            field: fieldDefinition,
                            onChange: (value)=>{
                                handleFieldChange(fieldDefinition.metadata.fieldName, value);
                            },
                            VariablePicker: WorkflowVariablePicker,
                            readonly: isFormDisabled
                        }, fieldDefinition.metadata.fieldName, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx",
                            lineNumber: 255,
                            columnNumber: 13
                        }, this);
                    })
                ]
            }, void 0, true, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx",
                lineNumber: 186,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true);
};
_s(WorkflowEditActionUpdateRecord, "/SmxRayVCxPTBf2WV1gublm30Bw=", false, function() {
    return [
        useIcons,
        useFilteredObjectMetadataItems,
        useDebouncedCallback,
        useActionIconColorOrThrow,
        useActionHeaderTypeOrThrow
    ];
});
_c = WorkflowEditActionUpdateRecord;
var _c;
$RefreshReg$(_c, "WorkflowEditActionUpdateRecord");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-steps/workflow-actions/components/WorkflowEditActionUpdateRecord.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,