import __vite__cjsImport0_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport0_react["useCallback"]; const useMemo = __vite__cjsImport0_react["useMemo"];
import { useRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { useColumnDefinitionsFromFieldMetadata } from "/src/modules/object-metadata/hooks/useColumnDefinitionsFromFieldMetadata.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { isRecordBoardCompactModeActiveComponentState } from "/src/modules/object-record/record-board/states/isRecordBoardCompactModeActiveComponentState.ts";
import { recordIndexFieldDefinitionsState } from "/src/modules/object-record/record-index/states/recordIndexFieldDefinitionsState.ts";
import { useRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentStateV2.ts";
import { useSaveCurrentViewFields } from "/src/modules/views/hooks/useSaveCurrentViewFields.ts";
import { useUpdateCurrentView } from "/src/modules/views/hooks/useUpdateCurrentView.ts";
import { mapBoardFieldDefinitionsToViewFields } from "/src/modules/views/utils/mapBoardFieldDefinitionsToViewFields.ts";
import { mapArrayToObject } from "/src/utils/array/mapArrayToObject.ts";
import { moveArrayItem } from "/src/utils/array/moveArrayItem.ts";
import { isDeeplyEqual } from "/src/utils/isDeeplyEqual.ts";
export const useObjectOptionsForBoard = ({ objectNameSingular, recordBoardId })=>{
    const [recordIndexFieldDefinitions, setRecordIndexFieldDefinitions] = useRecoilState(recordIndexFieldDefinitionsState);
    const { saveViewFields } = useSaveCurrentViewFields();
    const { updateCurrentView } = useUpdateCurrentView();
    const [isCompactModeActive, setIsCompactModeActive] = useRecoilComponentStateV2(isRecordBoardCompactModeActiveComponentState, recordBoardId);
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const { columnDefinitions } = useColumnDefinitionsFromFieldMetadata(objectMetadataItem);
    const availableColumnDefinitions = useMemo(()=>columnDefinitions.filter(({ isLabelIdentifier })=>!isLabelIdentifier), [
        columnDefinitions
    ]);
    const recordIndexFieldDefinitionsByKey = useMemo(()=>mapArrayToObject(recordIndexFieldDefinitions, ({ fieldMetadataId })=>fieldMetadataId), [
        recordIndexFieldDefinitions
    ]);
    const visibleBoardFields = useMemo(()=>recordIndexFieldDefinitions.filter((boardField)=>boardField.isVisible).sort((boardFieldA, boardFieldB)=>boardFieldA.position - boardFieldB.position), [
        recordIndexFieldDefinitions
    ]);
    const hiddenBoardFields = useMemo(()=>availableColumnDefinitions.filter(({ fieldMetadataId })=>!recordIndexFieldDefinitionsByKey[fieldMetadataId]?.isVisible).map((availableColumnDefinition)=>{
            const { fieldMetadataId } = availableColumnDefinition;
            const existingBoardField = recordIndexFieldDefinitionsByKey[fieldMetadataId];
            return {
                ...existingBoardField || availableColumnDefinition,
                isVisible: false
            };
        }), [
        availableColumnDefinitions,
        recordIndexFieldDefinitionsByKey
    ]);
    const handleReorderBoardFields = useCallback((result)=>{
        if (!result.destination) {
            return;
        }
        const reorderedVisibleBoardFields = moveArrayItem(visibleBoardFields, {
            fromIndex: result.source.index - 1,
            toIndex: result.destination.index - 1
        });
        if (isDeeplyEqual(visibleBoardFields, reorderedVisibleBoardFields)) return;
        const updatedFields = [
            ...reorderedVisibleBoardFields
        ].map((field, index)=>({
                ...field,
                position: index
            }));
        setRecordIndexFieldDefinitions(updatedFields);
        saveViewFields(mapBoardFieldDefinitionsToViewFields(updatedFields));
    }, [
        saveViewFields,
        setRecordIndexFieldDefinitions,
        visibleBoardFields
    ]);
    // Todo : this seems over complex and should at least be extracted to an util with unit test.
    // Let's refactor this as we introduce the new viewBar
    const handleBoardFieldVisibilityChange = useCallback(async (updatedFieldDefinition)=>{
        const isNewViewField = !(updatedFieldDefinition.fieldMetadataId in recordIndexFieldDefinitionsByKey);
        let updatedFieldsDefinitions;
        if (isNewViewField) {
            const correspondingFieldDefinition = availableColumnDefinitions.find((availableColumnDefinition)=>availableColumnDefinition.fieldMetadataId === updatedFieldDefinition.fieldMetadataId);
            if (!correspondingFieldDefinition) return;
            const lastVisibleBoardField = visibleBoardFields[visibleBoardFields.length - 1];
            updatedFieldsDefinitions = [
                ...recordIndexFieldDefinitions,
                {
                    ...correspondingFieldDefinition,
                    position: (lastVisibleBoardField?.position || 0) + 1,
                    isVisible: true
                }
            ];
        } else {
            updatedFieldsDefinitions = recordIndexFieldDefinitions.map((existingFieldDefinition)=>existingFieldDefinition.fieldMetadataId === updatedFieldDefinition.fieldMetadataId ? {
                    ...existingFieldDefinition,
                    isVisible: !existingFieldDefinition.isVisible
                } : existingFieldDefinition);
        }
        setRecordIndexFieldDefinitions(updatedFieldsDefinitions);
        saveViewFields(mapBoardFieldDefinitionsToViewFields(updatedFieldsDefinitions));
    }, [
        recordIndexFieldDefinitionsByKey,
        setRecordIndexFieldDefinitions,
        saveViewFields,
        availableColumnDefinitions,
        visibleBoardFields,
        recordIndexFieldDefinitions
    ]);
    const setAndPersistIsCompactModeActive = useCallback((isCompactModeActive, view)=>{
        if (!view) return;
        setIsCompactModeActive(isCompactModeActive);
        updateCurrentView({
            isCompact: isCompactModeActive
        });
    }, [
        setIsCompactModeActive,
        updateCurrentView
    ]);
    return {
        handleReorderBoardFields,
        handleBoardFieldVisibilityChange,
        visibleBoardFields,
        hiddenBoardFields,
        isCompactModeActive,
        setAndPersistIsCompactModeActive
    };
};

//# sourceMappingURL=data:application/json;base64,