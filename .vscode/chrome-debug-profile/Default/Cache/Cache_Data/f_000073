import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import { triggerUpdateRecordOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffect.ts";
import { apiConfigState } from "/src/modules/client-config/states/apiConfigState.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { useGetRecordFromCache } from "/src/modules/object-record/cache/hooks/useGetRecordFromCache.ts";
import { getObjectTypename } from "/src/modules/object-record/cache/utils/getObjectTypename.ts";
import { getRecordNodeFromRecord } from "/src/modules/object-record/cache/utils/getRecordNodeFromRecord.ts";
import { updateRecordFromCache } from "/src/modules/object-record/cache/utils/updateRecordFromCache.ts";
import { DEFAULT_MUTATION_BATCH_SIZE } from "/src/modules/object-record/constants/DefaultMutationBatchSize.ts";
import { useRestoreManyRecordsMutation } from "/src/modules/object-record/hooks/useRestoreManyRecordsMutation.ts";
import { getRestoreManyRecordsMutationResponseField } from "/src/modules/object-record/utils/getRestoreManyRecordsMutationResponseField.ts";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { sleep } from "/src/utils/sleep.ts";
import { capitalize, isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useRestoreManyRecords = ({ objectNameSingular })=>{
    const apiConfig = useRecoilValue(apiConfigState);
    const mutationPageSize = apiConfig?.mutationMaximumAffectedRecords ?? DEFAULT_MUTATION_BATCH_SIZE;
    const apolloClient = useApolloClient();
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const getRecordFromCache = useGetRecordFromCache({
        objectNameSingular
    });
    const { restoreManyRecordsMutation } = useRestoreManyRecordsMutation({
        objectNameSingular
    });
    const { objectMetadataItems } = useObjectMetadataItems();
    const mutationResponseField = getRestoreManyRecordsMutationResponseField(objectMetadataItem.namePlural);
    const restoreManyRecords = async ({ idsToRestore, delayInMsBetweenRequests, skipOptimisticEffect = false })=>{
        const numberOfBatches = Math.ceil(idsToRestore.length / mutationPageSize);
        const restoredRecords = [];
        for(let batchIndex = 0; batchIndex < numberOfBatches; batchIndex++){
            const batchedIdsToRestore = idsToRestore.slice(batchIndex * mutationPageSize, (batchIndex + 1) * mutationPageSize);
            const cachedRecords = batchedIdsToRestore.map((idToRestore)=>getRecordFromCache(idToRestore, apolloClient.cache)).filter(isDefined);
            if (!skipOptimisticEffect) {
                cachedRecords.forEach((cachedRecord)=>{
                    const cachedRecordWithConnection = getRecordNodeFromRecord({
                        record: cachedRecord,
                        objectMetadataItem,
                        objectMetadataItems,
                        computeReferences: true
                    });
                    const computedOptimisticRecord = {
                        ...cachedRecord,
                        deletedAt: null,
                        __typename: getObjectTypename(objectMetadataItem.nameSingular)
                    };
                    const optimisticRecordWithConnection = getRecordNodeFromRecord({
                        record: computedOptimisticRecord,
                        objectMetadataItem,
                        objectMetadataItems,
                        computeReferences: true
                    });
                    if (isDefined(optimisticRecordWithConnection) && isDefined(cachedRecordWithConnection)) {
                        const recordGqlFields = {
                            deletedAt: true
                        };
                        updateRecordFromCache({
                            objectMetadataItems,
                            objectMetadataItem,
                            cache: apolloClient.cache,
                            record: computedOptimisticRecord,
                            recordGqlFields
                        });
                        triggerUpdateRecordOptimisticEffect({
                            cache: apolloClient.cache,
                            objectMetadataItem,
                            currentRecord: cachedRecordWithConnection,
                            updatedRecord: optimisticRecordWithConnection,
                            objectMetadataItems
                        });
                    }
                });
            }
            const restoredRecordsResponse = await apolloClient.mutate({
                mutation: restoreManyRecordsMutation,
                variables: {
                    filter: {
                        id: {
                            in: batchedIdsToRestore
                        }
                    }
                }
            }).catch((error)=>{
                if (skipOptimisticEffect) {
                    throw error;
                }
                cachedRecords.forEach((cachedRecord)=>{
                    const cachedRecordWithConnection = getRecordNodeFromRecord({
                        record: cachedRecord,
                        objectMetadataItem,
                        objectMetadataItems,
                        computeReferences: true
                    });
                    const computedOptimisticRecord = {
                        ...cachedRecord,
                        ...{
                            id: cachedRecord.id,
                            deletedAt: null
                        },
                        ...{
                            __typename: capitalize(objectMetadataItem.nameSingular)
                        }
                    };
                    const optimisticRecordWithConnection = getRecordNodeFromRecord({
                        record: computedOptimisticRecord,
                        objectMetadataItem,
                        objectMetadataItems,
                        computeReferences: true
                    });
                    if (isDefined(optimisticRecordWithConnection) && isDefined(cachedRecordWithConnection)) {
                        const recordGqlFields = {
                            deletedAt: true
                        };
                        updateRecordFromCache({
                            objectMetadataItems,
                            objectMetadataItem,
                            cache: apolloClient.cache,
                            record: cachedRecord,
                            recordGqlFields
                        });
                        triggerUpdateRecordOptimisticEffect({
                            cache: apolloClient.cache,
                            objectMetadataItem,
                            currentRecord: optimisticRecordWithConnection,
                            updatedRecord: cachedRecordWithConnection,
                            objectMetadataItems
                        });
                    }
                });
                throw error;
            });
            const restoredRecordsForThisBatch = restoredRecordsResponse.data?.[mutationResponseField] ?? [];
            restoredRecords.push(...restoredRecordsForThisBatch);
            if (isDefined(delayInMsBetweenRequests)) {
                await sleep(delayInMsBetweenRequests);
            }
        }
        return restoredRecords;
    };
    return {
        restoreManyRecords
    };
};

//# sourceMappingURL=data:application/json;base64,