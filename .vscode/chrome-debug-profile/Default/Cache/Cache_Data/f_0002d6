import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/users/components/UserProviderEffect.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/users/components/UserProviderEffect.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport2_react["useEffect"]; const useState = __vite__cjsImport2_react["useState"];
import { useRecoilState, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { currentUserState } from "/src/modules/auth/states/currentUserState.ts";
import { currentUserWorkspaceState } from "/src/modules/auth/states/currentUserWorkspaceState.ts";
import { currentWorkspaceMembersState } from "/src/modules/auth/states/currentWorkspaceMembersStates.ts";
import { currentWorkspaceMemberState } from "/src/modules/auth/states/currentWorkspaceMemberState.ts";
import { currentWorkspaceState } from "/src/modules/auth/states/currentWorkspaceState.ts";
import { isCurrentUserLoadedState } from "/src/modules/auth/states/isCurrentUserLoadingState.ts";
import { workspacesState } from "/src/modules/auth/states/workspaces.ts";
import { DateFormat } from "/src/modules/localization/constants/DateFormat.ts";
import { TimeFormat } from "/src/modules/localization/constants/TimeFormat.ts";
import { dateTimeFormatState } from "/src/modules/localization/states/dateTimeFormatState.ts";
import { detectDateFormat } from "/src/modules/localization/utils/detectDateFormat.ts";
import { detectTimeFormat } from "/src/modules/localization/utils/detectTimeFormat.ts";
import { detectTimeZone } from "/src/modules/localization/utils/detectTimeZone.ts";
import { getDateFormatFromWorkspaceDateFormat } from "/src/modules/localization/utils/getDateFormatFromWorkspaceDateFormat.ts";
import { getTimeFormatFromWorkspaceTimeFormat } from "/src/modules/localization/utils/getTimeFormatFromWorkspaceTimeFormat.ts";
import { useGetCurrentUserQuery } from "/src/generated/graphql.tsx";
import { dynamicActivate } from "/src/utils/i18n/dynamicActivate.ts";
import { SOURCE_LOCALE } from "/@fs/D:/twenty-table-o/packages/twenty-shared/translations/dist/twenty-shared-translations.esm.js";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const UserProviderEffect = ()=>{
    _s();
    const [isLoading, setIsLoading] = useState(true);
    const [isCurrentUserLoaded, setIsCurrentUserLoaded] = useRecoilState(isCurrentUserLoadedState);
    const setCurrentUser = useSetRecoilState(currentUserState);
    const setCurrentWorkspace = useSetRecoilState(currentWorkspaceState);
    const setCurrentUserWorkspace = useSetRecoilState(currentUserWorkspaceState);
    const setWorkspaces = useSetRecoilState(workspacesState);
    const setDateTimeFormat = useSetRecoilState(dateTimeFormatState);
    const setCurrentWorkspaceMember = useSetRecoilState(currentWorkspaceMemberState);
    const setCurrentWorkspaceMembers = useSetRecoilState(currentWorkspaceMembersState);
    const { loading: queryLoading, data: queryData } = useGetCurrentUserQuery({
        skip: isCurrentUserLoaded
    });
    useEffect(()=>{
        if (!queryLoading) {
            setIsLoading(false);
            setIsCurrentUserLoaded(true);
        }
        if (!isDefined(queryData?.currentUser)) return;
        setCurrentUser(queryData.currentUser);
        if (isDefined(queryData.currentUser.currentWorkspace)) {
            setCurrentWorkspace({
                ...queryData.currentUser.currentWorkspace,
                defaultRole: queryData.currentUser.currentWorkspace.defaultRole ?? null
            });
        }
        if (isDefined(queryData.currentUser.currentUserWorkspace)) {
            setCurrentUserWorkspace(queryData.currentUser.currentUserWorkspace);
        }
        const { workspaceMember, workspaceMembers, workspaces: userWorkspaces } = queryData.currentUser;
        const affectDefaultValuesOnEmptyWorkspaceMemberFields = (workspaceMember)=>{
            return {
                ...workspaceMember,
                colorScheme: workspaceMember.colorScheme ?? 'Light',
                locale: workspaceMember.locale ?? SOURCE_LOCALE
            };
        };
        if (isDefined(workspaceMember)) {
            setCurrentWorkspaceMember(affectDefaultValuesOnEmptyWorkspaceMemberFields(workspaceMember));
            // TODO: factorize
            setDateTimeFormat({
                timeZone: workspaceMember.timeZone && workspaceMember.timeZone !== 'system' ? workspaceMember.timeZone : detectTimeZone(),
                dateFormat: isDefined(workspaceMember.dateFormat) ? getDateFormatFromWorkspaceDateFormat(workspaceMember.dateFormat) : DateFormat[detectDateFormat()],
                timeFormat: isDefined(workspaceMember.timeFormat) ? getTimeFormatFromWorkspaceTimeFormat(workspaceMember.timeFormat) : TimeFormat[detectTimeFormat()]
            });
            dynamicActivate(workspaceMember.locale ?? SOURCE_LOCALE);
        }
        if (isDefined(workspaceMembers)) {
            setCurrentWorkspaceMembers(workspaceMembers.map(affectDefaultValuesOnEmptyWorkspaceMemberFields) ?? []);
        }
        if (isDefined(userWorkspaces)) {
            const workspaces = userWorkspaces.map(({ workspace })=>workspace).filter(isDefined);
            setWorkspaces(workspaces);
        }
    }, [
        setCurrentUser,
        setCurrentUserWorkspace,
        setCurrentWorkspaceMembers,
        isLoading,
        queryLoading,
        setCurrentWorkspace,
        setCurrentWorkspaceMember,
        setWorkspaces,
        queryData?.currentUser,
        setIsCurrentUserLoaded,
        setDateTimeFormat
    ]);
    return /*#__PURE__*/ _jsxDEV(_Fragment, {}, void 0, false);
};
_s(UserProviderEffect, "h3Y1MSJXVFkHEwCKJAZNITQKZTw=", false, function() {
    return [
        useRecoilState,
        useSetRecoilState,
        useSetRecoilState,
        useSetRecoilState,
        useSetRecoilState,
        useSetRecoilState,
        useSetRecoilState,
        useSetRecoilState,
        useGetCurrentUserQuery
    ];
});
_c = UserProviderEffect;
var _c;
$RefreshReg$(_c, "UserProviderEffect");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/users/components/UserProviderEffect.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/users/components/UserProviderEffect.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,