import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-table/record-table-footer/hooks/useAggregateRecordsForRecordTableColumnFooter.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-footer/hooks/useAggregateRecordsForRecordTableColumnFooter.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

var _s = $RefreshSig$();
import { useAggregateRecords } from "/src/modules/object-record/hooks/useAggregateRecords.ts";
import { computeAggregateValueAndLabel } from "/src/modules/object-record/record-board/record-board-column/utils/computeAggregateValueAndLabel.ts";
import { currentRecordFilterGroupsComponentState } from "/src/modules/object-record/record-filter-group/states/currentRecordFilterGroupsComponentState.ts";
import { useFilterValueDependencies } from "/src/modules/object-record/record-filter/hooks/useFilterValueDependencies.ts";
import { currentRecordFiltersComponentState } from "/src/modules/object-record/record-filter/states/currentRecordFiltersComponentState.ts";
import { computeRecordGqlOperationFilter } from "/src/modules/object-record/record-filter/utils/computeViewRecordGqlOperationFilter.ts";
import { useRecordGroupFilter } from "/src/modules/object-record/record-group/hooks/useRecordGroupFilter.ts";
import { AGGREGATE_OPERATIONS } from "/src/modules/object-record/record-table/constants/AggregateOperations.ts";
import { useRecordTableContextOrThrow } from "/src/modules/object-record/record-table/contexts/RecordTableContext.ts";
import { RecordTableColumnAggregateFooterCellContext } from "/src/modules/object-record/record-table/record-table-footer/components/RecordTableColumnAggregateFooterCellContext.tsx";
import { viewFieldAggregateOperationState } from "/src/modules/object-record/record-table/record-table-footer/states/viewFieldAggregateOperationState.ts";
import { convertAggregateOperationToExtendedAggregateOperation } from "/src/modules/object-record/utils/convertAggregateOperationToExtendedAggregateOperation.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { UserContext } from "/src/modules/users/contexts/UserContext.ts";
import __vite__cjsImport15_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useContext = __vite__cjsImport15_react["useContext"];
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { isDefined, isFieldMetadataDateKind } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useAggregateRecordsForRecordTableColumnFooter = (fieldMetadataId)=>{
    _s();
    const { objectMetadataItem } = useRecordTableContextOrThrow();
    const { recordGroupFilter } = useRecordGroupFilter(objectMetadataItem.fields);
    const currentRecordFilterGroups = useRecoilComponentValueV2(currentRecordFilterGroupsComponentState);
    const currentRecordFilters = useRecoilComponentValueV2(currentRecordFiltersComponentState);
    const { filterValueDependencies } = useFilterValueDependencies();
    const requestFilters = computeRecordGqlOperationFilter({
        fields: objectMetadataItem.fields,
        filterValueDependencies,
        recordFilterGroups: currentRecordFilterGroups,
        recordFilters: currentRecordFilters
    });
    const { viewFieldId } = useContext(RecordTableColumnAggregateFooterCellContext);
    const fieldMetadataItem = objectMetadataItem.fields.find((field)=>field.id === fieldMetadataId);
    // TODO: This shouldn't be set with impossible values,
    // see problem with view id not being set early enoughby Effect component in context store,
    // This happens here when switching from a view to another.
    const aggregateOperationForViewFieldWithProbableImpossibleValues = useRecoilValue(viewFieldAggregateOperationState({
        viewFieldId
    }));
    const isAggregateOperationImpossibleForDateField = isDefined(fieldMetadataItem) && isFieldMetadataDateKind(fieldMetadataItem.type) && isDefined(aggregateOperationForViewFieldWithProbableImpossibleValues) && (aggregateOperationForViewFieldWithProbableImpossibleValues === AGGREGATE_OPERATIONS.min || aggregateOperationForViewFieldWithProbableImpossibleValues === AGGREGATE_OPERATIONS.max);
    const aggregateOperationForViewField = isAggregateOperationImpossibleForDateField ? convertAggregateOperationToExtendedAggregateOperation(aggregateOperationForViewFieldWithProbableImpossibleValues, fieldMetadataItem.type) : aggregateOperationForViewFieldWithProbableImpossibleValues;
    const fieldName = fieldMetadataItem?.name;
    const recordGqlFieldsAggregate = isDefined(aggregateOperationForViewField) && isDefined(fieldName) ? {
        [fieldName]: [
            aggregateOperationForViewField
        ]
    } : {};
    const { data, loading } = useAggregateRecords({
        objectNameSingular: objectMetadataItem.nameSingular,
        recordGqlFieldsAggregate,
        filter: {
            ...requestFilters,
            ...recordGroupFilter
        },
        skip: !isDefined(aggregateOperationForViewField)
    });
    const { dateFormat, timeFormat, timeZone } = useContext(UserContext);
    const { value, label } = computeAggregateValueAndLabel({
        data,
        objectMetadataItem,
        fieldMetadataId: fieldMetadataId,
        aggregateOperation: aggregateOperationForViewField,
        dateFormat,
        timeFormat,
        timeZone
    });
    return {
        aggregateValue: value,
        aggregateLabel: isDefined(value) ? label : undefined,
        isLoading: loading
    };
};
_s(useAggregateRecordsForRecordTableColumnFooter, "u7uqop8rYPr4iLYSgTCE8f88BZ8=", false, function() {
    return [
        useRecordTableContextOrThrow,
        useRecordGroupFilter,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useFilterValueDependencies,
        useRecoilValue,
        useAggregateRecords
    ];
});


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-footer/hooks/useAggregateRecordsForRecordTableColumnFooter.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-footer/hooks/useAggregateRecordsForRecordTableColumnFooter.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,