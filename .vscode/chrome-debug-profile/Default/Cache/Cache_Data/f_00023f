import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { useListenRightDrawerClose } from "/src/modules/ui/layout/right-drawer/hooks/useListenRightDrawerClose.ts";
import { WorkflowDiagramCustomMarkers } from "/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCustomMarkers.tsx";
import { useRightDrawerState } from "/src/modules/workflow/workflow-diagram/hooks/useRightDrawerState.ts";
import { workflowDiagramState } from "/src/modules/workflow/workflow-diagram/states/workflowDiagramState.ts";
import { workflowReactFlowRefState } from "/src/modules/workflow/workflow-diagram/states/workflowReactFlowRefState.ts";
import { getOrganizedDiagram } from "/src/modules/workflow/workflow-diagram/utils/getOrganizedDiagram.ts";
import { useTheme } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react.js?v=226f7286";
import styled from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_styled.js?v=226f7286";
import { Background, ReactFlow, applyEdgeChanges, applyNodeChanges, useReactFlow } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@xyflow_react.js?v=226f7286";
import "/@fs/D:/twenty-table-o/node_modules/@xyflow/react/dist/style.css";
import __vite__cjsImport12_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const React = __vite__cjsImport12_react.__esModule ? __vite__cjsImport12_react.default : __vite__cjsImport12_react; const useEffect = __vite__cjsImport12_react["useEffect"]; const useMemo = __vite__cjsImport12_react["useMemo"]; const useRef = __vite__cjsImport12_react["useRef"];
import { useRecoilValue, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { THEME_COMMON, Tag } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
const StyledResetReactflowStyles = styled.div`
  height: 100%;
  width: 100%;
  position: relative;

  /* Below we reset the default styling of Reactflow */
  .react-flow__node-input,
  .react-flow__node-default,
  .react-flow__node-output,
  .react-flow__node-group {
    padding: 0;
    width: auto;
    text-align: start;
    white-space: nowrap;
  }

  .react-flow__handle {
    min-height: 0;
    min-width: 0;
  }
  .react-flow__handle-top {
    transform: translate(-50%, -50%);
  }
  .react-flow__handle-bottom {
    transform: translate(-50%, 100%);
  }
  .react-flow__handle.connectionindicator {
    cursor: pointer;
  }

  --xy-node-border-radius: none;
  --xy-node-border: none;
  --xy-node-background-color: none;
  --xy-node-boxshadow-hover: none;
  --xy-node-boxshadow-selected: none;
`;
_c = StyledResetReactflowStyles;
const StyledStatusTagContainer = styled.div`
  left: 0;
  top: 0;
  position: absolute;
  padding: ${({ theme })=>theme.spacing(2)};
`;
_c1 = StyledStatusTagContainer;
const defaultFitViewOptions = {
    minZoom: 1,
    maxZoom: 1
};
export const WorkflowDiagramCanvasBase = ({ nodeTypes, edgeTypes, children, tagContainerTestId, tagColor, tagText })=>{
    _s();
    const theme = useTheme();
    const reactflow = useReactFlow();
    const setWorkflowReactFlowRefState = useSetRecoilState(workflowReactFlowRefState);
    const workflowDiagram = useRecoilValue(workflowDiagramState);
    const { nodes, edges } = useMemo(()=>isDefined(workflowDiagram) ? getOrganizedDiagram(workflowDiagram) : {
            nodes: [],
            edges: []
        }, [
        workflowDiagram
    ]);
    const { rightDrawerState } = useRightDrawerState();
    const rightDrawerWidth = Number(THEME_COMMON.rightDrawerWidth.replace('px', ''));
    const setWorkflowDiagram = useSetRecoilState(workflowDiagramState);
    const handleNodesChange = (nodeChanges)=>{
        setWorkflowDiagram((diagram)=>{
            if (isDefined(diagram) === false) {
                throw new Error('It must be impossible for the nodes to be updated if the diagram is not defined yet. Be sure the diagram is rendered only when defined.');
            }
            return {
                ...diagram,
                nodes: applyNodeChanges(nodeChanges, diagram.nodes)
            };
        });
    };
    const handleEdgesChange = (edgeChanges)=>{
        setWorkflowDiagram((diagram)=>{
            if (isDefined(diagram) === false) {
                throw new Error('It must be impossible for the edges to be updated if the diagram is not defined yet. Be sure the diagram is rendered only when defined.');
            }
            return {
                ...diagram,
                edges: applyEdgeChanges(edgeChanges, diagram.edges)
            };
        });
    };
    useListenRightDrawerClose(()=>{
        reactflow.setNodes((nodes)=>nodes.map((node)=>({
                    ...node,
                    selected: false
                })));
    });
    const containerRef = useRef(null);
    useEffect(()=>{
        if (!isDefined(containerRef.current) || !reactflow.viewportInitialized) {
            return;
        }
        const currentViewport = reactflow.getViewport();
        const flowBounds = reactflow.getNodesBounds(reactflow.getNodes());
        let visibleRightDrawerWidth = 0;
        if (rightDrawerState === 'normal') {
            visibleRightDrawerWidth = rightDrawerWidth;
        }
        const viewportX = (containerRef.current.offsetWidth + visibleRightDrawerWidth) / 2 - flowBounds.width / 2;
        reactflow.setViewport({
            ...currentViewport,
            x: viewportX - visibleRightDrawerWidth
        }, {
            duration: 300
        });
    }, [
        reactflow,
        rightDrawerState,
        rightDrawerWidth
    ]);
    return /*#__PURE__*/ _jsxDEV(StyledResetReactflowStyles, {
        ref: containerRef,
        children: [
            /*#__PURE__*/ _jsxDEV(WorkflowDiagramCustomMarkers, {}, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx",
                lineNumber: 213,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(ReactFlow, {
                ref: (node)=>{
                    if (isDefined(node)) {
                        setWorkflowReactFlowRefState({
                            current: node
                        });
                    }
                },
                onInit: ()=>{
                    if (!isDefined(containerRef.current)) {
                        throw new Error('Expect the container ref to be defined');
                    }
                    const flowBounds = reactflow.getNodesBounds(reactflow.getNodes());
                    reactflow.setViewport({
                        x: containerRef.current.offsetWidth / 2 - flowBounds.width / 2,
                        y: 150,
                        zoom: defaultFitViewOptions.maxZoom
                    });
                },
                minZoom: defaultFitViewOptions.minZoom,
                maxZoom: defaultFitViewOptions.maxZoom,
                nodeTypes: nodeTypes,
                edgeTypes: edgeTypes,
                nodes: nodes,
                edges: edges,
                onNodesChange: handleNodesChange,
                onEdgesChange: handleEdgesChange,
                onBeforeDelete: async ()=>{
                    // Abort all non-programmatic deletions
                    return false;
                },
                proOptions: {
                    hideAttribution: true
                },
                multiSelectionKeyCode: null,
                nodesFocusable: false,
                edgesFocusable: false,
                nodesDraggable: false,
                nodesConnectable: false,
                paneClickDistance: 10,
                children: [
                    /*#__PURE__*/ _jsxDEV(Background, {
                        color: theme.border.color.medium,
                        size: 2
                    }, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx",
                        lineNumber: 254,
                        columnNumber: 9
                    }, this),
                    children
                ]
            }, void 0, true, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx",
                lineNumber: 215,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(StyledStatusTagContainer, {
                "data-testid": tagContainerTestId,
                children: /*#__PURE__*/ _jsxDEV(Tag, {
                    color: tagColor,
                    text: tagText
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx",
                    lineNumber: 260,
                    columnNumber: 9
                }, this)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx",
                lineNumber: 259,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx",
        lineNumber: 212,
        columnNumber: 5
    }, this);
};
_s(WorkflowDiagramCanvasBase, "CWx47C6M+e6wX1lBXdJDaq0uXmA=", false, function() {
    return [
        useTheme,
        useReactFlow,
        useSetRecoilState,
        useRecoilValue,
        useRightDrawerState,
        useSetRecoilState,
        useListenRightDrawerClose
    ];
});
_c2 = WorkflowDiagramCanvasBase;
var _c, _c1, _c2;
$RefreshReg$(_c, "StyledResetReactflowStyles");
$RefreshReg$(_c1, "StyledStatusTagContainer");
$RefreshReg$(_c2, "WorkflowDiagramCanvasBase");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/workflow/workflow-diagram/components/WorkflowDiagramCanvasBase.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,