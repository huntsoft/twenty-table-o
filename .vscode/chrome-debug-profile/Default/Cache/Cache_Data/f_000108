import { useIcons } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { COMPOSITE_FIELD_IMPORT_LABELS } from "/src/modules/object-record/spreadsheet-import/constants/CompositeFieldImportLabels.ts";
import { getSpreadSheetFieldValidationDefinitions } from "/src/modules/object-record/spreadsheet-import/utils/getSpreadSheetFieldValidationDefinitions.ts";
import { FieldMetadataType } from "/src/generated-metadata/graphql.ts";
export const useBuildAvailableFieldsForImport = ()=>{
    const { getIcon } = useIcons();
    const buildAvailableFieldsForImport = (fieldMetadataItems)=>{
        const availableFieldsForImport = [];
        const createBaseField = (fieldMetadataItem, overrides = {}, customLabel)=>({
                Icon: getIcon(fieldMetadataItem.icon),
                label: customLabel ?? fieldMetadataItem.label,
                key: fieldMetadataItem.name,
                fieldType: {
                    type: 'input'
                },
                fieldMetadataType: fieldMetadataItem.type,
                fieldValidationDefinitions: getSpreadSheetFieldValidationDefinitions(fieldMetadataItem.type, customLabel ?? fieldMetadataItem.label),
                ...overrides
            });
        const handleCompositeFieldWithLabels = (fieldMetadataItem, fieldType, validationTypeResolver)=>{
            Object.entries(COMPOSITE_FIELD_IMPORT_LABELS[fieldType]).forEach(([key, fieldLabel])=>{
                const label = `${fieldLabel} (${fieldMetadataItem.label})`;
                // Use the custom validation type if provided, otherwise use the field's type
                const validationType = validationTypeResolver ? validationTypeResolver(key, fieldLabel) : fieldMetadataItem.type;
                availableFieldsForImport.push(createBaseField(fieldMetadataItem, {
                    label,
                    key: `${fieldLabel} (${fieldMetadataItem.name})`,
                    fieldValidationDefinitions: getSpreadSheetFieldValidationDefinitions(validationType, label)
                }));
            });
        };
        const handleSelectField = (fieldMetadataItem, isMulti = false)=>{
            availableFieldsForImport.push(createBaseField(fieldMetadataItem, {
                fieldType: {
                    type: isMulti ? 'multiSelect' : 'select',
                    options: fieldMetadataItem.options?.map((option)=>({
                            label: option.label,
                            value: option.value,
                            color: option.color
                        })) || []
                },
                fieldValidationDefinitions: getSpreadSheetFieldValidationDefinitions(fieldMetadataItem.type, `${fieldMetadataItem.label} (ID)`)
            }));
        };
        // Special validation type resolver for currency fields
        const currencyValidationResolver = (key)=>key === 'amountMicrosLabel' ? FieldMetadataType.NUMBER : FieldMetadataType.CURRENCY;
        const fieldTypeHandlers = {
            [FieldMetadataType.FULL_NAME]: (fieldMetadataItem)=>{
                handleCompositeFieldWithLabels(fieldMetadataItem, FieldMetadataType.FULL_NAME);
            },
            [FieldMetadataType.ADDRESS]: (fieldMetadataItem)=>{
                handleCompositeFieldWithLabels(fieldMetadataItem, FieldMetadataType.ADDRESS);
            },
            [FieldMetadataType.LINKS]: (fieldMetadataItem)=>{
                handleCompositeFieldWithLabels(fieldMetadataItem, FieldMetadataType.LINKS);
            },
            [FieldMetadataType.EMAILS]: (fieldMetadataItem)=>{
                handleCompositeFieldWithLabels(fieldMetadataItem, FieldMetadataType.EMAILS);
            },
            [FieldMetadataType.PHONES]: (fieldMetadataItem)=>{
                handleCompositeFieldWithLabels(fieldMetadataItem, FieldMetadataType.PHONES);
            },
            [FieldMetadataType.RICH_TEXT_V2]: (fieldMetadataItem)=>{
                handleCompositeFieldWithLabels(fieldMetadataItem, FieldMetadataType.RICH_TEXT_V2);
            },
            [FieldMetadataType.CURRENCY]: (fieldMetadataItem)=>{
                handleCompositeFieldWithLabels(fieldMetadataItem, FieldMetadataType.CURRENCY, currencyValidationResolver);
            },
            [FieldMetadataType.RELATION]: (fieldMetadataItem)=>{
                const label = `${fieldMetadataItem.label} (ID)`;
                availableFieldsForImport.push(createBaseField(fieldMetadataItem, {
                    label,
                    fieldValidationDefinitions: getSpreadSheetFieldValidationDefinitions(fieldMetadataItem.type, label)
                }));
            },
            [FieldMetadataType.SELECT]: (fieldMetadataItem)=>{
                handleSelectField(fieldMetadataItem, false);
            },
            [FieldMetadataType.MULTI_SELECT]: (fieldMetadataItem)=>{
                handleSelectField(fieldMetadataItem, true);
            },
            [FieldMetadataType.BOOLEAN]: (fieldMetadataItem)=>{
                availableFieldsForImport.push(createBaseField(fieldMetadataItem, {
                    fieldType: {
                        type: 'checkbox'
                    }
                }));
            },
            default: (fieldMetadataItem)=>{
                availableFieldsForImport.push(createBaseField(fieldMetadataItem));
            }
        };
        for (const fieldMetadataItem of fieldMetadataItems){
            const handler = fieldTypeHandlers[fieldMetadataItem.type] || fieldTypeHandlers.default;
            handler(fieldMetadataItem);
        }
        return availableFieldsForImport;
    };
    return {
        buildAvailableFieldsForImport
    };
};

//# sourceMappingURL=data:application/json;base64,