import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/command-menu/hooks/useCommandMenuCommands.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/hooks/useCommandMenuCommands.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

var _s = $RefreshSig$();
import { actionMenuEntriesComponentSelector } from "/src/modules/action-menu/states/actionMenuEntriesComponentSelector.ts";
import { ActionMenuEntryScope, ActionMenuEntryType } from "/src/modules/action-menu/types/ActionMenuEntry.ts";
import { COMMAND_MENU_NAVIGATE_COMMANDS } from "/src/modules/command-menu/constants/CommandMenuNavigateCommands.ts";
import { CommandScope, CommandType } from "/src/modules/command-menu/types/Command.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { i18n } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_core.js?v=226f7286";
export const useCommandMenuCommands = ()=>{
    _s();
    const actionMenuEntries = useRecoilComponentValueV2(actionMenuEntriesComponentSelector);
    const navigateCommands = actionMenuEntries?.filter((actionMenuEntry)=>actionMenuEntry.type === ActionMenuEntryType.Navigation)?.map((actionMenuEntry)=>({
            id: actionMenuEntry.key,
            label: i18n._(actionMenuEntry.label),
            Icon: actionMenuEntry.Icon,
            onCommandClick: actionMenuEntry.onClick,
            type: CommandType.Navigate,
            scope: CommandScope.Global,
            hotKeys: actionMenuEntry.hotKeys
        }));
    // TODO: refactor this to use the config
    const navigateCommandsFromConstants = Object.values(COMMAND_MENU_NAVIGATE_COMMANDS);
    const allNavigateCommands = navigateCommands.concat(navigateCommandsFromConstants);
    const actionRecordSelectionCommands = actionMenuEntries?.filter((actionMenuEntry)=>actionMenuEntry.type === ActionMenuEntryType.Standard && actionMenuEntry.scope === ActionMenuEntryScope.RecordSelection)?.map((actionMenuEntry)=>({
            id: actionMenuEntry.key,
            label: i18n._(actionMenuEntry.label),
            Icon: actionMenuEntry.Icon,
            onCommandClick: actionMenuEntry.onClick,
            type: CommandType.StandardAction,
            scope: CommandScope.RecordSelection,
            hotKeys: actionMenuEntry.hotKeys
        }));
    const actionObjectCommands = actionMenuEntries?.filter((actionMenuEntry)=>actionMenuEntry.type === ActionMenuEntryType.Standard && actionMenuEntry.scope === ActionMenuEntryScope.Object)?.map((actionMenuEntry)=>({
            id: actionMenuEntry.key,
            label: i18n._(actionMenuEntry.label),
            Icon: actionMenuEntry.Icon,
            onCommandClick: actionMenuEntry.onClick,
            type: CommandType.StandardAction,
            scope: CommandScope.Object,
            hotKeys: actionMenuEntry.hotKeys
        }));
    const actionGlobalCommands = actionMenuEntries?.filter((actionMenuEntry)=>actionMenuEntry.type === ActionMenuEntryType.Standard && actionMenuEntry.scope === ActionMenuEntryScope.Global)?.map((actionMenuEntry)=>({
            id: actionMenuEntry.key,
            label: i18n._(actionMenuEntry.label),
            Icon: actionMenuEntry.Icon,
            onCommandClick: actionMenuEntry.onClick,
            type: CommandType.StandardAction,
            scope: CommandScope.Global,
            hotKeys: actionMenuEntry.hotKeys
        }));
    const workflowRunRecordSelectionCommands = actionMenuEntries?.filter((actionMenuEntry)=>actionMenuEntry.type === ActionMenuEntryType.WorkflowRun && actionMenuEntry.scope === ActionMenuEntryScope.RecordSelection)?.map((actionMenuEntry)=>({
            id: actionMenuEntry.key,
            label: i18n._(actionMenuEntry.label),
            Icon: actionMenuEntry.Icon,
            onCommandClick: actionMenuEntry.onClick,
            type: CommandType.WorkflowRun,
            scope: CommandScope.RecordSelection,
            hotKeys: actionMenuEntry.hotKeys
        }));
    const workflowRunGlobalCommands = actionMenuEntries?.filter((actionMenuEntry)=>actionMenuEntry.type === ActionMenuEntryType.WorkflowRun && actionMenuEntry.scope === ActionMenuEntryScope.Global)?.map((actionMenuEntry)=>({
            id: actionMenuEntry.key,
            label: i18n._(actionMenuEntry.label),
            Icon: actionMenuEntry.Icon,
            onCommandClick: actionMenuEntry.onClick,
            type: CommandType.WorkflowRun,
            scope: CommandScope.Global,
            hotKeys: actionMenuEntry.hotKeys
        }));
    const fallbackCommands = actionMenuEntries?.filter((actionMenuEntry)=>actionMenuEntry.type === ActionMenuEntryType.Fallback)?.map((actionMenuEntry)=>({
            id: actionMenuEntry.key,
            label: i18n._(actionMenuEntry.label),
            Icon: actionMenuEntry.Icon,
            onCommandClick: actionMenuEntry.onClick,
            type: CommandType.Fallback,
            scope: CommandScope.Global,
            hotKeys: actionMenuEntry.hotKeys
        }));
    return {
        navigateCommands: allNavigateCommands,
        actionRecordSelectionCommands,
        actionGlobalCommands,
        actionObjectCommands,
        workflowRunRecordSelectionCommands,
        workflowRunGlobalCommands,
        fallbackCommands
    };
};
_s(useCommandMenuCommands, "ZBXOx82XB67GAlanmvWrxhTqr5U=", false, function() {
    return [
        useRecoilComponentValueV2
    ];
});


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/hooks/useCommandMenuCommands.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/command-menu/hooks/useCommandMenuCommands.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,