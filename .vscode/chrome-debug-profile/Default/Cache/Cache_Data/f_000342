import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-metadata/components/NavigationDrawerItemForObjectMetadataItem.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-metadata/components/NavigationDrawerItemForObjectMetadataItem.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { MAIN_CONTEXT_STORE_INSTANCE_ID } from "/src/modules/context-store/constants/MainContextStoreInstanceId.tsx";
import { contextStoreCurrentViewIdComponentState } from "/src/modules/context-store/states/contextStoreCurrentViewIdComponentState.ts";
import { lastVisitedViewPerObjectMetadataItemState } from "/src/modules/navigation/states/lastVisitedViewPerObjectMetadataItemState.ts";
import { prefetchViewsFromObjectMetadataItemFamilySelector } from "/src/modules/prefetch/states/selector/prefetchViewsFromObjectMetadataItemFamilySelector.ts";
import { AppPath } from "/src/modules/types/AppPath.ts";
import { NavigationDrawerItem } from "/src/modules/ui/navigation/navigation-drawer/components/NavigationDrawerItem.tsx";
import { NavigationDrawerItemsCollapsableContainer } from "/src/modules/ui/navigation/navigation-drawer/components/NavigationDrawerItemsCollapsableContainer.tsx";
import { NavigationDrawerSubItem } from "/src/modules/ui/navigation/navigation-drawer/components/NavigationDrawerSubItem.tsx";
import { getNavigationSubItemLeftAdornment } from "/src/modules/ui/navigation/navigation-drawer/utils/getNavigationSubItemLeftAdornment.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { useLocation } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react-router-dom.js?v=226f7286";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { AnimatedExpandableContainer, useIcons } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { getAppPath } from "/src/utils/navigation/getAppPath.ts";
export const NavigationDrawerItemForObjectMetadataItem = ({ objectMetadataItem })=>{
    _s();
    const views = useRecoilValue(prefetchViewsFromObjectMetadataItemFamilySelector({
        objectMetadataItemId: objectMetadataItem.id
    }));
    const contextStoreCurrentViewId = useRecoilComponentValueV2(contextStoreCurrentViewIdComponentState, MAIN_CONTEXT_STORE_INSTANCE_ID);
    const lastVisitedViewPerObjectMetadataItem = useRecoilValue(lastVisitedViewPerObjectMetadataItemState);
    const lastVisitedViewId = lastVisitedViewPerObjectMetadataItem?.[objectMetadataItem.id];
    const { getIcon } = useIcons();
    const currentPath = useLocation().pathname;
    const navigationPath = getAppPath(AppPath.RecordIndexPage, {
        objectNamePlural: objectMetadataItem.namePlural
    }, lastVisitedViewId ? {
        viewId: lastVisitedViewId
    } : undefined);
    const isActive = currentPath === getAppPath(AppPath.RecordIndexPage, {
        objectNamePlural: objectMetadataItem.namePlural
    }) || currentPath.includes(getAppPath(AppPath.RecordShowPage, {
        objectNameSingular: objectMetadataItem.nameSingular,
        objectRecordId: ''
    }) + '/');
    const shouldSubItemsBeDisplayed = isActive && views.length > 1;
    const sortedObjectMetadataViews = [
        ...views
    ].sort((viewA, viewB)=>viewA.position - viewB.position);
    const selectedSubItemIndex = sortedObjectMetadataViews.findIndex((view)=>contextStoreCurrentViewId === view.id);
    const subItemArrayLength = sortedObjectMetadataViews.length;
    return /*#__PURE__*/ _jsxDEV(NavigationDrawerItemsCollapsableContainer, {
        isGroup: shouldSubItemsBeDisplayed,
        children: [
            /*#__PURE__*/ _jsxDEV(NavigationDrawerItem, {
                label: objectMetadataItem.labelPlural,
                to: navigationPath,
                Icon: getIcon(objectMetadataItem.icon),
                active: isActive
            }, objectMetadataItem.id, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-metadata/components/NavigationDrawerItemForObjectMetadataItem.tsx",
                lineNumber: 79,
                columnNumber: 7
            }, this),
            /*#__PURE__*/ _jsxDEV(AnimatedExpandableContainer, {
                isExpanded: shouldSubItemsBeDisplayed,
                dimension: "height",
                mode: "fit-content",
                containAnimation: true,
                children: sortedObjectMetadataViews.map((view, index)=>/*#__PURE__*/ _jsxDEV(NavigationDrawerSubItem, {
                        label: view.name,
                        to: getAppPath(AppPath.RecordIndexPage, {
                            objectNamePlural: objectMetadataItem.namePlural
                        }, {
                            viewId: view.id
                        }),
                        active: contextStoreCurrentViewId === view.id,
                        subItemState: getNavigationSubItemLeftAdornment({
                            index,
                            arrayLength: subItemArrayLength,
                            selectedIndex: selectedSubItemIndex
                        }),
                        Icon: getIcon(view.icon)
                    }, view.id, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-metadata/components/NavigationDrawerItemForObjectMetadataItem.tsx",
                        lineNumber: 94,
                        columnNumber: 11
                    }, this))
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-metadata/components/NavigationDrawerItemForObjectMetadataItem.tsx",
                lineNumber: 87,
                columnNumber: 7
            }, this)
        ]
    }, void 0, true, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-metadata/components/NavigationDrawerItemForObjectMetadataItem.tsx",
        lineNumber: 76,
        columnNumber: 5
    }, this);
};
_s(NavigationDrawerItemForObjectMetadataItem, "3b+b+ooaCoKzf7rH7eMgq4Po0Eo=", false, function() {
    return [
        useRecoilValue,
        useRecoilComponentValueV2,
        useRecoilValue,
        useIcons,
        useLocation
    ];
});
_c = NavigationDrawerItemForObjectMetadataItem;
var _c;
$RefreshReg$(_c, "NavigationDrawerItemForObjectMetadataItem");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-metadata/components/NavigationDrawerItemForObjectMetadataItem.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-metadata/components/NavigationDrawerItemForObjectMetadataItem.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,