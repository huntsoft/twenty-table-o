import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownDateInput.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownDateInput.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { getFilterTypeFromFieldType } from "/src/modules/object-metadata/utils/formatFieldMetadataItemsAsFilterDefinitions.ts";
import { fieldMetadataItemUsedInDropdownComponentSelector } from "/src/modules/object-record/object-filter-dropdown/states/fieldMetadataItemUsedInDropdownComponentSelector.ts";
import { selectedFilterComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedFilterComponentState.ts";
import { selectedOperandInDropdownComponentState } from "/src/modules/object-record/object-filter-dropdown/states/selectedOperandInDropdownComponentState.ts";
import { getRelativeDateDisplayValue } from "/src/modules/object-record/object-filter-dropdown/utils/getRelativeDateDisplayValue.ts";
import { useApplyRecordFilter } from "/src/modules/object-record/record-filter/hooks/useApplyRecordFilter.ts";
import { DateTimePicker } from "/src/modules/ui/input/components/internal/date/components/InternalDatePicker.tsx";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { ViewFilterOperand } from "/src/modules/views/types/ViewFilterOperand.ts";
import { computeVariableDateViewFilterValue } from "/src/modules/views/view-filter-value/utils/computeVariableDateViewFilterValue.ts";
import { resolveDateViewFilterValue } from "/src/modules/views/view-filter-value/utils/resolveDateViewFilterValue.ts";
import __vite__cjsImport14_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useState = __vite__cjsImport14_react["useState"];
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { FieldMetadataType } from "/src/generated-metadata/graphql.ts";
export const ObjectFilterDropdownDateInput = ()=>{
    _s();
    const fieldMetadataItemUsedInDropdown = useRecoilComponentValueV2(fieldMetadataItemUsedInDropdownComponentSelector);
    const selectedOperandInDropdown = useRecoilComponentValueV2(selectedOperandInDropdownComponentState);
    const selectedFilter = useRecoilComponentValueV2(selectedFilterComponentState);
    const { applyRecordFilter } = useApplyRecordFilter();
    const initialFilterValue = selectedFilter ? resolveDateViewFilterValue(selectedFilter) : null;
    const [internalDate, setInternalDate] = useState(initialFilterValue instanceof Date ? initialFilterValue : null);
    const isDateTimeInput = fieldMetadataItemUsedInDropdown?.type === FieldMetadataType.DATE_TIME;
    const handleAbsoluteDateChange = (newDate)=>{
        setInternalDate(newDate);
        if (!fieldMetadataItemUsedInDropdown || !selectedOperandInDropdown) return;
        applyRecordFilter({
            id: selectedFilter?.id ? selectedFilter.id : v4(),
            fieldMetadataId: fieldMetadataItemUsedInDropdown.id,
            value: newDate?.toISOString() ?? '',
            operand: selectedOperandInDropdown,
            displayValue: isDefined(newDate) ? isDateTimeInput ? newDate.toLocaleString() : newDate.toLocaleDateString() : '',
            recordFilterGroupId: selectedFilter?.recordFilterGroupId,
            positionInRecordFilterGroup: selectedFilter?.positionInRecordFilterGroup,
            type: getFilterTypeFromFieldType(fieldMetadataItemUsedInDropdown.type),
            label: fieldMetadataItemUsedInDropdown.label
        });
    };
    const handleRelativeDateChange = (relativeDate)=>{
        if (!fieldMetadataItemUsedInDropdown || !selectedOperandInDropdown) return;
        const value = relativeDate ? computeVariableDateViewFilterValue(relativeDate.direction, relativeDate.amount, relativeDate.unit) : '';
        applyRecordFilter({
            id: selectedFilter?.id ? selectedFilter.id : v4(),
            fieldMetadataId: fieldMetadataItemUsedInDropdown.id,
            value,
            operand: selectedOperandInDropdown,
            displayValue: getRelativeDateDisplayValue(relativeDate),
            recordFilterGroupId: selectedFilter?.recordFilterGroupId,
            positionInRecordFilterGroup: selectedFilter?.positionInRecordFilterGroup,
            type: getFilterTypeFromFieldType(fieldMetadataItemUsedInDropdown.type),
            label: fieldMetadataItemUsedInDropdown.label
        });
    };
    const isRelativeOperand = selectedOperandInDropdown === ViewFilterOperand.IsRelative;
    const resolvedValue = selectedFilter ? resolveDateViewFilterValue(selectedFilter) : null;
    const relativeDate = resolvedValue && !(resolvedValue instanceof Date) ? resolvedValue : undefined;
    return /*#__PURE__*/ _jsxDEV(DateTimePicker, {
        relativeDate: relativeDate,
        highlightedDateRange: relativeDate,
        isRelative: isRelativeOperand,
        date: internalDate,
        onChange: handleAbsoluteDateChange,
        onRelativeDateChange: handleRelativeDateChange,
        isDateTimeInput: isDateTimeInput
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownDateInput.tsx",
        lineNumber: 112,
        columnNumber: 5
    }, this);
};
_s(ObjectFilterDropdownDateInput, "Ig7WTJkggYP0z1aHlSiohunqVoY=", false, function() {
    return [
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useApplyRecordFilter
    ];
});
_c = ObjectFilterDropdownDateInput;
var _c;
$RefreshReg$(_c, "ObjectFilterDropdownDateInput");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownDateInput.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/object-filter-dropdown/components/ObjectFilterDropdownDateInput.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,