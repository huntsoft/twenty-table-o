import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport1_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport1_react["useCallback"];
import { triggerCreateRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerCreateRecordsOptimisticEffect.ts";
import { triggerDestroyRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerDestroyRecordsOptimisticEffect.ts";
import { triggerUpdateRecordOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffect.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { CoreObjectNameSingular } from "/src/modules/object-metadata/types/CoreObjectNameSingular.ts";
import { useGetRecordFromCache } from "/src/modules/object-record/cache/hooks/useGetRecordFromCache.ts";
import { useCreateOneRecordMutation } from "/src/modules/object-record/hooks/useCreateOneRecordMutation.ts";
import { useDestroyOneRecordMutation } from "/src/modules/object-record/hooks/useDestroyOneRecordMutation.ts";
import { useUpdateOneRecordMutation } from "/src/modules/object-record/hooks/useUpdateOneRecordMutation.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const usePersistViewSortRecords = ()=>{
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular: CoreObjectNameSingular.ViewSort
    });
    const getRecordFromCache = useGetRecordFromCache({
        objectNameSingular: CoreObjectNameSingular.ViewSort
    });
    const { destroyOneRecordMutation } = useDestroyOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewSort
    });
    const { createOneRecordMutation } = useCreateOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewSort
    });
    const { updateOneRecordMutation } = useUpdateOneRecordMutation({
        objectNameSingular: CoreObjectNameSingular.ViewSort
    });
    const { objectMetadataItems } = useObjectMetadataItems();
    const apolloClient = useApolloClient();
    const createViewSortRecords = useCallback((viewSortsToCreate, view)=>{
        if (!viewSortsToCreate.length) return;
        return Promise.all(viewSortsToCreate.map((viewSort)=>apolloClient.mutate({
                mutation: createOneRecordMutation,
                variables: {
                    input: {
                        fieldMetadataId: viewSort.fieldMetadataId,
                        viewId: view.id,
                        direction: viewSort.direction,
                        id: viewSort.id
                    }
                },
                update: (cache, { data })=>{
                    const record = data?.['createViewSort'];
                    if (!isDefined(record)) return;
                    triggerCreateRecordsOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        recordsToCreate: [
                            record
                        ],
                        objectMetadataItems
                    });
                }
            })));
    }, [
        apolloClient,
        createOneRecordMutation,
        objectMetadataItem,
        objectMetadataItems
    ]);
    const updateViewSortRecords = useCallback((viewSortsToUpdate)=>{
        if (!viewSortsToUpdate.length) return;
        return Promise.all(viewSortsToUpdate.map((viewSort)=>apolloClient.mutate({
                mutation: updateOneRecordMutation,
                variables: {
                    idToUpdate: viewSort.id,
                    input: {
                        direction: viewSort.direction
                    }
                },
                update: (cache, { data })=>{
                    const record = data?.['updateViewSort'];
                    if (!isDefined(record)) return;
                    const cachedRecord = getRecordFromCache(record.id, cache);
                    if (!isDefined(cachedRecord)) return;
                    triggerUpdateRecordOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        currentRecord: cachedRecord,
                        updatedRecord: record,
                        objectMetadataItems
                    });
                }
            })));
    }, [
        apolloClient,
        getRecordFromCache,
        objectMetadataItem,
        objectMetadataItems,
        updateOneRecordMutation
    ]);
    const deleteViewSortRecords = useCallback((viewSortIdsToDelete)=>{
        if (!viewSortIdsToDelete.length) return;
        return Promise.all(viewSortIdsToDelete.map((viewSortId)=>apolloClient.mutate({
                mutation: destroyOneRecordMutation,
                variables: {
                    idToDestroy: viewSortId
                },
                update: (cache, { data })=>{
                    const record = data?.['destroyViewSort'];
                    if (!isDefined(record)) return;
                    const cachedRecord = getRecordFromCache(record.id, cache);
                    if (!isDefined(cachedRecord)) return;
                    triggerDestroyRecordsOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        recordsToDestroy: [
                            cachedRecord
                        ],
                        objectMetadataItems
                    });
                }
            })));
    }, [
        apolloClient,
        destroyOneRecordMutation,
        getRecordFromCache,
        objectMetadataItem,
        objectMetadataItems
    ]);
    return {
        createViewSortRecords,
        updateViewSortRecords,
        deleteViewSortRecords
    };
};

//# sourceMappingURL=data:application/json;base64,