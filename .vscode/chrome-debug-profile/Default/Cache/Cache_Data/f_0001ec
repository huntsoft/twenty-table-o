import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useContext = __vite__cjsImport2_react["useContext"];
import { IconArrowUpRight, IconPencil } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { ActivityTargetChips } from "/src/modules/activities/components/ActivityTargetChips.tsx";
import { useActivityTargetObjectRecords } from "/src/modules/activities/hooks/useActivityTargetObjectRecords.ts";
import { useOpenActivityTargetInlineCellEditMode } from "/src/modules/activities/inline-cell/hooks/useOpenActivityTargetInlineCellEditMode.ts";
import { useUpdateActivityTargetFromInlineCell } from "/src/modules/activities/inline-cell/hooks/useUpdateActivityTargetFromInlineCell.ts";
import { FieldContextProvider } from "/src/modules/object-record/record-field/components/FieldContextProvider.tsx";
import { FieldContext } from "/src/modules/object-record/record-field/contexts/FieldContext.ts";
import { FieldFocusContextProvider } from "/src/modules/object-record/record-field/contexts/FieldFocusContextProvider.tsx";
import { useIsFieldValueReadOnly } from "/src/modules/object-record/record-field/hooks/useIsFieldValueReadOnly.ts";
import { RecordFieldComponentInstanceContext } from "/src/modules/object-record/record-field/states/contexts/RecordFieldComponentInstanceContext.ts";
import { RecordInlineCellContainer } from "/src/modules/object-record/record-inline-cell/components/RecordInlineCellContainer.tsx";
import { RecordInlineCellContext } from "/src/modules/object-record/record-inline-cell/components/RecordInlineCellContext.tsx";
import { useInlineCell } from "/src/modules/object-record/record-inline-cell/hooks/useInlineCell.ts";
import { MultipleRecordPicker } from "/src/modules/object-record/record-picker/multiple-record-picker/components/MultipleRecordPicker.tsx";
import { MultipleRecordPickerHotkeyScope } from "/src/modules/object-record/record-picker/multiple-record-picker/types/MultipleRecordPickerHotkeyScope.ts";
export const ActivityTargetsInlineCell = ({ activityRecordId, showLabel = true, maxWidth, activityObjectNameSingular, componentInstanceId })=>{
    _s();
    const { activityTargetObjectRecords } = useActivityTargetObjectRecords(activityRecordId);
    const { closeInlineCell } = useInlineCell(componentInstanceId);
    const { fieldDefinition } = useContext(FieldContext);
    const isFieldReadOnly = useIsFieldValueReadOnly();
    const { openActivityTargetInlineCellEditMode } = useOpenActivityTargetInlineCellEditMode();
    const { updateActivityTargetFromInlineCell } = useUpdateActivityTargetFromInlineCell({
        activityObjectNameSingular,
        activityId: activityRecordId
    });
    return /*#__PURE__*/ _jsxDEV(RecordFieldComponentInstanceContext.Provider, {
        value: {
            instanceId: componentInstanceId
        },
        children: /*#__PURE__*/ _jsxDEV(FieldFocusContextProvider, {
            children: /*#__PURE__*/ _jsxDEV(FieldContextProvider, {
                objectNameSingular: activityObjectNameSingular,
                objectRecordId: activityRecordId,
                fieldMetadataName: fieldDefinition.metadata.fieldName,
                fieldPosition: 3,
                overridenIsFieldEmpty: activityTargetObjectRecords.length === 0,
                children: /*#__PURE__*/ _jsxDEV(RecordInlineCellContext.Provider, {
                    value: {
                        buttonIcon: IconPencil,
                        customEditHotkeyScope: MultipleRecordPickerHotkeyScope.MultipleRecordPicker,
                        IconLabel: showLabel ? IconArrowUpRight : undefined,
                        showLabel: showLabel,
                        readonly: isFieldReadOnly,
                        labelWidth: fieldDefinition?.labelWidth,
                        editModeContent: /*#__PURE__*/ _jsxDEV(MultipleRecordPicker, {
                            componentInstanceId: componentInstanceId,
                            onClickOutside: ()=>{
                                closeInlineCell();
                            },
                            onChange: (morphItem)=>{
                                updateActivityTargetFromInlineCell({
                                    recordPickerInstanceId: componentInstanceId,
                                    morphItem,
                                    activityTargetWithTargetRecords: activityTargetObjectRecords
                                });
                            },
                            onSubmit: ()=>{
                                closeInlineCell();
                            }
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx",
                            lineNumber: 79,
                            columnNumber: 17
                        }, void 0),
                        label: 'Relations',
                        displayModeContent: /*#__PURE__*/ _jsxDEV(ActivityTargetChips, {
                            activityTargetObjectRecords: activityTargetObjectRecords,
                            maxWidth: maxWidth
                        }, void 0, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx",
                            lineNumber: 99,
                            columnNumber: 17
                        }, void 0),
                        onOpenEditMode: ()=>{
                            openActivityTargetInlineCellEditMode({
                                recordPickerInstanceId: componentInstanceId,
                                activityTargetObjectRecords
                            });
                        }
                    },
                    children: /*#__PURE__*/ _jsxDEV(RecordInlineCellContainer, {}, void 0, false, {
                        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx",
                        lineNumber: 112,
                        columnNumber: 13
                    }, this)
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx",
                    lineNumber: 69,
                    columnNumber: 11
                }, this)
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx",
                lineNumber: 62,
                columnNumber: 9
            }, this)
        }, void 0, false, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx",
            lineNumber: 61,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx",
        lineNumber: 56,
        columnNumber: 5
    }, this);
};
_s(ActivityTargetsInlineCell, "/sGRtpZfFxaqS7TCqp9TiuN8k5U=", false, function() {
    return [
        useActivityTargetObjectRecords,
        useInlineCell,
        useIsFieldValueReadOnly,
        useOpenActivityTargetInlineCellEditMode,
        useUpdateActivityTargetFromInlineCell
    ];
});
_c = ActivityTargetsInlineCell;
var _c;
$RefreshReg$(_c, "ActivityTargetsInlineCell");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/activities/inline-cell/components/ActivityTargetsInlineCell.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,