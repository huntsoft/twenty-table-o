import __vite__cjsImport0__sniptt_guards from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@sniptt_guards.js?v=226f7286"; const isObject = __vite__cjsImport0__sniptt_guards["isObject"];
import { isMatchingArrayFilter } from "/src/modules/object-record/record-filter/utils/isMatchingArrayFilter.ts";
import { isMatchingBooleanFilter } from "/src/modules/object-record/record-filter/utils/isMatchingBooleanFilter.ts";
import { isMatchingCurrencyFilter } from "/src/modules/object-record/record-filter/utils/isMatchingCurrencyFilter.ts";
import { isMatchingDateFilter } from "/src/modules/object-record/record-filter/utils/isMatchingDateFilter.ts";
import { isMatchingFloatFilter } from "/src/modules/object-record/record-filter/utils/isMatchingFloatFilter.ts";
import { isMatchingMultiSelectFilter } from "/src/modules/object-record/record-filter/utils/isMatchingMultiSelectFilter.ts";
import { isMatchingRatingFilter } from "/src/modules/object-record/record-filter/utils/isMatchingRatingFilter.ts";
import { isMatchingRawJsonFilter } from "/src/modules/object-record/record-filter/utils/isMatchingRawJsonFilter.ts";
import { isMatchingRichTextV2Filter } from "/src/modules/object-record/record-filter/utils/isMatchingRichTextV2Filter.ts";
import { isMatchingSelectFilter } from "/src/modules/object-record/record-filter/utils/isMatchingSelectFilter.ts";
import { isMatchingStringFilter } from "/src/modules/object-record/record-filter/utils/isMatchingStringFilter.ts";
import { isMatchingUUIDFilter } from "/src/modules/object-record/record-filter/utils/isMatchingUUIDFilter.ts";
import { FieldMetadataType } from "/src/generated-metadata/graphql.ts";
import { isEmptyObject } from "/src/utils/isEmptyObject.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
const isLeafFilter = (filter)=>{
    return !isAndFilter(filter) && !isOrFilter(filter) && !isNotFilter(filter);
};
const isAndFilter = (filter)=>'and' in filter && !!filter.and;
const isImplicitAndFilter = (filter)=>Object.keys(filter).length > 1;
const isOrFilter = (filter)=>'or' in filter && !!filter.or;
const isNotFilter = (filter)=>'not' in filter && !!filter.not;
export const isRecordMatchingFilter = ({ record, filter, objectMetadataItem })=>{
    if (Object.keys(filter).length === 0 && record.deletedAt === null) {
        return true;
    }
    if (isImplicitAndFilter(filter)) {
        return Object.entries(filter).every(([filterKey, value])=>isRecordMatchingFilter({
                record,
                filter: {
                    [filterKey]: value
                },
                objectMetadataItem
            }));
    }
    if (isAndFilter(filter)) {
        const filterValue = filter.and;
        if (!Array.isArray(filterValue)) {
            throw new Error('Unexpected value for "and" filter : ' + JSON.stringify(filterValue));
        }
        return filterValue.length === 0 || filterValue.every((andFilter)=>isRecordMatchingFilter({
                record,
                filter: andFilter,
                objectMetadataItem
            }));
    }
    if (isOrFilter(filter)) {
        const filterValue = filter.or;
        if (Array.isArray(filterValue)) {
            return filterValue.length === 0 || filterValue.some((orFilter)=>isRecordMatchingFilter({
                    record,
                    filter: orFilter,
                    objectMetadataItem
                }));
        }
        if (isObject(filterValue)) {
            // The API considers "or" with an object as an "and"
            return isRecordMatchingFilter({
                record,
                filter: filterValue,
                objectMetadataItem
            });
        }
        throw new Error('Unexpected value for "or" filter : ' + filterValue);
    }
    if (isNotFilter(filter)) {
        const filterValue = filter.not;
        if (!isDefined(filterValue)) {
            throw new Error('Unexpected value for "not" filter : ' + filterValue);
        }
        return isEmptyObject(filterValue) || !isRecordMatchingFilter({
            record,
            filter: filterValue,
            objectMetadataItem
        });
    }
    if (isLeafFilter(filter)) {
        if (isDefined(record.deletedAt) && filter.deletedAt === undefined) {
            return false;
        }
    }
    return Object.entries(filter).every(([filterKey, filterValue])=>{
        if (!isDefined(filterValue)) {
            throw new Error('Unexpected value for filter key "' + filterKey + '" : ' + filterValue);
        }
        if (isEmptyObject(filterValue)) return true;
        const objectMetadataField = objectMetadataItem.fields.find((field)=>field.name === filterKey);
        if (!isDefined(objectMetadataField)) {
            throw new Error('Field metadata item "' + filterKey + '" not found for object metadata item ' + objectMetadataItem.nameSingular);
        }
        switch(objectMetadataField.type){
            case FieldMetadataType.RATING:
                return isMatchingRatingFilter({
                    ratingFilter: filterValue,
                    value: record[filterKey]
                });
            case FieldMetadataType.TEXT:
                {
                    return isMatchingStringFilter({
                        stringFilter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.RICH_TEXT:
                {
                    // TODO: Implement a better rich text filter once it becomes a composite field
                    // See this issue for more context: https://github.com/twentyhq/twenty/issues/7613#issuecomment-2408944585
                    // This should be tackled in Q4'24
                    return isMatchingStringFilter({
                        stringFilter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.RICH_TEXT_V2:
                {
                    return isMatchingRichTextV2Filter({
                        richTextV2Filter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.SELECT:
                return isMatchingSelectFilter({
                    selectFilter: filterValue,
                    value: record[filterKey]
                });
            case FieldMetadataType.MULTI_SELECT:
                return isMatchingMultiSelectFilter({
                    multiSelectFilter: filterValue,
                    value: record[filterKey]
                });
            case FieldMetadataType.ARRAY:
                {
                    return isMatchingArrayFilter({
                        arrayFilter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.RAW_JSON:
                {
                    return isMatchingRawJsonFilter({
                        rawJsonFilter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.FULL_NAME:
                {
                    const fullNameFilter = filterValue;
                    return (fullNameFilter.firstName === undefined || isMatchingStringFilter({
                        stringFilter: fullNameFilter.firstName,
                        value: record[filterKey].firstName
                    })) && (fullNameFilter.lastName === undefined || isMatchingStringFilter({
                        stringFilter: fullNameFilter.lastName,
                        value: record[filterKey].lastName
                    }));
                }
            case FieldMetadataType.ADDRESS:
                {
                    const addressFilter = filterValue;
                    const keys = [
                        'addressStreet1',
                        'addressStreet2',
                        'addressCity',
                        'addressState',
                        'addressCountry',
                        'addressPostcode'
                    ];
                    return keys.some((key)=>{
                        const value = addressFilter[key];
                        if (value === undefined) {
                            return false;
                        }
                        return isMatchingStringFilter({
                            stringFilter: value,
                            value: record[filterKey][key]
                        });
                    });
                }
            case FieldMetadataType.LINKS:
                {
                    const linksFilter = filterValue;
                    const keys = [
                        'primaryLinkLabel',
                        'primaryLinkUrl'
                    ];
                    return keys.some((key)=>{
                        const value = linksFilter[key];
                        if (value === undefined) {
                            return false;
                        }
                        return isMatchingStringFilter({
                            stringFilter: value,
                            value: record[filterKey][key]
                        });
                    });
                }
            case FieldMetadataType.DATE:
            case FieldMetadataType.DATE_TIME:
                {
                    return isMatchingDateFilter({
                        dateFilter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.NUMBER:
            case FieldMetadataType.NUMERIC:
                {
                    return isMatchingFloatFilter({
                        floatFilter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.UUID:
                {
                    return isMatchingUUIDFilter({
                        uuidFilter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.BOOLEAN:
                {
                    return isMatchingBooleanFilter({
                        booleanFilter: filterValue,
                        value: record[filterKey]
                    });
                }
            case FieldMetadataType.CURRENCY:
                {
                    return isMatchingCurrencyFilter({
                        currencyFilter: filterValue,
                        value: record[filterKey].amountMicros
                    });
                }
            case FieldMetadataType.ACTOR:
                {
                    const actorFilter = filterValue;
                    return actorFilter.name === undefined || isMatchingStringFilter({
                        stringFilter: actorFilter.name,
                        value: record[filterKey].name
                    });
                }
            case FieldMetadataType.EMAILS:
                {
                    const emailsFilter = filterValue;
                    if (emailsFilter.primaryEmail === undefined) {
                        return false;
                    }
                    return isMatchingStringFilter({
                        stringFilter: emailsFilter.primaryEmail,
                        value: record[filterKey].primaryEmail
                    });
                }
            case FieldMetadataType.PHONES:
                {
                    const phonesFilter = filterValue;
                    const keys = [
                        'primaryPhoneNumber'
                    ];
                    return keys.some((key)=>{
                        const value = phonesFilter[key];
                        if (value === undefined) {
                            return false;
                        }
                        return isMatchingStringFilter({
                            stringFilter: value,
                            value: record[filterKey][key]
                        });
                    });
                }
            case FieldMetadataType.RELATION:
                {
                    throw new Error(`Not implemented yet, use UUID filter instead on the corredponding "${filterKey}Id" field`);
                }
            default:
                {
                    throw new Error(`Not implemented yet for field type "${objectMetadataField.type}"`);
                }
        }
    });
};

//# sourceMappingURL=data:application/json;base64,