import __vite__cjsImport0_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const React = __vite__cjsImport0_react.__esModule ? __vite__cjsImport0_react.default : __vite__cjsImport0_react; const useEffect = __vite__cjsImport0_react["useEffect"];
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { useClickOustideListenerStates } from "/src/modules/ui/utilities/pointer-event/hooks/useClickOustideListenerStates.ts";
const CLICK_OUTSIDE_DEBUG_MODE = false;
export var ClickOutsideMode;
(function(ClickOutsideMode) {
    ClickOutsideMode["comparePixels"] = "comparePixels";
    ClickOutsideMode["compareHTMLRef"] = "compareHTMLRef";
})(ClickOutsideMode || (ClickOutsideMode = {}));
export const useListenClickOutside = ({ refs, excludeClassNames, callback, mode = "compareHTMLRef", listenerId, enabled = true })=>{
    const { getClickOutsideListenerIsMouseDownInsideState, getClickOutsideListenerIsActivatedState, getClickOutsideListenerMouseDownHappenedState } = useClickOustideListenerStates(listenerId);
    const handleMouseDown = useRecoilCallback(({ snapshot, set })=>(event)=>{
            const clickOutsideListenerIsActivated = snapshot.getLoadable(getClickOutsideListenerIsActivatedState).getValue();
            set(getClickOutsideListenerMouseDownHappenedState, true);
            const isListening = clickOutsideListenerIsActivated && enabled;
            if (!isListening) {
                return;
            }
            switch(mode){
                case "compareHTMLRef":
                    {
                        const clickedOnAtLeastOneRef = refs.filter((ref)=>!!ref.current).some((ref)=>ref.current?.contains(event.target));
                        set(getClickOutsideListenerIsMouseDownInsideState, clickedOnAtLeastOneRef);
                        break;
                    }
                case "comparePixels":
                    {
                        const clickedOnAtLeastOneRef = refs.filter((ref)=>!!ref.current).some((ref)=>{
                            if (!ref.current) {
                                return false;
                            }
                            const { x, y, width, height } = ref.current.getBoundingClientRect();
                            const clientX = 'clientX' in event ? event.clientX : event.changedTouches[0].clientX;
                            const clientY = 'clientY' in event ? event.clientY : event.changedTouches[0].clientY;
                            if (clientX < x || clientX > x + width || clientY < y || clientY > y + height) {
                                return false;
                            }
                            return true;
                        });
                        set(getClickOutsideListenerIsMouseDownInsideState, clickedOnAtLeastOneRef);
                        break;
                    }
                default:
                    {
                        break;
                    }
            }
        }, [
        getClickOutsideListenerIsActivatedState,
        getClickOutsideListenerMouseDownHappenedState,
        enabled,
        mode,
        refs,
        getClickOutsideListenerIsMouseDownInsideState
    ]);
    const handleClickOutside = useRecoilCallback(({ snapshot })=>(event)=>{
            const clickOutsideListenerIsActivated = snapshot.getLoadable(getClickOutsideListenerIsActivatedState).getValue();
            const isListening = clickOutsideListenerIsActivated && enabled;
            const isMouseDownInside = snapshot.getLoadable(getClickOutsideListenerIsMouseDownInsideState).getValue();
            const hasMouseDownHappened = snapshot.getLoadable(getClickOutsideListenerMouseDownHappenedState).getValue();
            const clickedElement = event.target;
            let isClickedOnExcluded = false;
            let currentElement = clickedElement;
            while(currentElement){
                const currentClassList = currentElement.classList;
                isClickedOnExcluded = excludeClassNames?.some((className)=>currentClassList.contains(className)) ?? false;
                if (isClickedOnExcluded) {
                    break;
                }
                currentElement = currentElement.parentElement;
            }
            if (mode === "compareHTMLRef") {
                const clickedOnAtLeastOneRef = refs.filter((ref)=>!!ref.current).some((ref)=>ref.current?.contains(event.target));
                const shouldTrigger = isListening && hasMouseDownHappened && !clickedOnAtLeastOneRef && !isMouseDownInside && !isClickedOnExcluded;
                if (shouldTrigger) {
                    callback(event);
                }
            }
            if (mode === "comparePixels") {
                const clickedOnAtLeastOneRef = refs.filter((ref)=>!!ref.current).some((ref)=>{
                    if (!ref.current) {
                        return false;
                    }
                    const { x, y, width, height } = ref.current.getBoundingClientRect();
                    const clientX = 'clientX' in event ? event.clientX : event.changedTouches[0].clientX;
                    const clientY = 'clientY' in event ? event.clientY : event.changedTouches[0].clientY;
                    if (clientX < x || clientX > x + width || clientY < y || clientY > y + height) {
                        return false;
                    }
                    return true;
                });
                const shouldTrigger = !clickedOnAtLeastOneRef && !isMouseDownInside && isListening && hasMouseDownHappened && !isClickedOnExcluded;
                if (CLICK_OUTSIDE_DEBUG_MODE) {
                    // eslint-disable-next-line no-console
                    console.log('click outside compare pixel', {
                        listenerId,
                        shouldTrigger,
                        clickedOnAtLeastOneRef,
                        isMouseDownInside,
                        isListening,
                        hasMouseDownHappened,
                        isClickedOnExcluded,
                        enabled,
                        event
                    });
                }
                if (shouldTrigger) {
                    callback(event);
                }
            }
        }, [
        getClickOutsideListenerIsActivatedState,
        enabled,
        getClickOutsideListenerIsMouseDownInsideState,
        getClickOutsideListenerMouseDownHappenedState,
        mode,
        refs,
        excludeClassNames,
        callback,
        listenerId
    ]);
    useEffect(()=>{
        document.addEventListener('mousedown', handleMouseDown, {
            capture: true
        });
        document.addEventListener('click', handleClickOutside, {
            capture: true
        });
        document.addEventListener('touchstart', handleMouseDown, {
            capture: true
        });
        document.addEventListener('touchend', handleClickOutside, {
            capture: true
        });
        return ()=>{
            document.removeEventListener('mousedown', handleMouseDown, {
                capture: true
            });
            document.removeEventListener('click', handleClickOutside, {
                capture: true
            });
            document.removeEventListener('touchstart', handleMouseDown, {
                capture: true
            });
            document.removeEventListener('touchend', handleClickOutside, {
                capture: true
            });
        };
    }, [
        refs,
        callback,
        mode,
        handleClickOutside,
        handleMouseDown
    ]);
};

//# sourceMappingURL=data:application/json;base64,