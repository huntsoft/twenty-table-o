import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import __vite__cjsImport1_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useState = __vite__cjsImport1_react["useState"];
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { triggerCreateRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerCreateRecordsOptimisticEffect.ts";
import { triggerDestroyRecordsOptimisticEffect } from "/src/modules/apollo/optimistic-effect/utils/triggerDestroyRecordsOptimisticEffect.ts";
import { currentWorkspaceMemberState } from "/src/modules/auth/states/currentWorkspaceMemberState.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { useCreateOneRecordInCache } from "/src/modules/object-record/cache/hooks/useCreateOneRecordInCache.ts";
import { deleteRecordFromCache } from "/src/modules/object-record/cache/utils/deleteRecordFromCache.ts";
import { getObjectTypename } from "/src/modules/object-record/cache/utils/getObjectTypename.ts";
import { getRecordNodeFromRecord } from "/src/modules/object-record/cache/utils/getRecordNodeFromRecord.ts";
import { generateDepthOneRecordGqlFields } from "/src/modules/object-record/graphql/utils/generateDepthOneRecordGqlFields.ts";
import { useCreateOneRecordMutation } from "/src/modules/object-record/hooks/useCreateOneRecordMutation.ts";
import { useRefetchAggregateQueries } from "/src/modules/object-record/hooks/useRefetchAggregateQueries.ts";
import { computeOptimisticCreateRecordBaseRecordInput } from "/src/modules/object-record/utils/computeOptimisticCreateRecordBaseRecordInput.ts";
import { computeOptimisticRecordFromInput } from "/src/modules/object-record/utils/computeOptimisticRecordFromInput.ts";
import { getCreateOneRecordMutationResponseField } from "/src/modules/object-record/utils/getCreateOneRecordMutationResponseField.ts";
import { sanitizeRecordInput } from "/src/modules/object-record/utils/sanitizeRecordInput.ts";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useCreateOneRecord = ({ objectNameSingular, recordGqlFields, skipPostOptimisticEffect = false, shouldMatchRootQueryFilter })=>{
    const apolloClient = useApolloClient();
    const [loading, setLoading] = useState(false);
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const computedRecordGqlFields = recordGqlFields ?? generateDepthOneRecordGqlFields({
        objectMetadataItem
    });
    const { createOneRecordMutation } = useCreateOneRecordMutation({
        objectNameSingular,
        recordGqlFields: computedRecordGqlFields
    });
    const currentWorkspaceMember = useRecoilValue(currentWorkspaceMemberState);
    const createOneRecordInCache = useCreateOneRecordInCache({
        objectMetadataItem
    });
    const { objectMetadataItems } = useObjectMetadataItems();
    const { refetchAggregateQueries } = useRefetchAggregateQueries({
        objectMetadataNamePlural: objectMetadataItem.namePlural
    });
    const createOneRecord = async (recordInput)=>{
        setLoading(true);
        const idForCreation = recordInput.id ?? v4();
        const sanitizedInput = {
            ...sanitizeRecordInput({
                objectMetadataItem,
                recordInput
            }),
            id: idForCreation
        };
        const optimisticRecordInput = computeOptimisticRecordFromInput({
            cache: apolloClient.cache,
            currentWorkspaceMember: currentWorkspaceMember,
            objectMetadataItem,
            objectMetadataItems,
            recordInput: {
                ...computeOptimisticCreateRecordBaseRecordInput(objectMetadataItem),
                ...recordInput,
                id: idForCreation
            }
        });
        const recordCreatedInCache = createOneRecordInCache({
            ...optimisticRecordInput,
            id: idForCreation,
            __typename: getObjectTypename(objectMetadataItem.nameSingular)
        });
        if (isDefined(recordCreatedInCache)) {
            const optimisticRecordNode = getRecordNodeFromRecord({
                objectMetadataItem,
                objectMetadataItems,
                record: recordCreatedInCache,
                recordGqlFields: computedRecordGqlFields,
                computeReferences: false
            });
            if (skipPostOptimisticEffect === false && optimisticRecordNode !== null) {
                triggerCreateRecordsOptimisticEffect({
                    cache: apolloClient.cache,
                    objectMetadataItem,
                    recordsToCreate: [
                        optimisticRecordNode
                    ],
                    objectMetadataItems,
                    shouldMatchRootQueryFilter
                });
            }
        }
        const mutationResponseField = getCreateOneRecordMutationResponseField(objectNameSingular);
        const createdObject = await apolloClient.mutate({
            mutation: createOneRecordMutation,
            variables: {
                input: sanitizedInput
            },
            update: (cache, { data })=>{
                const record = data?.[mutationResponseField];
                if (skipPostOptimisticEffect === false && isDefined(record)) {
                    triggerCreateRecordsOptimisticEffect({
                        cache,
                        objectMetadataItem,
                        recordsToCreate: [
                            record
                        ],
                        objectMetadataItems,
                        shouldMatchRootQueryFilter,
                        checkForRecordInCache: true
                    });
                }
                setLoading(false);
            }
        }).catch((error)=>{
            if (!recordCreatedInCache) {
                throw error;
            }
            deleteRecordFromCache({
                objectMetadataItems,
                objectMetadataItem,
                cache: apolloClient.cache,
                recordToDestroy: recordCreatedInCache
            });
            triggerDestroyRecordsOptimisticEffect({
                cache: apolloClient.cache,
                objectMetadataItem,
                recordsToDestroy: [
                    recordCreatedInCache
                ],
                objectMetadataItems
            });
            throw error;
        });
        await refetchAggregateQueries();
        return createdObject.data?.[mutationResponseField] ?? null;
    };
    return {
        createOneRecord,
        loading
    };
};

//# sourceMappingURL=data:application/json;base64,