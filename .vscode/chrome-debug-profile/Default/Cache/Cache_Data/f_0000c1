import __vite__cjsImport0_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useContext = __vite__cjsImport0_react["useContext"];
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { isFieldAddress } from "/src/modules/object-record/record-field/types/guards/isFieldAddress.ts";
import { isFieldAddressValue } from "/src/modules/object-record/record-field/types/guards/isFieldAddressValue.ts";
import { isFieldDate } from "/src/modules/object-record/record-field/types/guards/isFieldDate.ts";
import { isFieldDateValue } from "/src/modules/object-record/record-field/types/guards/isFieldDateValue.ts";
import { isFieldEmails } from "/src/modules/object-record/record-field/types/guards/isFieldEmails.ts";
import { isFieldEmailsValue } from "/src/modules/object-record/record-field/types/guards/isFieldEmailsValue.ts";
import { isFieldFullName } from "/src/modules/object-record/record-field/types/guards/isFieldFullName.ts";
import { isFieldFullNameValue } from "/src/modules/object-record/record-field/types/guards/isFieldFullNameValue.ts";
import { isFieldLinks } from "/src/modules/object-record/record-field/types/guards/isFieldLinks.ts";
import { isFieldLinksValue } from "/src/modules/object-record/record-field/types/guards/isFieldLinksValue.ts";
import { isFieldMultiSelect } from "/src/modules/object-record/record-field/types/guards/isFieldMultiSelect.ts";
import { isFieldMultiSelectValue } from "/src/modules/object-record/record-field/types/guards/isFieldMultiSelectValue.ts";
import { isFieldPhones } from "/src/modules/object-record/record-field/types/guards/isFieldPhones.ts";
import { isFieldPhonesValue } from "/src/modules/object-record/record-field/types/guards/isFieldPhonesValue.ts";
import { isFieldRawJson } from "/src/modules/object-record/record-field/types/guards/isFieldRawJson.ts";
import { isFieldRawJsonValue } from "/src/modules/object-record/record-field/types/guards/isFieldRawJsonValue.ts";
import { isFieldRelationToOneObject } from "/src/modules/object-record/record-field/types/guards/isFieldRelationToOneObject.ts";
import { isFieldRelationToOneValue } from "/src/modules/object-record/record-field/types/guards/isFieldRelationToOneValue.ts";
import { isFieldSelect } from "/src/modules/object-record/record-field/types/guards/isFieldSelect.ts";
import { isFieldSelectValue } from "/src/modules/object-record/record-field/types/guards/isFieldSelectValue.ts";
import { recordStoreFamilySelector } from "/src/modules/object-record/record-store/states/selectors/recordStoreFamilySelector.ts";
import { isFieldArray } from "/src/modules/object-record/record-field/types/guards/isFieldArray.ts";
import { isFieldArrayValue } from "/src/modules/object-record/record-field/types/guards/isFieldArrayValue.ts";
import { isFieldOpinions } from "/src/modules/object-record/record-field/types/guards/isFieldOpinions.ts";
import { isFieldOpinionsValue } from "/src/modules/object-record/record-field/types/guards/isFieldOpinionsValue.ts";
import { isFieldRichText } from "/src/modules/object-record/record-field/types/guards/isFieldRichText.ts";
import { isFieldRichTextV2 } from "/src/modules/object-record/record-field/types/guards/isFieldRichTextV2.ts";
import { isFieldRichTextValue } from "/src/modules/object-record/record-field/types/guards/isFieldRichTextValue.ts";
import { isFieldRichTextV2Value } from "/src/modules/object-record/record-field/types/guards/isFieldRichTextValueV2.ts";
import { getForeignKeyNameFromRelationFieldName } from "/src/modules/object-record/utils/getForeignKeyNameFromRelationFieldName.ts";
import { FieldContext } from "/src/modules/object-record/record-field/contexts/FieldContext.ts";
import { isFieldBoolean } from "/src/modules/object-record/record-field/types/guards/isFieldBoolean.ts";
import { isFieldBooleanValue } from "/src/modules/object-record/record-field/types/guards/isFieldBooleanValue.ts";
import { isFieldCurrency } from "/src/modules/object-record/record-field/types/guards/isFieldCurrency.ts";
import { isFieldCurrencyValue } from "/src/modules/object-record/record-field/types/guards/isFieldCurrencyValue.ts";
import { isFieldDateTime } from "/src/modules/object-record/record-field/types/guards/isFieldDateTime.ts";
import { isFieldDateTimeValue } from "/src/modules/object-record/record-field/types/guards/isFieldDateTimeValue.ts";
import { isFieldNumber } from "/src/modules/object-record/record-field/types/guards/isFieldNumber.ts";
import { isFieldNumberValue } from "/src/modules/object-record/record-field/types/guards/isFieldNumberValue.ts";
import { isFieldRating } from "/src/modules/object-record/record-field/types/guards/isFieldRating.ts";
import { isFieldRatingValue } from "/src/modules/object-record/record-field/types/guards/isFieldRatingValue.ts";
import { isFieldText } from "/src/modules/object-record/record-field/types/guards/isFieldText.ts";
import { isFieldTextValue } from "/src/modules/object-record/record-field/types/guards/isFieldTextValue.ts";
export const usePersistField = ()=>{
    const { recordId, fieldDefinition, useUpdateRecord = ()=>[] } = useContext(FieldContext);
    const [updateRecord] = useUpdateRecord();
    const persistField = useRecoilCallback(({ set })=>(valueToPersist)=>{
            const fieldIsRelationToOneObject = isFieldRelationToOneObject(fieldDefinition) && isFieldRelationToOneValue(valueToPersist);
            const fieldIsText = isFieldText(fieldDefinition) && isFieldTextValue(valueToPersist);
            const fieldIsEmails = isFieldEmails(fieldDefinition) && isFieldEmailsValue(valueToPersist);
            const fieldIsDateTime = isFieldDateTime(fieldDefinition) && isFieldDateTimeValue(valueToPersist);
            const fieldIsDate = isFieldDate(fieldDefinition) && isFieldDateValue(valueToPersist);
            const fieldIsLinks = isFieldLinks(fieldDefinition) && isFieldLinksValue(valueToPersist);
            const fieldIsBoolean = isFieldBoolean(fieldDefinition) && isFieldBooleanValue(valueToPersist);
            const fieldIsRating = isFieldRating(fieldDefinition) && isFieldRatingValue(valueToPersist);
            const fieldIsNumber = isFieldNumber(fieldDefinition) && isFieldNumberValue(valueToPersist);
            const fieldIsCurrency = isFieldCurrency(fieldDefinition) && isFieldCurrencyValue(valueToPersist);
            const fieldIsFullName = isFieldFullName(fieldDefinition) && isFieldFullNameValue(valueToPersist);
            const fieldIsPhones = isFieldPhones(fieldDefinition) && isFieldPhonesValue(valueToPersist);
            const fieldIsSelect = isFieldSelect(fieldDefinition) && isFieldSelectValue(valueToPersist);
            const fieldIsMultiSelect = isFieldMultiSelect(fieldDefinition) && isFieldMultiSelectValue(valueToPersist);
            const fieldIsAddress = isFieldAddress(fieldDefinition) && isFieldAddressValue(valueToPersist);
            const fieldIsRawJson = isFieldRawJson(fieldDefinition) && isFieldRawJsonValue(valueToPersist);
            const fieldIsRichText = isFieldRichText(fieldDefinition) && isFieldRichTextValue(valueToPersist);
            const fieldIsRichTextV2 = isFieldRichTextV2(fieldDefinition) && isFieldRichTextV2Value(valueToPersist);
            const fieldIsArray = isFieldArray(fieldDefinition) && isFieldArrayValue(valueToPersist);
            const fieldIsOpinions = isFieldOpinions(fieldDefinition) && isFieldOpinionsValue(valueToPersist);
            const isValuePersistable = fieldIsRelationToOneObject || fieldIsText || fieldIsBoolean || fieldIsEmails || fieldIsRating || fieldIsNumber || fieldIsDateTime || fieldIsDate || fieldIsPhones || fieldIsLinks || fieldIsCurrency || fieldIsFullName || fieldIsSelect || fieldIsMultiSelect || fieldIsAddress || fieldIsRawJson || fieldIsArray || fieldIsOpinions || fieldIsRichText || fieldIsRichTextV2;
            if (isValuePersistable) {
                const fieldName = fieldDefinition.metadata.fieldName;
                set(recordStoreFamilySelector({
                    recordId,
                    fieldName
                }), valueToPersist);
                if (fieldIsRelationToOneObject) {
                    updateRecord?.({
                        variables: {
                            where: {
                                id: recordId
                            },
                            updateOneRecordInput: {
                                [getForeignKeyNameFromRelationFieldName(fieldName)]: valueToPersist?.id ?? null
                            }
                        }
                    });
                    return;
                }
                updateRecord?.({
                    variables: {
                        where: {
                            id: recordId
                        },
                        updateOneRecordInput: {
                            [fieldName]: valueToPersist
                        }
                    }
                });
            } else {
                throw new Error(`Invalid value to persist: ${JSON.stringify(valueToPersist)} for type : ${fieldDefinition.type}, type may not be implemented in usePersistField.`);
            }
        }, [
        recordId,
        fieldDefinition,
        updateRecord
    ]);
    return persistField;
};

//# sourceMappingURL=data:application/json;base64,