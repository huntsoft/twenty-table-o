import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellSoftFocusMode.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellSoftFocusMode.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useContext = __vite__cjsImport2_react["useContext"]; const useEffect = __vite__cjsImport2_react["useEffect"]; const useRef = __vite__cjsImport2_react["useRef"];
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { IconArrowUpRight } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { useGetButtonIcon } from "/src/modules/object-record/record-field/hooks/useGetButtonIcon.ts";
import { useIsFieldEmpty } from "/src/modules/object-record/record-field/hooks/useIsFieldEmpty.ts";
import { useIsFieldInputOnly } from "/src/modules/object-record/record-field/hooks/useIsFieldInputOnly.ts";
import { RecordTableCellContext } from "/src/modules/object-record/record-table/contexts/RecordTableCellContext.ts";
import { RecordTableCellButton } from "/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellButton.tsx";
import { useOpenRecordTableCellFromCell } from "/src/modules/object-record/record-table/record-table-cell/hooks/useOpenRecordTableCellFromCell.ts";
import { isSoftFocusUsingMouseState } from "/src/modules/object-record/record-table/states/isSoftFocusUsingMouseState.ts";
import { FieldContext } from "/src/modules/object-record/record-field/contexts/FieldContext.ts";
import { useIsFieldValueReadOnly } from "/src/modules/object-record/record-field/hooks/useIsFieldValueReadOnly.ts";
import { useRecordTableBodyContextOrThrow } from "/src/modules/object-record/record-table/contexts/RecordTableBodyContext.ts";
import { RecordTableCellDisplayContainer } from "/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellDisplayContainer.tsx";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const RecordTableCellSoftFocusMode = ({ editModeContent, nonEditModeContent })=>{
    _s();
    const { columnIndex, columnDefinition } = useContext(RecordTableCellContext);
    const { recordId } = useContext(FieldContext);
    const { onActionMenuDropdownOpened } = useRecordTableBodyContextOrThrow();
    const isFieldReadOnly = useIsFieldValueReadOnly();
    const { openTableCell } = useOpenRecordTableCellFromCell();
    const editModeContentOnly = useIsFieldInputOnly();
    const isFieldInputOnly = useIsFieldInputOnly();
    const isEmpty = useIsFieldEmpty();
    const scrollRef = useRef(null);
    const isSoftFocusUsingMouse = useRecoilValue(isSoftFocusUsingMouseState);
    useEffect(()=>{
        if (!isSoftFocusUsingMouse) {
            scrollRef.current?.scrollIntoView({
                block: 'nearest'
            });
        }
    }, [
        isSoftFocusUsingMouse
    ]);
    const handleClick = ()=>{
        if (!isFieldInputOnly && !isFieldReadOnly) {
            openTableCell();
        }
    };
    const handleButtonClick = ()=>{
        if (!isFieldInputOnly && isFirstColumn) {
            openTableCell(undefined, false, true);
        } else {
            openTableCell();
        }
    /*
    Disabling sidepanel access for now, TODO: launch
    if (!isFieldInputOnly) {
      openTableCell(undefined, true);
    }
    */ };
    const handleActionMenuDropdown = (event)=>{
        onActionMenuDropdownOpened(event, recordId);
    };
    const isFirstColumn = columnIndex === 0;
    const customButtonIcon = useGetButtonIcon();
    const buttonIcon = isFirstColumn ? IconArrowUpRight // IconLayoutSidebarRightExpand - Disabling sidepanel access for now
     : customButtonIcon;
    const showButton = isDefined(buttonIcon) && !editModeContentOnly && !isFieldReadOnly;
    const dontShowContent = isEmpty && isFieldReadOnly;
    const showPlaceholder = !editModeContentOnly && !isFieldReadOnly && isFirstColumn && isEmpty;
    return /*#__PURE__*/ _jsxDEV(_Fragment, {
        children: [
            /*#__PURE__*/ _jsxDEV(RecordTableCellDisplayContainer, {
                onClick: handleClick,
                scrollRef: scrollRef,
                softFocus: true,
                onContextMenu: handleActionMenuDropdown,
                placeholderForEmptyCell: showPlaceholder ? columnDefinition.label : undefined,
                children: dontShowContent ? /*#__PURE__*/ _jsxDEV(_Fragment, {}, void 0, false) : editModeContentOnly ? editModeContent : nonEditModeContent
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellSoftFocusMode.tsx",
                lineNumber: 93,
                columnNumber: 7
            }, this),
            showButton && /*#__PURE__*/ _jsxDEV(RecordTableCellButton, {
                onClick: handleButtonClick,
                Icon: buttonIcon
            }, void 0, false, {
                fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellSoftFocusMode.tsx",
                lineNumber: 111,
                columnNumber: 9
            }, this)
        ]
    }, void 0, true);
};
_s(RecordTableCellSoftFocusMode, "wpefTDHUR6DYsrG+2aegX0uhmqg=", false, function() {
    return [
        useRecordTableBodyContextOrThrow,
        useIsFieldValueReadOnly,
        useOpenRecordTableCellFromCell,
        useIsFieldInputOnly,
        useIsFieldInputOnly,
        useIsFieldEmpty,
        useRecoilValue,
        useGetButtonIcon
    ];
});
_c = RecordTableCellSoftFocusMode;
var _c;
$RefreshReg$(_c, "RecordTableCellSoftFocusMode");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellSoftFocusMode.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/object-record/record-table/record-table-cell/components/RecordTableCellSoftFocusMode.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,