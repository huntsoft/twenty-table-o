import { useApolloClient } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import { triggerUpdateRecordOptimisticEffectByBatch } from "/src/modules/apollo/optimistic-effect/utils/triggerUpdateRecordOptimisticEffectByBatch.ts";
import { apiConfigState } from "/src/modules/client-config/states/apiConfigState.ts";
import { useObjectMetadataItem } from "/src/modules/object-metadata/hooks/useObjectMetadataItem.ts";
import { useObjectMetadataItems } from "/src/modules/object-metadata/hooks/useObjectMetadataItems.ts";
import { useGetRecordFromCache } from "/src/modules/object-record/cache/hooks/useGetRecordFromCache.ts";
import { getObjectTypename } from "/src/modules/object-record/cache/utils/getObjectTypename.ts";
import { getRecordNodeFromRecord } from "/src/modules/object-record/cache/utils/getRecordNodeFromRecord.ts";
import { updateRecordFromCache } from "/src/modules/object-record/cache/utils/updateRecordFromCache.ts";
import { DEFAULT_MUTATION_BATCH_SIZE } from "/src/modules/object-record/constants/DefaultMutationBatchSize.ts";
import { useDeleteManyRecordsMutation } from "/src/modules/object-record/hooks/useDeleteManyRecordsMutation.ts";
import { useRefetchAggregateQueries } from "/src/modules/object-record/hooks/useRefetchAggregateQueries.ts";
import { getDeleteManyRecordsMutationResponseField } from "/src/modules/object-record/utils/getDeleteManyRecordsMutationResponseField.ts";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { sleep } from "/src/utils/sleep.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useDeleteManyRecords = ({ objectNameSingular })=>{
    const apiConfig = useRecoilValue(apiConfigState);
    const mutationPageSize = apiConfig?.mutationMaximumAffectedRecords ?? DEFAULT_MUTATION_BATCH_SIZE;
    const apolloClient = useApolloClient();
    const { objectMetadataItem } = useObjectMetadataItem({
        objectNameSingular
    });
    const getRecordFromCache = useGetRecordFromCache({
        objectNameSingular
    });
    const { deleteManyRecordsMutation } = useDeleteManyRecordsMutation({
        objectNameSingular
    });
    const { objectMetadataItems } = useObjectMetadataItems();
    const { refetchAggregateQueries } = useRefetchAggregateQueries({
        objectMetadataNamePlural: objectMetadataItem.namePlural
    });
    const mutationResponseField = getDeleteManyRecordsMutationResponseField(objectMetadataItem.namePlural);
    const deleteManyRecords = async ({ recordIdsToDelete, delayInMsBetweenRequests, skipOptimisticEffect = false })=>{
        const numberOfBatches = Math.ceil(recordIdsToDelete.length / mutationPageSize);
        const deletedRecords = [];
        for(let batchIndex = 0; batchIndex < numberOfBatches; batchIndex++){
            const batchedIdsToDelete = recordIdsToDelete.slice(batchIndex * mutationPageSize, (batchIndex + 1) * mutationPageSize);
            const cachedRecords = batchedIdsToDelete.map((idToDelete)=>getRecordFromCache(idToDelete, apolloClient.cache)).filter(isDefined);
            const currentTimestamp = new Date().toISOString();
            if (!skipOptimisticEffect) {
                const cachedRecordsNode = [];
                const computedOptimisticRecordsNode = [];
                const recordGqlFields = {
                    deletedAt: true
                };
                cachedRecords.forEach((cachedRecord)=>{
                    const cachedRecordNode = getRecordNodeFromRecord({
                        record: cachedRecord,
                        objectMetadataItem,
                        objectMetadataItems,
                        computeReferences: false
                    });
                    const computedOptimisticRecord = {
                        ...cachedRecord,
                        deletedAt: currentTimestamp,
                        __typename: getObjectTypename(objectMetadataItem.nameSingular)
                    };
                    const optimisticRecordNode = getRecordNodeFromRecord({
                        record: computedOptimisticRecord,
                        objectMetadataItem,
                        objectMetadataItems,
                        computeReferences: false
                    });
                    if (isDefined(optimisticRecordNode) && isDefined(cachedRecordNode)) {
                        updateRecordFromCache({
                            objectMetadataItems,
                            objectMetadataItem,
                            cache: apolloClient.cache,
                            record: computedOptimisticRecord,
                            recordGqlFields
                        });
                        computedOptimisticRecordsNode.push(optimisticRecordNode);
                        cachedRecordsNode.push(cachedRecordNode);
                    }
                });
                triggerUpdateRecordOptimisticEffectByBatch({
                    cache: apolloClient.cache,
                    objectMetadataItem,
                    currentRecords: cachedRecordsNode,
                    updatedRecords: computedOptimisticRecordsNode,
                    objectMetadataItems
                });
            }
            const deletedRecordsResponse = await apolloClient.mutate({
                mutation: deleteManyRecordsMutation,
                variables: {
                    filter: {
                        id: {
                            in: batchedIdsToDelete
                        }
                    }
                }
            }).catch((error)=>{
                if (skipOptimisticEffect) {
                    throw error;
                }
                const cachedRecordsNode = [];
                const computedOptimisticRecordsNode = [];
                const recordGqlFields = {
                    deletedAt: true
                };
                cachedRecords.forEach((cachedRecord)=>{
                    updateRecordFromCache({
                        objectMetadataItems,
                        objectMetadataItem,
                        cache: apolloClient.cache,
                        record: {
                            ...cachedRecord,
                            deletedAt: null
                        },
                        recordGqlFields
                    });
                    const cachedRecordWithConnection = getRecordNodeFromRecord({
                        record: cachedRecord,
                        objectMetadataItem,
                        objectMetadataItems,
                        computeReferences: false
                    });
                    const computedOptimisticRecord = {
                        ...cachedRecord,
                        deletedAt: currentTimestamp,
                        __typename: getObjectTypename(objectMetadataItem.nameSingular)
                    };
                    const optimisticRecordWithConnection = getRecordNodeFromRecord({
                        record: computedOptimisticRecord,
                        objectMetadataItem,
                        objectMetadataItems,
                        computeReferences: false
                    });
                    if (isDefined(optimisticRecordWithConnection) && isDefined(cachedRecordWithConnection)) {
                        cachedRecordsNode.push(cachedRecordWithConnection);
                        computedOptimisticRecordsNode.push(optimisticRecordWithConnection);
                    }
                });
                triggerUpdateRecordOptimisticEffectByBatch({
                    cache: apolloClient.cache,
                    objectMetadataItem,
                    currentRecords: computedOptimisticRecordsNode,
                    updatedRecords: cachedRecordsNode,
                    objectMetadataItems
                });
                throw error;
            });
            const deletedRecordsForThisBatch = deletedRecordsResponse.data?.[mutationResponseField] ?? [];
            deletedRecords.push(...deletedRecordsForThisBatch);
            if (isDefined(delayInMsBetweenRequests)) {
                await sleep(delayInMsBetweenRequests);
            }
        }
        await refetchAggregateQueries();
        return deletedRecords;
    };
    return {
        deleteManyRecords
    };
};

//# sourceMappingURL=data:application/json;base64,