import { MAIN_CONTEXT_STORE_INSTANCE_ID } from "/src/modules/context-store/constants/MainContextStoreInstanceId.tsx";
import { contextStoreCurrentViewIdComponentState } from "/src/modules/context-store/states/contextStoreCurrentViewIdComponentState.ts";
import { useRecordIndexContextOrThrow } from "/src/modules/object-record/record-index/contexts/RecordIndexContext.ts";
import { useLoadRecordIndexStates } from "/src/modules/object-record/record-index/hooks/useLoadRecordIndexStates.ts";
import { recordIndexViewTypeState } from "/src/modules/object-record/record-index/states/recordIndexViewTypeState.ts";
import { prefetchViewFromViewIdFamilySelector } from "/src/modules/prefetch/states/selector/prefetchViewFromViewIdFamilySelector.ts";
import { usePersistViewGroupRecords } from "/src/modules/views/hooks/internal/usePersistViewGroupRecords.ts";
import { useUpdateCurrentView } from "/src/modules/views/hooks/useUpdateCurrentView.ts";
import { ViewType } from "/src/modules/views/types/ViewType.ts";
import { useGetAvailableFieldsForKanban } from "/src/modules/views/view-picker/hooks/useGetAvailableFieldsForKanban.ts";
import __vite__cjsImport10_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useCallback = __vite__cjsImport10_react["useCallback"];
import { useRecoilCallback, useSetRecoilState } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { assertUnreachable, isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
export const useSetViewTypeFromLayoutOptionsMenu = ()=>{
    const { updateCurrentView } = useUpdateCurrentView();
    const setRecordIndexViewType = useSetRecoilState(recordIndexViewTypeState);
    const { availableFieldsForKanban } = useGetAvailableFieldsForKanban();
    const { objectMetadataItem } = useRecordIndexContextOrThrow();
    const { loadRecordIndexStates } = useLoadRecordIndexStates();
    const { createViewGroupRecords } = usePersistViewGroupRecords();
    const createViewGroupAssociatedWithKanbanField = useCallback(async (randomFieldForKanban, currentViewId)=>{
        const viewGroupsToCreate = objectMetadataItem.fields?.find((field)=>field.id === randomFieldForKanban)?.options?.map((option, index)=>({
                id: v4(),
                __typename: 'ViewGroup',
                fieldMetadataId: randomFieldForKanban,
                fieldValue: option.value,
                isVisible: true,
                position: index
            })) ?? [];
        viewGroupsToCreate.push({
            __typename: 'ViewGroup',
            id: v4(),
            fieldValue: '',
            position: viewGroupsToCreate.length,
            isVisible: true,
            fieldMetadataId: randomFieldForKanban
        });
        await createViewGroupRecords({
            viewGroupsToCreate,
            viewId: currentViewId
        });
        return viewGroupsToCreate;
    }, [
        objectMetadataItem,
        createViewGroupRecords
    ]);
    const setAndPersistViewType = useRecoilCallback(({ snapshot })=>async (viewType)=>{
            const currentViewId = snapshot.getLoadable(contextStoreCurrentViewIdComponentState.atomFamily({
                instanceId: MAIN_CONTEXT_STORE_INSTANCE_ID
            })).getValue();
            if (!isDefined(currentViewId)) {
                throw new Error('No view id found');
            }
            const currentView = snapshot.getLoadable(prefetchViewFromViewIdFamilySelector({
                viewId: currentViewId
            })).getValue();
            if (!isDefined(currentView)) {
                throw new Error('No current view found');
            }
            const updateCurrentViewParams = {};
            updateCurrentViewParams.type = viewType;
            switch(viewType){
                case ViewType.Kanban:
                    {
                        if (availableFieldsForKanban.length === 0) {
                            throw new Error('No fields for kanban - should not happen');
                        }
                        const previouslySelectedKanbanField = availableFieldsForKanban.find((fieldsForKanban)=>fieldsForKanban.id === currentView.kanbanFieldMetadataId);
                        const kanbanField = isDefined(previouslySelectedKanbanField) ? previouslySelectedKanbanField : availableFieldsForKanban[0];
                        if (!isDefined(previouslySelectedKanbanField)) {
                            updateCurrentViewParams.kanbanFieldMetadataId = kanbanField.id;
                        }
                        const hasViewGroups = currentView.viewGroups.some((viewGroup)=>viewGroup.fieldMetadataId === kanbanField.id);
                        if (!hasViewGroups) {
                            const viewGroups = await createViewGroupAssociatedWithKanbanField(kanbanField.id, currentView.id);
                            loadRecordIndexStates({
                                ...currentView,
                                viewGroups
                            }, objectMetadataItem);
                        }
                        setRecordIndexViewType(viewType);
                        await updateCurrentView(updateCurrentViewParams);
                        break;
                    }
                case ViewType.Table:
                    setRecordIndexViewType(viewType);
                    await updateCurrentView(updateCurrentViewParams);
                    break;
                default:
                    {
                        return assertUnreachable(viewType);
                    }
            }
        }, [
        availableFieldsForKanban,
        objectMetadataItem,
        updateCurrentView,
        setRecordIndexViewType,
        createViewGroupAssociatedWithKanbanField,
        loadRecordIndexStates
    ]);
    return {
        setAndPersistViewType
    };
};

//# sourceMappingURL=data:application/json;base64,