import { contextStoreCurrentViewIdComponentState } from "/src/modules/context-store/states/contextStoreCurrentViewIdComponentState.ts";
import { CoreObjectNameSingular } from "/src/modules/object-metadata/types/CoreObjectNameSingular.ts";
import { useCreateOneRecord } from "/src/modules/object-record/hooks/useCreateOneRecord.ts";
import { useLazyFindManyRecords } from "/src/modules/object-record/hooks/useLazyFindManyRecords.ts";
import { currentRecordFilterGroupsComponentState } from "/src/modules/object-record/record-filter-group/states/currentRecordFilterGroupsComponentState.ts";
import { currentRecordFiltersComponentState } from "/src/modules/object-record/record-filter/states/currentRecordFiltersComponentState.ts";
import { useRecordIndexContextOrThrow } from "/src/modules/object-record/record-index/contexts/RecordIndexContext.ts";
import { currentRecordSortsComponentState } from "/src/modules/object-record/record-sort/states/currentRecordSortsComponentState.ts";
import { prefetchViewFromViewIdFamilySelector } from "/src/modules/prefetch/states/selector/prefetchViewFromViewIdFamilySelector.ts";
import { getSnapshotValue } from "/src/modules/ui/utilities/recoil-scope/utils/getSnapshotValue.ts";
import { useRecoilComponentCallbackStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentCallbackStateV2.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { usePersistViewFieldRecords } from "/src/modules/views/hooks/internal/usePersistViewFieldRecords.ts";
import { usePersistViewFilterGroupRecords } from "/src/modules/views/hooks/internal/usePersistViewFilterGroupRecords.ts";
import { usePersistViewFilterRecords } from "/src/modules/views/hooks/internal/usePersistViewFilterRecords.ts";
import { usePersistViewGroupRecords } from "/src/modules/views/hooks/internal/usePersistViewGroupRecords.ts";
import { usePersistViewSortRecords } from "/src/modules/views/hooks/internal/usePersistViewSortRecords.ts";
import { isPersistingViewFieldsState } from "/src/modules/views/states/isPersistingViewFieldsState.ts";
import { ViewType } from "/src/modules/views/types/ViewType.ts";
import { duplicateViewFiltersAndViewFilterGroups } from "/src/modules/views/utils/duplicateViewFiltersAndViewFilterGroups.ts";
import { mapRecordFilterGroupToViewFilterGroup } from "/src/modules/views/utils/mapRecordFilterGroupToViewFilterGroup.ts";
import { mapRecordFilterToViewFilter } from "/src/modules/views/utils/mapRecordFilterToViewFilter.ts";
import { mapRecordSortToViewSort } from "/src/modules/views/utils/mapRecordSortToViewSort.ts";
import { useRecoilCallback } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { v4 } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/uuid.js?v=226f7286";
import { isUndefinedOrNull } from "/src/utils/isUndefinedOrNull.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const useCreateViewFromCurrentView = (viewBarComponentId)=>{
    const currentViewIdCallbackState = useRecoilComponentCallbackStateV2(contextStoreCurrentViewIdComponentState, viewBarComponentId);
    const { createOneRecord } = useCreateOneRecord({
        objectNameSingular: CoreObjectNameSingular.View
    });
    const { createViewFieldRecords } = usePersistViewFieldRecords();
    const { createViewSortRecords } = usePersistViewSortRecords();
    const { createViewGroupRecords } = usePersistViewGroupRecords();
    const { createViewFilterRecords } = usePersistViewFilterRecords();
    const { createViewFilterGroupRecords } = usePersistViewFilterGroupRecords();
    const { objectMetadataItem } = useRecordIndexContextOrThrow();
    const { findManyRecords } = useLazyFindManyRecords({
        objectNameSingular: CoreObjectNameSingular.View,
        fetchPolicy: 'network-only'
    });
    const currentRecordFilterGroups = useRecoilComponentValueV2(currentRecordFilterGroupsComponentState);
    const currentRecordSorts = useRecoilComponentValueV2(currentRecordSortsComponentState);
    const currentRecordFilters = useRecoilComponentValueV2(currentRecordFiltersComponentState);
    const createViewFromCurrentView = useRecoilCallback(({ snapshot, set })=>async ({ id, name, icon, kanbanFieldMetadataId, type }, shouldCopyFiltersAndSortsAndAggregate)=>{
            const currentViewId = getSnapshotValue(snapshot, currentViewIdCallbackState);
            if (!isDefined(currentViewId)) {
                return;
            }
            const sourceView = snapshot.getLoadable(prefetchViewFromViewIdFamilySelector({
                viewId: currentViewId
            })).getValue();
            if (!isDefined(sourceView)) {
                return;
            }
            set(isPersistingViewFieldsState, true);
            const newView = await createOneRecord({
                id: id ?? v4(),
                name: name ?? sourceView.name,
                icon: icon ?? sourceView.icon,
                key: null,
                kanbanFieldMetadataId: kanbanFieldMetadataId ?? sourceView.kanbanFieldMetadataId,
                kanbanAggregateOperation: shouldCopyFiltersAndSortsAndAggregate ? sourceView.kanbanAggregateOperation : undefined,
                kanbanAggregateOperationFieldMetadataId: shouldCopyFiltersAndSortsAndAggregate ? sourceView.kanbanAggregateOperationFieldMetadataId : undefined,
                type: type ?? sourceView.type,
                objectMetadataId: sourceView.objectMetadataId
            });
            if (isUndefinedOrNull(newView)) {
                throw new Error('Failed to create view');
            }
            await createViewFieldRecords(sourceView.viewFields, newView);
            if (type === ViewType.Kanban) {
                if (!isDefined(kanbanFieldMetadataId)) {
                    throw new Error('Kanban view must have a kanban field');
                }
                const viewGroupsToCreate = objectMetadataItem.fields?.find((field)=>field.id === kanbanFieldMetadataId)?.options?.map((option, index)=>({
                        id: v4(),
                        __typename: 'ViewGroup',
                        fieldMetadataId: kanbanFieldMetadataId,
                        fieldValue: option.value,
                        isVisible: true,
                        position: index
                    })) ?? [];
                viewGroupsToCreate.push({
                    __typename: 'ViewGroup',
                    id: v4(),
                    fieldValue: '',
                    position: viewGroupsToCreate.length,
                    isVisible: true,
                    fieldMetadataId: kanbanFieldMetadataId
                });
                await createViewGroupRecords({
                    viewGroupsToCreate,
                    viewId: newView.id
                });
            }
            if (shouldCopyFiltersAndSortsAndAggregate === true) {
                const viewFilterGroupsToCopy = currentRecordFilterGroups.map((recordFilterGroup)=>mapRecordFilterGroupToViewFilterGroup({
                        recordFilterGroup,
                        view: newView
                    }));
                const viewFiltersToCopy = currentRecordFilters.map(mapRecordFilterToViewFilter);
                const { duplicatedViewFilterGroups: viewFilterGroupsToCreate, duplicatedViewFilters: viewFiltersToCreate } = duplicateViewFiltersAndViewFilterGroups({
                    viewFilterGroupsToDuplicate: viewFilterGroupsToCopy,
                    viewFiltersToDuplicate: viewFiltersToCopy
                });
                const viewSortsToCreate = currentRecordSorts.map(mapRecordSortToViewSort).map((viewSort)=>({
                        ...viewSort,
                        id: v4()
                    }));
                await createViewFilterGroupRecords(viewFilterGroupsToCreate, newView);
                await createViewFilterRecords(viewFiltersToCreate, newView);
                await createViewSortRecords(viewSortsToCreate, newView);
            }
            await findManyRecords();
            set(isPersistingViewFieldsState, false);
        }, [
        currentViewIdCallbackState,
        createOneRecord,
        createViewFieldRecords,
        findManyRecords,
        objectMetadataItem.fields,
        createViewGroupRecords,
        createViewSortRecords,
        createViewFilterRecords,
        createViewFilterGroupRecords,
        currentRecordFilters,
        currentRecordSorts,
        currentRecordFilterGroups
    ]);
    return {
        createViewFromCurrentView
    };
};

//# sourceMappingURL=data:application/json;base64,