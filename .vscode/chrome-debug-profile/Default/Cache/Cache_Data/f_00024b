import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/ui/field/input/components/MultiSelectInput.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useRef = __vite__cjsImport2_react["useRef"]; const useState = __vite__cjsImport2_react["useState"];
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import __vite__cjsImport4_tsKeyEnum from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/ts-key-enum.js?v=226f7286"; const Key = __vite__cjsImport4_tsKeyEnum["Key"];
import { DropdownMenu } from "/src/modules/ui/layout/dropdown/components/DropdownMenu.tsx";
import { DropdownMenuItemsContainer } from "/src/modules/ui/layout/dropdown/components/DropdownMenuItemsContainer.tsx";
import { DropdownMenuSearchInput } from "/src/modules/ui/layout/dropdown/components/DropdownMenuSearchInput.tsx";
import { DropdownMenuSeparator } from "/src/modules/ui/layout/dropdown/components/DropdownMenuSeparator.tsx";
import { SelectableList } from "/src/modules/ui/layout/selectable-list/components/SelectableList.tsx";
import { useSelectableListStates } from "/src/modules/ui/layout/selectable-list/hooks/internal/useSelectableListStates.ts";
import { useSelectableList } from "/src/modules/ui/layout/selectable-list/hooks/useSelectableList.ts";
import { useScopedHotkeys } from "/src/modules/ui/utilities/hotkey/hooks/useScopedHotkeys.ts";
import { useListenClickOutside } from "/src/modules/ui/utilities/pointer-event/hooks/useListenClickOutside.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
import { MenuItemMultiSelectTag } from "/@fs/D:/twenty-table-o/packages/twenty-ui/src/index.ts";
import { turnIntoEmptyStringIfWhitespacesOnly } from "/src/utils/string/turnIntoEmptyStringIfWhitespacesOnly.ts";
export const MultiSelectInput = ({ selectableListComponentInstanceId, values, options, hotkeyScope, onCancel, onOptionSelected })=>{
    _s();
    const { selectedItemIdState } = useSelectableListStates({
        selectableListScopeId: selectableListComponentInstanceId
    });
    const { resetSelectedItem } = useSelectableList(selectableListComponentInstanceId);
    const selectedItemId = useRecoilValue(selectedItemIdState);
    const [searchFilter, setSearchFilter] = useState('');
    const containerRef = useRef(null);
    const selectedOptions = options.filter((option)=>values?.includes(option.value));
    const filteredOptionsInDropDown = options.filter((option)=>option.label.toLowerCase().includes(searchFilter.toLowerCase()));
    const formatNewSelectedOptions = (value)=>{
        const selectedOptionsValues = selectedOptions.map((selectedOption)=>selectedOption.value);
        if (!selectedOptionsValues.includes(value)) {
            return [
                value,
                ...selectedOptionsValues
            ];
        } else {
            return selectedOptionsValues.filter((selectedOptionsValue)=>selectedOptionsValue !== value);
        }
    };
    useScopedHotkeys(Key.Escape, ()=>{
        onCancel?.();
        resetSelectedItem();
    }, hotkeyScope, [
        onCancel,
        resetSelectedItem
    ]);
    useListenClickOutside({
        refs: [
            containerRef
        ],
        callback: (event)=>{
            event.stopImmediatePropagation();
            const weAreNotInAnHTMLInput = !(event.target instanceof HTMLInputElement && event.target.tagName === 'INPUT');
            if (weAreNotInAnHTMLInput && isDefined(onCancel)) {
                onCancel();
            }
            resetSelectedItem();
        },
        listenerId: 'MultiSelectFieldInput'
    });
    const optionIds = filteredOptionsInDropDown.map((option)=>option.value);
    return /*#__PURE__*/ _jsxDEV(SelectableList, {
        selectableListId: selectableListComponentInstanceId,
        selectableItemIdArray: optionIds,
        hotkeyScope: hotkeyScope,
        onEnter: (itemId)=>{
            const option = filteredOptionsInDropDown.find((option)=>option.value === itemId);
            if (isDefined(option)) {
                onOptionSelected(formatNewSelectedOptions(option.value));
            }
        },
        children: /*#__PURE__*/ _jsxDEV(DropdownMenu, {
            "data-select-disable": true,
            ref: containerRef,
            children: [
                /*#__PURE__*/ _jsxDEV(DropdownMenuSearchInput, {
                    value: searchFilter,
                    onChange: (event)=>setSearchFilter(turnIntoEmptyStringIfWhitespacesOnly(event.currentTarget.value)),
                    autoFocus: true
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx",
                    lineNumber: 112,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDEV(DropdownMenuSeparator, {}, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx",
                    lineNumber: 121,
                    columnNumber: 9
                }, this),
                /*#__PURE__*/ _jsxDEV(DropdownMenuItemsContainer, {
                    hasMaxHeight: true,
                    children: filteredOptionsInDropDown.map((option)=>{
                        return /*#__PURE__*/ _jsxDEV(MenuItemMultiSelectTag, {
                            selected: values?.includes(option.value) || false,
                            text: option.label,
                            color: option.color ?? 'transparent',
                            Icon: option.Icon ?? undefined,
                            onClick: ()=>onOptionSelected(formatNewSelectedOptions(option.value)),
                            isKeySelected: selectedItemId === option.value
                        }, option.value, false, {
                            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx",
                            lineNumber: 125,
                            columnNumber: 15
                        }, this);
                    })
                }, void 0, false, {
                    fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx",
                    lineNumber: 122,
                    columnNumber: 9
                }, this)
            ]
        }, void 0, true, {
            fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx",
            lineNumber: 111,
            columnNumber: 7
        }, this)
    }, void 0, false, {
        fileName: "D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx",
        lineNumber: 98,
        columnNumber: 5
    }, this);
};
_s(MultiSelectInput, "JIuyy9s2nPhdZc/II0J+tH4dGf4=", false, function() {
    return [
        useSelectableListStates,
        useSelectableList,
        useRecoilValue,
        useScopedHotkeys,
        useListenClickOutside
    ];
});
_c = MultiSelectInput;
var _c;
$RefreshReg$(_c, "MultiSelectInput");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/ui/field/input/components/MultiSelectInput.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,