function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
import { ApolloClient, ApolloLink, fromPromise } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client.js?v=226f7286";
import { setContext } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client_link_context.js?v=226f7286";
import { onError } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client_link_error.js?v=226f7286";
import { RetryLink } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@apollo_client_link_retry.js?v=226f7286";
import { createUploadLink } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/apollo-upload-client.js?v=226f7286";
import { renewToken } from "/src/modules/auth/services/AuthService.ts";
import { logDebug } from "/src/utils/logDebug.ts";
import { i18n } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@lingui_core.js?v=226f7286";
import { loggerLink } from "/src/modules/apollo/utils/loggerLink.ts";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
const logger = loggerLink(()=>'Twenty');
export class ApolloFactory {
    updateTokenPair(tokenPair) {
        this.tokenPair = tokenPair;
    }
    updateWorkspaceMember(workspaceMember) {
        this.currentWorkspaceMember = workspaceMember;
    }
    getClient() {
        return this.client;
    }
    constructor(opts){
        _define_property(this, "client", void 0);
        _define_property(this, "tokenPair", null);
        _define_property(this, "currentWorkspaceMember", null);
        const { uri, onError: onErrorCb, onNetworkError, onTokenPairChange, onUnauthenticatedError, initialTokenPair, currentWorkspaceMember, extraLinks, isDebugMode, ...options } = opts;
        this.tokenPair = initialTokenPair;
        this.currentWorkspaceMember = currentWorkspaceMember;
        const buildApolloLink = ()=>{
            const httpLink = createUploadLink({
                uri
            });
            const authLink = setContext(async (_, { headers })=>{
                return {
                    headers: {
                        ...headers,
                        ...options.headers,
                        authorization: this.tokenPair?.accessToken.token ? `Bearer ${this.tokenPair?.accessToken.token}` : '',
                        ...this.currentWorkspaceMember?.locale ? {
                            'x-locale': this.currentWorkspaceMember.locale
                        } : {
                            'x-locale': i18n.locale
                        }
                    }
                };
            });
            const retryLink = new RetryLink({
                delay: {
                    initial: 3000
                },
                attempts: {
                    max: 2,
                    retryIf: (error)=>!!error
                }
            });
            const errorLink = onError(({ graphQLErrors, networkError, forward, operation })=>{
                if (isDefined(graphQLErrors)) {
                    onErrorCb?.(graphQLErrors);
                    for (const graphQLError of graphQLErrors){
                        if (graphQLError.message === 'Unauthorized') {
                            return fromPromise(renewToken(uri, this.tokenPair).then((tokens)=>{
                                if (isDefined(tokens)) {
                                    onTokenPairChange?.(tokens);
                                }
                            }).catch(()=>{
                                onUnauthenticatedError?.();
                            })).flatMap(()=>forward(operation));
                        }
                        switch(graphQLError?.extensions?.code){
                            case 'UNAUTHENTICATED':
                                {
                                    return fromPromise(renewToken(uri, this.tokenPair).then((tokens)=>{
                                        if (isDefined(tokens)) {
                                            onTokenPairChange?.(tokens);
                                        }
                                    }).catch(()=>{
                                        onUnauthenticatedError?.();
                                    })).flatMap(()=>forward(operation));
                                }
                            default:
                                if (isDebugMode === true) {
                                    logDebug(`[GraphQL error]: Message: ${graphQLError.message}, Location: ${graphQLError.locations ? JSON.stringify(graphQLError.locations) : graphQLError.locations}, Path: ${graphQLError.path}`);
                                }
                        }
                    }
                }
                if (isDefined(networkError)) {
                    if (isDebugMode === true) {
                        logDebug(`[Network error]: ${networkError}`);
                    }
                    onNetworkError?.(networkError);
                }
            });
            return ApolloLink.from([
                errorLink,
                authLink,
                ...extraLinks || [],
                isDebugMode ? logger : null,
                retryLink,
                httpLink
            ].filter(isDefined));
        };
        this.client = new ApolloClient({
            ...options,
            link: buildApolloLink()
        });
    }
}

//# sourceMappingURL=data:application/json;base64,