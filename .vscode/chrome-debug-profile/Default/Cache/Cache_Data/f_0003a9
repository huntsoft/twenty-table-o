import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/modules/views/view-picker/components/ViewPickerContentEffect.tsx");if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/twenty-table-o/packages/twenty-front/src/modules/views/view-picker/components/ViewPickerContentEffect.tsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import * as RefreshRuntime from "/@react-refresh";

import { jsxDEV as _jsxDEV, Fragment as _Fragment } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/@emotion_react_jsx-dev-runtime.js?v=226f7286";
var _s = $RefreshSig$();
import __vite__cjsImport2_react from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/react.js?v=226f7286"; const useEffect = __vite__cjsImport2_react["useEffect"];
import { useContextStoreObjectMetadataItemOrThrow } from "/src/modules/context-store/hooks/useContextStoreObjectMetadataItemOrThrow.ts";
import { prefetchViewsFromObjectMetadataItemFamilySelector } from "/src/modules/prefetch/states/selector/prefetchViewsFromObjectMetadataItemFamilySelector.ts";
import { useRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentStateV2.ts";
import { useRecoilComponentValueV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useRecoilComponentValueV2.ts";
import { useSetRecoilComponentStateV2 } from "/src/modules/ui/utilities/state/component-state/hooks/useSetRecoilComponentStateV2.ts";
import { ViewType } from "/src/modules/views/types/ViewType.ts";
import { useGetAvailableFieldsForKanban } from "/src/modules/views/view-picker/hooks/useGetAvailableFieldsForKanban.ts";
import { useViewPickerMode } from "/src/modules/views/view-picker/hooks/useViewPickerMode.ts";
import { viewPickerInputNameComponentState } from "/src/modules/views/view-picker/states/viewPickerInputNameComponentState.ts";
import { viewPickerIsDirtyComponentState } from "/src/modules/views/view-picker/states/viewPickerIsDirtyComponentState.ts";
import { viewPickerIsPersistingComponentState } from "/src/modules/views/view-picker/states/viewPickerIsPersistingComponentState.ts";
import { viewPickerKanbanFieldMetadataIdComponentState } from "/src/modules/views/view-picker/states/viewPickerKanbanFieldMetadataIdComponentState.ts";
import { viewPickerReferenceViewIdComponentState } from "/src/modules/views/view-picker/states/viewPickerReferenceViewIdComponentState.ts";
import { viewPickerSelectedIconComponentState } from "/src/modules/views/view-picker/states/viewPickerSelectedIconComponentState.ts";
import { viewPickerTypeComponentState } from "/src/modules/views/view-picker/states/viewPickerTypeComponentState.ts";
import { useRecoilValue } from "/@fs/D:/twenty-table-o/node_modules/.vite/packages/twenty-front/deps/recoil.js?v=226f7286";
import { isDefined } from "/@fs/D:/twenty-table-o/packages/twenty-shared/utils/dist/twenty-shared-utils.esm.js";
export const ViewPickerContentEffect = ()=>{
    _s();
    const setViewPickerSelectedIcon = useSetRecoilComponentStateV2(viewPickerSelectedIconComponentState);
    const setViewPickerInputName = useSetRecoilComponentStateV2(viewPickerInputNameComponentState);
    const { viewPickerMode } = useViewPickerMode();
    const [viewPickerKanbanFieldMetadataId, setViewPickerKanbanFieldMetadataId] = useRecoilComponentStateV2(viewPickerKanbanFieldMetadataIdComponentState);
    const [viewPickerType, setViewPickerType] = useRecoilComponentStateV2(viewPickerTypeComponentState);
    const viewPickerReferenceViewId = useRecoilComponentValueV2(viewPickerReferenceViewIdComponentState);
    const viewPickerIsDirty = useRecoilComponentValueV2(viewPickerIsDirtyComponentState);
    const viewPickerIsPersisting = useRecoilComponentValueV2(viewPickerIsPersistingComponentState);
    const { objectMetadataItem } = useContextStoreObjectMetadataItemOrThrow();
    const viewsOnCurrentObject = useRecoilValue(prefetchViewsFromObjectMetadataItemFamilySelector({
        objectMetadataItemId: objectMetadataItem.id
    }));
    const referenceView = viewsOnCurrentObject.find((view)=>view.id === viewPickerReferenceViewId);
    const { availableFieldsForKanban } = useGetAvailableFieldsForKanban();
    useEffect(()=>{
        if (isDefined(referenceView) && !viewPickerIsPersisting && !viewPickerIsDirty) {
            const defaultIcon = viewPickerType === ViewType.Kanban ? 'IconLayoutKanban' : 'IconTable';
            if (viewPickerMode === 'create-empty') {
                setViewPickerSelectedIcon(defaultIcon);
            } else {
                setViewPickerSelectedIcon(referenceView.icon);
            }
            setViewPickerInputName(referenceView.name);
            setViewPickerType(referenceView.type);
        }
    }, [
        referenceView,
        setViewPickerInputName,
        setViewPickerSelectedIcon,
        setViewPickerType,
        viewPickerIsPersisting,
        viewPickerIsDirty,
        viewPickerMode,
        viewPickerType
    ]);
    useEffect(()=>{
        if (isDefined(referenceView) && availableFieldsForKanban.length > 0 && viewPickerKanbanFieldMetadataId === '') {
            setViewPickerKanbanFieldMetadataId(referenceView.kanbanFieldMetadataId !== '' ? referenceView.kanbanFieldMetadataId : availableFieldsForKanban[0].id);
        }
    }, [
        referenceView,
        availableFieldsForKanban,
        viewPickerKanbanFieldMetadataId,
        setViewPickerKanbanFieldMetadataId
    ]);
    return /*#__PURE__*/ _jsxDEV(_Fragment, {}, void 0, false);
};
_s(ViewPickerContentEffect, "cdsFYRbqS1IqLyT+vTWjfjljJZE=", false, function() {
    return [
        useSetRecoilComponentStateV2,
        useSetRecoilComponentStateV2,
        useViewPickerMode,
        useRecoilComponentStateV2,
        useRecoilComponentStateV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useRecoilComponentValueV2,
        useContextStoreObjectMetadataItemOrThrow,
        useRecoilValue,
        useGetAvailableFieldsForKanban
    ];
});
_c = ViewPickerContentEffect;
var _c;
$RefreshReg$(_c, "ViewPickerContentEffect");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;

RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/twenty-table-o/packages/twenty-front/src/modules/views/view-picker/components/ViewPickerContentEffect.tsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("D:/twenty-table-o/packages/twenty-front/src/modules/views/view-picker/components/ViewPickerContentEffect.tsx", currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,